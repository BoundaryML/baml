// This file is auto-generated. Do not edit this file manually.
//
// Disable formatting for this file to avoid linting errors.
// tslint:disable
// @ts-nocheck
/* eslint-disable */


import { Blah, Blah2, Category, Category2, Category3, ClassOptionalFields, ClassOptionalFieldsv2, ClassOptionalOutput, ClassOptionalOutput2, ClassOptionalOutput2v2, DataType, DynamicPropsClass, Email, EnumInClass, EnumInClass2, EnumOutput, EnumOutput2, Event, ModifiedOutput, NamedArgsSingleClass, NamedArgsSingleClass2, NamedArgsSingleClassList2, NamedArgsSingleEnum, NamedArgsSingleEnum2, NamedArgsSingleEnumList, NamedArgsSingleEnumList2, OptionalClass, OptionalClassv2, OptionalTest_CategoryType, OptionalTest_CategoryTypev2, OptionalTest_Prop1, OptionalTest_Prop1v2, OptionalTest_ReturnType, OptionalTest_ReturnTypev2, OrderInfo, OrderStatus, OverrideClass, OverrideEnum, RaysData, Resume, SearchParams, SomeClass2, Tag, TestClassAlias, TestClassWithEnum, TestClassWithEnum2, TestEnum, TestOutputClass, TestOutputClass2, UnionTest_ReturnType, UnionTest_ReturnTypev2, WithReasoning } from './types';


// Function to check if a value is a member of the Category enum
function isCategory(value: any): value is Category {
  return Object.values(Category).includes(value);
}

// Function to check if a value is a member of the Category2 enum
function isCategory2(value: any): value is Category2 {
  return Object.values(Category2).includes(value);
}

// Function to check if a value is a member of the Category3 enum
function isCategory3(value: any): value is Category3 {
  return Object.values(Category3).includes(value);
}

// Function to check if a value is a member of the DataType enum
function isDataType(value: any): value is DataType {
  return Object.values(DataType).includes(value);
}

// Function to check if a value is a member of the EnumInClass enum
function isEnumInClass(value: any): value is EnumInClass {
  return Object.values(EnumInClass).includes(value);
}

// Function to check if a value is a member of the EnumInClass2 enum
function isEnumInClass2(value: any): value is EnumInClass2 {
  return Object.values(EnumInClass2).includes(value);
}

// Function to check if a value is a member of the EnumOutput enum
function isEnumOutput(value: any): value is EnumOutput {
  return Object.values(EnumOutput).includes(value);
}

// Function to check if a value is a member of the EnumOutput2 enum
function isEnumOutput2(value: any): value is EnumOutput2 {
  return Object.values(EnumOutput2).includes(value);
}

// Function to check if a value is a member of the NamedArgsSingleEnum enum
function isNamedArgsSingleEnum(value: any): value is NamedArgsSingleEnum {
  return Object.values(NamedArgsSingleEnum).includes(value);
}

// Function to check if a value is a member of the NamedArgsSingleEnum2 enum
function isNamedArgsSingleEnum2(value: any): value is NamedArgsSingleEnum2 {
  return Object.values(NamedArgsSingleEnum2).includes(value);
}

// Function to check if a value is a member of the NamedArgsSingleEnumList enum
function isNamedArgsSingleEnumList(value: any): value is NamedArgsSingleEnumList {
  return Object.values(NamedArgsSingleEnumList).includes(value);
}

// Function to check if a value is a member of the NamedArgsSingleEnumList2 enum
function isNamedArgsSingleEnumList2(value: any): value is NamedArgsSingleEnumList2 {
  return Object.values(NamedArgsSingleEnumList2).includes(value);
}

// Function to check if a value is a member of the OptionalTest_CategoryType enum
function isOptionalTest_CategoryType(value: any): value is OptionalTest_CategoryType {
  return Object.values(OptionalTest_CategoryType).includes(value);
}

// Function to check if a value is a member of the OptionalTest_CategoryTypev2 enum
function isOptionalTest_CategoryTypev2(value: any): value is OptionalTest_CategoryTypev2 {
  return Object.values(OptionalTest_CategoryTypev2).includes(value);
}

// Function to check if a value is a member of the OrderStatus enum
function isOrderStatus(value: any): value is OrderStatus {
  return Object.values(OrderStatus).includes(value);
}

// Function to check if a value is a member of the OverrideEnum enum
function isOverrideEnum(value: any): value is OverrideEnum {
  return Object.values(OverrideEnum).includes(value);
}

// Function to check if a value is a member of the Tag enum
function isTag(value: any): value is Tag {
  return Object.values(Tag).includes(value);
}

// Function to check if a value is a member of the TestEnum enum
function isTestEnum(value: any): value is TestEnum {
  return Object.values(TestEnum).includes(value);
}

// Function to validate if an object is a Blah object
function isBlah(obj: any): obj is Blah {
  return (
    obj &&
    typeof obj === "object"
    && ("prop4" in obj && ((obj.prop4 === null || obj.prop4 === undefined) || typeof obj.prop4 === 'string'))
  );
}


class InternalBlah implements Blah {
  private constructor(private data: {
    prop4: string | null,
  }, private raw: Blah) {}

  static from(data: Blah): InternalBlah {
    return new InternalBlah({
      prop4: (data.prop4 === null || data.prop4 === undefined) ? null : data.prop4,
    }, data);
  }

  get prop4(): string | null {
    return this.data.prop4;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a Blah2 object
function isBlah2(obj: any): obj is Blah2 {
  return (
    obj &&
    typeof obj === "object"
    && ("prop4" in obj && ((obj.prop4 === null || obj.prop4 === undefined) || typeof obj.prop4 === 'string'))
  );
}


class InternalBlah2 implements Blah2 {
  private constructor(private data: {
    prop4: string | null,
  }, private raw: Blah2) {}

  static from(data: Blah2): InternalBlah2 {
    return new InternalBlah2({
      prop4: (data.prop4 === null || data.prop4 === undefined) ? null : data.prop4,
    }, data);
  }

  get prop4(): string | null {
    return this.data.prop4;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a ClassOptionalFields object
function isClassOptionalFields(obj: any): obj is ClassOptionalFields {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && ((obj.prop1 === null || obj.prop1 === undefined) || typeof obj.prop1 === 'string'))
    && ("prop2" in obj && ((obj.prop2 === null || obj.prop2 === undefined) || typeof obj.prop2 === 'string'))
  );
}


class InternalClassOptionalFields implements ClassOptionalFields {
  private constructor(private data: {
    prop1: string | null,
    prop2: string | null,
  }, private raw: ClassOptionalFields) {}

  static from(data: ClassOptionalFields): InternalClassOptionalFields {
    return new InternalClassOptionalFields({
      prop1: (data.prop1 === null || data.prop1 === undefined) ? null : data.prop1,
      prop2: (data.prop2 === null || data.prop2 === undefined) ? null : data.prop2,
    }, data);
  }

  get prop1(): string | null {
    return this.data.prop1;
  }
  get prop2(): string | null {
    return this.data.prop2;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a ClassOptionalFieldsv2 object
function isClassOptionalFieldsv2(obj: any): obj is ClassOptionalFieldsv2 {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && ((obj.prop1 === null || obj.prop1 === undefined) || typeof obj.prop1 === 'string'))
    && ("prop2" in obj && ((obj.prop2 === null || obj.prop2 === undefined) || typeof obj.prop2 === 'string'))
  );
}


class InternalClassOptionalFieldsv2 implements ClassOptionalFieldsv2 {
  private constructor(private data: {
    prop1: string | null,
    prop2: string | null,
  }, private raw: ClassOptionalFieldsv2) {}

  static from(data: ClassOptionalFieldsv2): InternalClassOptionalFieldsv2 {
    return new InternalClassOptionalFieldsv2({
      prop1: (data.prop1 === null || data.prop1 === undefined) ? null : data.prop1,
      prop2: (data.prop2 === null || data.prop2 === undefined) ? null : data.prop2,
    }, data);
  }

  get prop1(): string | null {
    return this.data.prop1;
  }
  get prop2(): string | null {
    return this.data.prop2;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a ClassOptionalOutput object
function isClassOptionalOutput(obj: any): obj is ClassOptionalOutput {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && (typeof obj.prop1 === 'string'))
    && ("prop2" in obj && (typeof obj.prop2 === 'string'))
  );
}


class InternalClassOptionalOutput implements ClassOptionalOutput {
  private constructor(private data: {
    prop1: string,
    prop2: string,
  }, private raw: ClassOptionalOutput) {}

  static from(data: ClassOptionalOutput): InternalClassOptionalOutput {
    return new InternalClassOptionalOutput({
      prop1: data.prop1,
      prop2: data.prop2,
    }, data);
  }

  get prop1(): string {
    return this.data.prop1;
  }
  get prop2(): string {
    return this.data.prop2;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a ClassOptionalOutput2 object
function isClassOptionalOutput2(obj: any): obj is ClassOptionalOutput2 {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && ((obj.prop1 === null || obj.prop1 === undefined) || typeof obj.prop1 === 'string'))
    && ("prop2" in obj && ((obj.prop2 === null || obj.prop2 === undefined) || typeof obj.prop2 === 'string'))
    && ("prop3" in obj && ((obj.prop3 === null || obj.prop3 === undefined) || isBlah(obj.prop3)))
  );
}


class InternalClassOptionalOutput2 implements ClassOptionalOutput2 {
  private constructor(private data: {
    prop1: string | null,
    prop2: string | null,
    prop3: Blah | null,
  }, private raw: ClassOptionalOutput2) {}

  static from(data: ClassOptionalOutput2): InternalClassOptionalOutput2 {
    return new InternalClassOptionalOutput2({
      prop1: (data.prop1 === null || data.prop1 === undefined) ? null : data.prop1,
      prop2: (data.prop2 === null || data.prop2 === undefined) ? null : data.prop2,
      prop3: (data.prop3 === null || data.prop3 === undefined) ? null : new InternalBlah(data.prop3),
    }, data);
  }

  get prop1(): string | null {
    return this.data.prop1;
  }
  get prop2(): string | null {
    return this.data.prop2;
  }
  get prop3(): Blah | null {
    return this.data.prop3;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a ClassOptionalOutput2v2 object
function isClassOptionalOutput2v2(obj: any): obj is ClassOptionalOutput2v2 {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && ((obj.prop1 === null || obj.prop1 === undefined) || typeof obj.prop1 === 'string'))
    && ("prop2" in obj && ((obj.prop2 === null || obj.prop2 === undefined) || typeof obj.prop2 === 'string'))
    && ("prop3" in obj && ((obj.prop3 === null || obj.prop3 === undefined) || isBlah2(obj.prop3)))
  );
}


class InternalClassOptionalOutput2v2 implements ClassOptionalOutput2v2 {
  private constructor(private data: {
    prop1: string | null,
    prop2: string | null,
    prop3: Blah2 | null,
  }, private raw: ClassOptionalOutput2v2) {}

  static from(data: ClassOptionalOutput2v2): InternalClassOptionalOutput2v2 {
    return new InternalClassOptionalOutput2v2({
      prop1: (data.prop1 === null || data.prop1 === undefined) ? null : data.prop1,
      prop2: (data.prop2 === null || data.prop2 === undefined) ? null : data.prop2,
      prop3: (data.prop3 === null || data.prop3 === undefined) ? null : new InternalBlah2(data.prop3),
    }, data);
  }

  get prop1(): string | null {
    return this.data.prop1;
  }
  get prop2(): string | null {
    return this.data.prop2;
  }
  get prop3(): Blah2 | null {
    return this.data.prop3;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a DynamicPropsClass object
function isDynamicPropsClass(obj: any): obj is DynamicPropsClass {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && (typeof obj.prop1 === 'string'))
    && ("prop2" in obj && (typeof obj.prop2 === 'string'))
    && ("prop3" in obj && (typeof obj.prop3 === 'number'))
  );
}


class InternalDynamicPropsClass implements DynamicPropsClass {
  private constructor(private data: {
    prop1: string,
    prop2: string,
    prop3: number,
  }, private raw: DynamicPropsClass) {}

  static from(data: DynamicPropsClass): InternalDynamicPropsClass {
    return new InternalDynamicPropsClass({
      prop1: data.prop1,
      prop2: data.prop2,
      prop3: data.prop3,
    }, data);
  }

  get prop1(): string {
    return this.data.prop1;
  }
  get prop2(): string {
    return this.data.prop2;
  }
  get prop3(): number {
    return this.data.prop3;
  }

  get display(): string {
    // TODO: Implement
    for (let i = 0; i < 10; i++) {
  console.log(i)
}


return this.prop1 + this.prop2
  }

  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a Email object
function isEmail(obj: any): obj is Email {
  return (
    obj &&
    typeof obj === "object"
    && ("subject" in obj && (typeof obj.subject === 'string'))
    && ("body" in obj && (typeof obj.body === 'string'))
    && ("from_address" in obj && (typeof obj.from_address === 'string'))
  );
}


class InternalEmail implements Email {
  private constructor(private data: {
    subject: string,
    body: string,
    from_address: string,
  }, private raw: Email) {}

  static from(data: Email): InternalEmail {
    return new InternalEmail({
      subject: data.subject,
      body: data.body,
      from_address: data.from_address,
    }, data);
  }

  get subject(): string {
    return this.data.subject;
  }
  get body(): string {
    return this.data.body;
  }
  get from_address(): string {
    return this.data.from_address;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a Event object
function isEvent(obj: any): obj is Event {
  return (
    obj &&
    typeof obj === "object"
    && ("title" in obj && (typeof obj.title === 'string'))
    && ("date" in obj && (typeof obj.date === 'string'))
    && ("location" in obj && (typeof obj.location === 'string'))
    && ("description" in obj && (typeof obj.description === 'string'))
  );
}


class InternalEvent implements Event {
  private constructor(private data: {
    title: string,
    date: string,
    location: string,
    description: string,
  }, private raw: Event) {}

  static from(data: Event): InternalEvent {
    return new InternalEvent({
      title: data.title,
      date: data.date,
      location: data.location,
      description: data.description,
    }, data);
  }

  get title(): string {
    return this.data.title;
  }
  get date(): string {
    return this.data.date;
  }
  get location(): string {
    return this.data.location;
  }
  get description(): string {
    return this.data.description;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a ModifiedOutput object
function isModifiedOutput(obj: any): obj is ModifiedOutput {
  return (
    obj &&
    typeof obj === "object"
    && ("reasoning" in obj && (typeof obj.reasoning === 'string'))
    && ("answer" in obj && (typeof obj.answer === 'string'))
  );
}


class InternalModifiedOutput implements ModifiedOutput {
  private constructor(private data: {
    reasoning: string,
    answer: string,
  }, private raw: ModifiedOutput) {}

  static from(data: ModifiedOutput): InternalModifiedOutput {
    return new InternalModifiedOutput({
      reasoning: data.reasoning,
      answer: data.answer,
    }, data);
  }

  get reasoning(): string {
    return this.data.reasoning;
  }
  get answer(): string {
    return this.data.answer;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a NamedArgsSingleClass object
function isNamedArgsSingleClass(obj: any): obj is NamedArgsSingleClass {
  return (
    obj &&
    typeof obj === "object"
    && ("key" in obj && (typeof obj.key === 'string'))
    && ("key_two" in obj && (typeof obj.key_two === 'boolean'))
    && ("key_three" in obj && (typeof obj.key_three === 'number'))
  );
}


class InternalNamedArgsSingleClass implements NamedArgsSingleClass {
  private constructor(private data: {
    key: string,
    key_two: boolean,
    key_three: number,
  }, private raw: NamedArgsSingleClass) {}

  static from(data: NamedArgsSingleClass): InternalNamedArgsSingleClass {
    return new InternalNamedArgsSingleClass({
      key: data.key,
      key_two: data.key_two,
      key_three: data.key_three,
    }, data);
  }

  get key(): string {
    return this.data.key;
  }
  get key_two(): boolean {
    return this.data.key_two;
  }
  get key_three(): number {
    return this.data.key_three;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a NamedArgsSingleClass2 object
function isNamedArgsSingleClass2(obj: any): obj is NamedArgsSingleClass2 {
  return (
    obj &&
    typeof obj === "object"
    && ("key" in obj && (typeof obj.key === 'string'))
    && ("key_two" in obj && (typeof obj.key_two === 'boolean'))
    && ("key_three" in obj && (typeof obj.key_three === 'number'))
  );
}


class InternalNamedArgsSingleClass2 implements NamedArgsSingleClass2 {
  private constructor(private data: {
    key: string,
    key_two: boolean,
    key_three: number,
  }, private raw: NamedArgsSingleClass2) {}

  static from(data: NamedArgsSingleClass2): InternalNamedArgsSingleClass2 {
    return new InternalNamedArgsSingleClass2({
      key: data.key,
      key_two: data.key_two,
      key_three: data.key_three,
    }, data);
  }

  get key(): string {
    return this.data.key;
  }
  get key_two(): boolean {
    return this.data.key_two;
  }
  get key_three(): number {
    return this.data.key_three;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a NamedArgsSingleClassList2 object
function isNamedArgsSingleClassList2(obj: any): obj is NamedArgsSingleClassList2 {
  return (
    obj &&
    typeof obj === "object"
    && ("key" in obj && (typeof obj.key === 'string'))
    && ("key_two" in obj && (typeof obj.key_two === 'boolean'))
    && ("key_three" in obj && (typeof obj.key_three === 'number'))
  );
}


class InternalNamedArgsSingleClassList2 implements NamedArgsSingleClassList2 {
  private constructor(private data: {
    key: string,
    key_two: boolean,
    key_three: number,
  }, private raw: NamedArgsSingleClassList2) {}

  static from(data: NamedArgsSingleClassList2): InternalNamedArgsSingleClassList2 {
    return new InternalNamedArgsSingleClassList2({
      key: data.key,
      key_two: data.key_two,
      key_three: data.key_three,
    }, data);
  }

  get key(): string {
    return this.data.key;
  }
  get key_two(): boolean {
    return this.data.key_two;
  }
  get key_three(): number {
    return this.data.key_three;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a OptionalClass object
function isOptionalClass(obj: any): obj is OptionalClass {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && (typeof obj.prop1 === 'string'))
    && ("prop2" in obj && (typeof obj.prop2 === 'string'))
  );
}


class InternalOptionalClass implements OptionalClass {
  private constructor(private data: {
    prop1: string,
    prop2: string,
  }, private raw: OptionalClass) {}

  static from(data: OptionalClass): InternalOptionalClass {
    return new InternalOptionalClass({
      prop1: data.prop1,
      prop2: data.prop2,
    }, data);
  }

  get prop1(): string {
    return this.data.prop1;
  }
  get prop2(): string {
    return this.data.prop2;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a OptionalClassv2 object
function isOptionalClassv2(obj: any): obj is OptionalClassv2 {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && (typeof obj.prop1 === 'string'))
    && ("prop2" in obj && (typeof obj.prop2 === 'string'))
  );
}


class InternalOptionalClassv2 implements OptionalClassv2 {
  private constructor(private data: {
    prop1: string,
    prop2: string,
  }, private raw: OptionalClassv2) {}

  static from(data: OptionalClassv2): InternalOptionalClassv2 {
    return new InternalOptionalClassv2({
      prop1: data.prop1,
      prop2: data.prop2,
    }, data);
  }

  get prop1(): string {
    return this.data.prop1;
  }
  get prop2(): string {
    return this.data.prop2;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a OptionalTest_Prop1 object
function isOptionalTest_Prop1(obj: any): obj is OptionalTest_Prop1 {
  return (
    obj &&
    typeof obj === "object"
    && ("omega_a" in obj && (typeof obj.omega_a === 'string'))
    && ("omega_b" in obj && (typeof obj.omega_b === 'number'))
  );
}


class InternalOptionalTest_Prop1 implements OptionalTest_Prop1 {
  private constructor(private data: {
    omega_a: string,
    omega_b: number,
  }, private raw: OptionalTest_Prop1) {}

  static from(data: OptionalTest_Prop1): InternalOptionalTest_Prop1 {
    return new InternalOptionalTest_Prop1({
      omega_a: data.omega_a,
      omega_b: data.omega_b,
    }, data);
  }

  get omega_a(): string {
    return this.data.omega_a;
  }
  get omega_b(): number {
    return this.data.omega_b;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a OptionalTest_Prop1v2 object
function isOptionalTest_Prop1v2(obj: any): obj is OptionalTest_Prop1v2 {
  return (
    obj &&
    typeof obj === "object"
    && ("omega_a" in obj && (typeof obj.omega_a === 'string'))
    && ("omega_b" in obj && (typeof obj.omega_b === 'number'))
  );
}


class InternalOptionalTest_Prop1v2 implements OptionalTest_Prop1v2 {
  private constructor(private data: {
    omega_a: string,
    omega_b: number,
  }, private raw: OptionalTest_Prop1v2) {}

  static from(data: OptionalTest_Prop1v2): InternalOptionalTest_Prop1v2 {
    return new InternalOptionalTest_Prop1v2({
      omega_a: data.omega_a,
      omega_b: data.omega_b,
    }, data);
  }

  get omega_a(): string {
    return this.data.omega_a;
  }
  get omega_b(): number {
    return this.data.omega_b;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a OptionalTest_ReturnType object
function isOptionalTest_ReturnType(obj: any): obj is OptionalTest_ReturnType {
  return (
    obj &&
    typeof obj === "object"
    && ("omega_1" in obj && ((obj.omega_1 === null || obj.omega_1 === undefined) || isOptionalTest_Prop1(obj.omega_1)))
    && ("omega_2" in obj && ((obj.omega_2 === null || obj.omega_2 === undefined) || typeof obj.omega_2 === 'string'))
    && ("omega_3" in obj && (Array.isArray(obj.omega_3) && obj.omega_3.every((x: any) => (x === null || x === undefined) || isOptionalTest_CategoryType(x))))
  );
}


class InternalOptionalTest_ReturnType implements OptionalTest_ReturnType {
  private constructor(private data: {
    omega_1: OptionalTest_Prop1 | null,
    omega_2: string | null,
    omega_3: OptionalTest_CategoryType | null[],
  }, private raw: OptionalTest_ReturnType) {}

  static from(data: OptionalTest_ReturnType): InternalOptionalTest_ReturnType {
    return new InternalOptionalTest_ReturnType({
      omega_1: (data.omega_1 === null || data.omega_1 === undefined) ? null : new InternalOptionalTest_Prop1(data.omega_1),
      omega_2: (data.omega_2 === null || data.omega_2 === undefined) ? null : data.omega_2,
      omega_3: data.omega_3.map(x => (x === null || x === undefined) ? null : x),
    }, data);
  }

  get omega_1(): OptionalTest_Prop1 | null {
    return this.data.omega_1;
  }
  get omega_2(): string | null {
    return this.data.omega_2;
  }
  get omega_3(): OptionalTest_CategoryType | null[] {
    return this.data.omega_3;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a OptionalTest_ReturnTypev2 object
function isOptionalTest_ReturnTypev2(obj: any): obj is OptionalTest_ReturnTypev2 {
  return (
    obj &&
    typeof obj === "object"
    && ("omega_1" in obj && ((obj.omega_1 === null || obj.omega_1 === undefined) || isOptionalTest_Prop1v2(obj.omega_1)))
    && ("omega_2" in obj && ((obj.omega_2 === null || obj.omega_2 === undefined) || typeof obj.omega_2 === 'string'))
    && ("omega_3" in obj && (Array.isArray(obj.omega_3) && obj.omega_3.every((x: any) => (x === null || x === undefined) || isOptionalTest_CategoryTypev2(x))))
  );
}


class InternalOptionalTest_ReturnTypev2 implements OptionalTest_ReturnTypev2 {
  private constructor(private data: {
    omega_1: OptionalTest_Prop1v2 | null,
    omega_2: string | null,
    omega_3: OptionalTest_CategoryTypev2 | null[],
  }, private raw: OptionalTest_ReturnTypev2) {}

  static from(data: OptionalTest_ReturnTypev2): InternalOptionalTest_ReturnTypev2 {
    return new InternalOptionalTest_ReturnTypev2({
      omega_1: (data.omega_1 === null || data.omega_1 === undefined) ? null : new InternalOptionalTest_Prop1v2(data.omega_1),
      omega_2: (data.omega_2 === null || data.omega_2 === undefined) ? null : data.omega_2,
      omega_3: data.omega_3.map(x => (x === null || x === undefined) ? null : x),
    }, data);
  }

  get omega_1(): OptionalTest_Prop1v2 | null {
    return this.data.omega_1;
  }
  get omega_2(): string | null {
    return this.data.omega_2;
  }
  get omega_3(): OptionalTest_CategoryTypev2 | null[] {
    return this.data.omega_3;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a OrderInfo object
function isOrderInfo(obj: any): obj is OrderInfo {
  return (
    obj &&
    typeof obj === "object"
    && ("order_status" in obj && (isOrderStatus(obj.order_status)))
    && ("tracking_number" in obj && ((obj.tracking_number === null || obj.tracking_number === undefined) || typeof obj.tracking_number === 'string'))
    && ("estimated_arrival_date" in obj && ((obj.estimated_arrival_date === null || obj.estimated_arrival_date === undefined) || typeof obj.estimated_arrival_date === 'string'))
  );
}


class InternalOrderInfo implements OrderInfo {
  private constructor(private data: {
    order_status: OrderStatus,
    tracking_number: string | null,
    estimated_arrival_date: string | null,
  }, private raw: OrderInfo) {}

  static from(data: OrderInfo): InternalOrderInfo {
    return new InternalOrderInfo({
      order_status: data.order_status,
      tracking_number: (data.tracking_number === null || data.tracking_number === undefined) ? null : data.tracking_number,
      estimated_arrival_date: (data.estimated_arrival_date === null || data.estimated_arrival_date === undefined) ? null : data.estimated_arrival_date,
    }, data);
  }

  get order_status(): OrderStatus {
    return this.data.order_status;
  }
  get tracking_number(): string | null {
    return this.data.tracking_number;
  }
  get estimated_arrival_date(): string | null {
    return this.data.estimated_arrival_date;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a OverrideClass object
function isOverrideClass(obj: any): obj is OverrideClass {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && (typeof obj.prop1 === 'string'))
    && ("prop2" in obj && (typeof obj.prop2 === 'string'))
  );
}


class InternalOverrideClass implements OverrideClass {
  private constructor(private data: {
    prop1: string,
    prop2: string,
  }, private raw: OverrideClass) {}

  static from(data: OverrideClass): InternalOverrideClass {
    return new InternalOverrideClass({
      prop1: data.prop1,
      prop2: data.prop2,
    }, data);
  }

  get prop1(): string {
    return this.data.prop1;
  }
  get prop2(): string {
    return this.data.prop2;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a RaysData object
function isRaysData(obj: any): obj is RaysData {
  return (
    obj &&
    typeof obj === "object"
    && ("dataType" in obj && (isDataType(obj.dataType)))
    && ("value" in obj && ((isResume(obj.value)) || (isEvent(obj.value))))
  );
}


class InternalRaysData implements RaysData {
  private constructor(private data: {
    dataType: DataType,
    value: Resume | Event,
  }, private raw: RaysData) {}

  static from(data: RaysData): InternalRaysData {
    return new InternalRaysData({
      dataType: data.dataType,
      value: ((x) => {
if (isResume(x)) {
  return new InternalResume(x);
}
if (isEvent(x)) {
  return new InternalEvent(x);
}
})(data.value),
    }, data);
  }

  get dataType(): DataType {
    return this.data.dataType;
  }
  get value(): Resume | Event {
    return this.data.value;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a Resume object
function isResume(obj: any): obj is Resume {
  return (
    obj &&
    typeof obj === "object"
    && ("name" in obj && (typeof obj.name === 'string'))
    && ("email" in obj && (typeof obj.email === 'string'))
    && ("phone" in obj && (typeof obj.phone === 'string'))
    && ("experience" in obj && (Array.isArray(obj.experience) && obj.experience.every((x: any) => typeof x === 'string')))
    && ("education" in obj && (Array.isArray(obj.education) && obj.education.every((x: any) => typeof x === 'string')))
    && ("skills" in obj && (Array.isArray(obj.skills) && obj.skills.every((x: any) => typeof x === 'string')))
  );
}


class InternalResume implements Resume {
  private constructor(private data: {
    name: string,
    email: string,
    phone: string,
    experience: string[],
    education: string[],
    skills: string[],
  }, private raw: Resume) {}

  static from(data: Resume): InternalResume {
    return new InternalResume({
      name: data.name,
      email: data.email,
      phone: data.phone,
      experience: data.experience.map(x => x),
      education: data.education.map(x => x),
      skills: data.skills.map(x => x),
    }, data);
  }

  get name(): string {
    return this.data.name;
  }
  get email(): string {
    return this.data.email;
  }
  get phone(): string {
    return this.data.phone;
  }
  get experience(): string[] {
    return this.data.experience;
  }
  get education(): string[] {
    return this.data.education;
  }
  get skills(): string[] {
    return this.data.skills;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a SearchParams object
function isSearchParams(obj: any): obj is SearchParams {
  return (
    obj &&
    typeof obj === "object"
    && ("dateRange" in obj && ((obj.dateRange === null || obj.dateRange === undefined) || typeof obj.dateRange === 'number'))
    && ("location" in obj && (Array.isArray(obj.location) && obj.location.every((x: any) => typeof x === 'string')))
    && ("jobTitle" in obj && ((obj.jobTitle === null || obj.jobTitle === undefined) || isWithReasoning(obj.jobTitle)))
    && ("company" in obj && ((obj.company === null || obj.company === undefined) || isWithReasoning(obj.company)))
    && ("description" in obj && (Array.isArray(obj.description) && obj.description.every((x: any) => isWithReasoning(x))))
    && ("tags" in obj && (Array.isArray(obj.tags) && obj.tags.every((x: any) => (isTag(x)) || (typeof x === 'string'))))
  );
}


class InternalSearchParams implements SearchParams {
  private constructor(private data: {
    dateRange: number | null,
    location: string[],
    jobTitle: WithReasoning | null,
    company: WithReasoning | null,
    description: InternalWithReasoning[],
    tags: Tag | string[],
  }, private raw: SearchParams) {}

  static from(data: SearchParams): InternalSearchParams {
    return new InternalSearchParams({
      dateRange: (data.dateRange === null || data.dateRange === undefined) ? null : data.dateRange,
      location: data.location.map(x => x),
      jobTitle: (data.jobTitle === null || data.jobTitle === undefined) ? null : new InternalWithReasoning(data.jobTitle),
      company: (data.company === null || data.company === undefined) ? null : new InternalWithReasoning(data.company),
      description: data.description.map(x => new InternalWithReasoning(x)),
      tags: data.tags.map(x => ((x) => {
if (isTag(x)) {
  return x;
}
if (typeof x === 'string') {
  return x;
}
})(x)),
    }, data);
  }

  get dateRange(): number | null {
    return this.data.dateRange;
  }
  get location(): string[] {
    return this.data.location;
  }
  get jobTitle(): WithReasoning | null {
    return this.data.jobTitle;
  }
  get company(): WithReasoning | null {
    return this.data.company;
  }
  get description(): InternalWithReasoning[] {
    return this.data.description;
  }
  get tags(): Tag | string[] {
    return this.data.tags;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a SomeClass2 object
function isSomeClass2(obj: any): obj is SomeClass2 {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && (typeof obj.prop1 === 'string'))
    && ("prop2" in obj && (typeof obj.prop2 === 'string'))
  );
}


class InternalSomeClass2 implements SomeClass2 {
  private constructor(private data: {
    prop1: string,
    prop2: string,
  }, private raw: SomeClass2) {}

  static from(data: SomeClass2): InternalSomeClass2 {
    return new InternalSomeClass2({
      prop1: data.prop1,
      prop2: data.prop2,
    }, data);
  }

  get prop1(): string {
    return this.data.prop1;
  }
  get prop2(): string {
    return this.data.prop2;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a TestClassAlias object
function isTestClassAlias(obj: any): obj is TestClassAlias {
  return (
    obj &&
    typeof obj === "object"
    && ("key" in obj && (typeof obj.key === 'string'))
    && ("key2" in obj && (typeof obj.key2 === 'string'))
    && ("key3" in obj && (typeof obj.key3 === 'string'))
    && ("key4" in obj && (typeof obj.key4 === 'string'))
    && ("key5" in obj && (typeof obj.key5 === 'string'))
  );
}


class InternalTestClassAlias implements TestClassAlias {
  private constructor(private data: {
    key: string,
    key2: string,
    key3: string,
    key4: string,
    key5: string,
  }, private raw: TestClassAlias) {}

  static from(data: TestClassAlias): InternalTestClassAlias {
    return new InternalTestClassAlias({
      key: data.key,
      key2: data.key2,
      key3: data.key3,
      key4: data.key4,
      key5: data.key5,
    }, data);
  }

  get key(): string {
    return this.data.key;
  }
  get key2(): string {
    return this.data.key2;
  }
  get key3(): string {
    return this.data.key3;
  }
  get key4(): string {
    return this.data.key4;
  }
  get key5(): string {
    return this.data.key5;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a TestClassWithEnum object
function isTestClassWithEnum(obj: any): obj is TestClassWithEnum {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && (typeof obj.prop1 === 'string'))
    && ("prop2" in obj && (isEnumInClass(obj.prop2)))
  );
}


class InternalTestClassWithEnum implements TestClassWithEnum {
  private constructor(private data: {
    prop1: string,
    prop2: EnumInClass,
  }, private raw: TestClassWithEnum) {}

  static from(data: TestClassWithEnum): InternalTestClassWithEnum {
    return new InternalTestClassWithEnum({
      prop1: data.prop1,
      prop2: data.prop2,
    }, data);
  }

  get prop1(): string {
    return this.data.prop1;
  }
  get prop2(): EnumInClass {
    return this.data.prop2;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a TestClassWithEnum2 object
function isTestClassWithEnum2(obj: any): obj is TestClassWithEnum2 {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && (typeof obj.prop1 === 'string'))
    && ("prop2" in obj && (isEnumInClass(obj.prop2)))
  );
}


class InternalTestClassWithEnum2 implements TestClassWithEnum2 {
  private constructor(private data: {
    prop1: string,
    prop2: EnumInClass,
  }, private raw: TestClassWithEnum2) {}

  static from(data: TestClassWithEnum2): InternalTestClassWithEnum2 {
    return new InternalTestClassWithEnum2({
      prop1: data.prop1,
      prop2: data.prop2,
    }, data);
  }

  get prop1(): string {
    return this.data.prop1;
  }
  get prop2(): EnumInClass {
    return this.data.prop2;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a TestOutputClass object
function isTestOutputClass(obj: any): obj is TestOutputClass {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && (typeof obj.prop1 === 'string'))
    && ("prop2" in obj && (typeof obj.prop2 === 'number'))
  );
}


class InternalTestOutputClass implements TestOutputClass {
  private constructor(private data: {
    prop1: string,
    prop2: number,
  }, private raw: TestOutputClass) {}

  static from(data: TestOutputClass): InternalTestOutputClass {
    return new InternalTestOutputClass({
      prop1: data.prop1,
      prop2: data.prop2,
    }, data);
  }

  get prop1(): string {
    return this.data.prop1;
  }
  get prop2(): number {
    return this.data.prop2;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a TestOutputClass2 object
function isTestOutputClass2(obj: any): obj is TestOutputClass2 {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && (typeof obj.prop1 === 'string'))
    && ("prop2" in obj && (typeof obj.prop2 === 'number'))
  );
}


class InternalTestOutputClass2 implements TestOutputClass2 {
  private constructor(private data: {
    prop1: string,
    prop2: number,
  }, private raw: TestOutputClass2) {}

  static from(data: TestOutputClass2): InternalTestOutputClass2 {
    return new InternalTestOutputClass2({
      prop1: data.prop1,
      prop2: data.prop2,
    }, data);
  }

  get prop1(): string {
    return this.data.prop1;
  }
  get prop2(): number {
    return this.data.prop2;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a UnionTest_ReturnType object
function isUnionTest_ReturnType(obj: any): obj is UnionTest_ReturnType {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && ((typeof obj.prop1 === 'string') || (typeof obj.prop1 === 'boolean')))
    && ("prop2" in obj && (Array.isArray(obj.prop2) && obj.prop2.every((x: any) => (typeof x === 'number') || (typeof x === 'boolean'))))
    && ("prop3" in obj && ((Array.isArray(obj.prop3) && obj.prop3.every((x: any) => typeof x === 'number')) || (Array.isArray(obj.prop3) && obj.prop3.every((x: any) => typeof x === 'boolean'))))
  );
}


class InternalUnionTest_ReturnType implements UnionTest_ReturnType {
  private constructor(private data: {
    prop1: string | boolean,
    prop2: number | boolean[],
    prop3: number[] | boolean[],
  }, private raw: UnionTest_ReturnType) {}

  static from(data: UnionTest_ReturnType): InternalUnionTest_ReturnType {
    return new InternalUnionTest_ReturnType({
      prop1: ((x) => {
if (typeof x === 'string') {
  return x;
}
if (typeof x === 'boolean') {
  return x;
}
})(data.prop1),
      prop2: data.prop2.map(x => ((x) => {
if (typeof x === 'number') {
  return x;
}
if (typeof x === 'boolean') {
  return x;
}
})(x)),
      prop3: ((x) => {
if (Array.isArray(x) && x.every((x: any) => typeof x === 'number')) {
  return x.map(x => x);
}
if (Array.isArray(x) && x.every((x: any) => typeof x === 'boolean')) {
  return x.map(x => x);
}
})(data.prop3),
    }, data);
  }

  get prop1(): string | boolean {
    return this.data.prop1;
  }
  get prop2(): number | boolean[] {
    return this.data.prop2;
  }
  get prop3(): number[] | boolean[] {
    return this.data.prop3;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a UnionTest_ReturnTypev2 object
function isUnionTest_ReturnTypev2(obj: any): obj is UnionTest_ReturnTypev2 {
  return (
    obj &&
    typeof obj === "object"
    && ("prop1" in obj && ((typeof obj.prop1 === 'string') || (typeof obj.prop1 === 'boolean')))
    && ("prop2" in obj && (Array.isArray(obj.prop2) && obj.prop2.every((x: any) => (typeof x === 'number') || (typeof x === 'boolean'))))
    && ("prop3" in obj && ((Array.isArray(obj.prop3) && obj.prop3.every((x: any) => typeof x === 'number')) || (Array.isArray(obj.prop3) && obj.prop3.every((x: any) => typeof x === 'boolean'))))
  );
}


class InternalUnionTest_ReturnTypev2 implements UnionTest_ReturnTypev2 {
  private constructor(private data: {
    prop1: string | boolean,
    prop2: number | boolean[],
    prop3: number[] | boolean[],
  }, private raw: UnionTest_ReturnTypev2) {}

  static from(data: UnionTest_ReturnTypev2): InternalUnionTest_ReturnTypev2 {
    return new InternalUnionTest_ReturnTypev2({
      prop1: ((x) => {
if (typeof x === 'string') {
  return x;
}
if (typeof x === 'boolean') {
  return x;
}
})(data.prop1),
      prop2: data.prop2.map(x => ((x) => {
if (typeof x === 'number') {
  return x;
}
if (typeof x === 'boolean') {
  return x;
}
})(x)),
      prop3: ((x) => {
if (Array.isArray(x) && x.every((x: any) => typeof x === 'number')) {
  return x.map(x => x);
}
if (Array.isArray(x) && x.every((x: any) => typeof x === 'boolean')) {
  return x.map(x => x);
}
})(data.prop3),
    }, data);
  }

  get prop1(): string | boolean {
    return this.data.prop1;
  }
  get prop2(): number | boolean[] {
    return this.data.prop2;
  }
  get prop3(): number[] | boolean[] {
    return this.data.prop3;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}

// Function to validate if an object is a WithReasoning object
function isWithReasoning(obj: any): obj is WithReasoning {
  return (
    obj &&
    typeof obj === "object"
    && ("value" in obj && (typeof obj.value === 'string'))
    && ("reasoning" in obj && (typeof obj.reasoning === 'string'))
  );
}


class InternalWithReasoning implements WithReasoning {
  private constructor(private data: {
    value: string,
    reasoning: string,
  }, private raw: WithReasoning) {}

  static from(data: WithReasoning): InternalWithReasoning {
    return new InternalWithReasoning({
      value: data.value,
      reasoning: data.reasoning,
    }, data);
  }

  get value(): string {
    return this.data.value;
  }
  get reasoning(): string {
    return this.data.reasoning;
  }


  toJSON(): string {
    return JSON.stringify(this.raw, null, 2);
  }
}


export { InternalBlah, InternalBlah2, InternalClassOptionalFields, InternalClassOptionalFieldsv2, InternalClassOptionalOutput, InternalClassOptionalOutput2, InternalClassOptionalOutput2v2, InternalDynamicPropsClass, InternalEmail, InternalEvent, InternalModifiedOutput, InternalNamedArgsSingleClass, InternalNamedArgsSingleClass2, InternalNamedArgsSingleClassList2, InternalOptionalClass, InternalOptionalClassv2, InternalOptionalTest_Prop1, InternalOptionalTest_Prop1v2, InternalOptionalTest_ReturnType, InternalOptionalTest_ReturnTypev2, InternalOrderInfo, InternalOverrideClass, InternalRaysData, InternalResume, InternalSearchParams, InternalSomeClass2, InternalTestClassAlias, InternalTestClassWithEnum, InternalTestClassWithEnum2, InternalTestOutputClass, InternalTestOutputClass2, InternalUnionTest_ReturnType, InternalUnionTest_ReturnTypev2, InternalWithReasoning }

