// This file is auto-generated. Do not edit this file manually.
//
// Disable formatting for this file to avoid linting errors.
// tslint:disable
// @ts-nocheck

import b from '../';

import { FireBamlEvent, traceAsync } from '@boundaryml/baml-core/ffi_layer';


describe('test_case:plain_maroon', () => {
  const test_fn = traceAsync('plain_maroon', 'null', [['impl', 'string']], 'positional', async (impl) => {
    FireBamlEvent.tags({
      'test_dataset_name': 'FnTestAliasedEnumOutput',
      'test_case_name': 'test',
      'test_case_arg_name': `plain_maroon[${impl}]`,
      'test_cycle_id': process.env.BOUNDARY_PROCESS_ID || 'local-run',
    });
    const test_case = "I am so excited!";
    const result = await b.FnTestAliasedEnumOutput.getImpl(impl).run(
      test_case
    );
  });

  describe('function:FnTestAliasedEnumOutput', () => {
    test('impl:v1', async () => {
      await test_fn('v1');
    });
  });
});

describe('test_case:practical_blush', () => {
  const test_fn = traceAsync('practical_blush', 'null', [['impl', 'string']], 'positional', async (impl) => {
    FireBamlEvent.tags({
      'test_dataset_name': 'FnTestAliasedEnumOutput',
      'test_case_name': 'test',
      'test_case_arg_name': `practical_blush[${impl}]`,
      'test_cycle_id': process.env.BOUNDARY_PROCESS_ID || 'local-run',
    });
    const test_case = "I am so sad";
    const result = await b.FnTestAliasedEnumOutput.getImpl(impl).run(
      test_case
    );
  });

  describe('function:FnTestAliasedEnumOutput', () => {
    test('impl:v1', async () => {
      await test_fn('v1');
    });
  });
});

describe('test_case:pretty_maroon', () => {
  const test_fn = traceAsync('pretty_maroon', 'null', [['impl', 'string']], 'positional', async (impl) => {
    FireBamlEvent.tags({
      'test_dataset_name': 'FnTestAliasedEnumOutput',
      'test_case_name': 'test',
      'test_case_arg_name': `pretty_maroon[${impl}]`,
      'test_cycle_id': process.env.BOUNDARY_PROCESS_ID || 'local-run',
    });
    const test_case = "I am angry!!!!";
    const result = await b.FnTestAliasedEnumOutput.getImpl(impl).run(
      test_case
    );
  });

  describe('function:FnTestAliasedEnumOutput', () => {
    test('impl:v1', async () => {
      await test_fn('v1');
    });
  });
});
