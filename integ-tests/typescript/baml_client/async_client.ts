/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { BamlRuntime, FunctionResult, BamlCtxManager, BamlStream, Image, ClientRegistry, BamlValidationError, createBamlValidationError } from "@boundaryml/baml"
import {Blah, BookOrder, ClassOptionalOutput, ClassOptionalOutput2, ClassWithImage, CustomTaskResult, DummyOutput, DynInputOutput, DynamicClassOne, DynamicClassTwo, DynamicOutput, Education, Email, Event, FakeImage, FlightConfirmation, GroceryReceipt, InnerClass, InnerClass2, NamedArgsSingleClass, Nested, Nested2, OptionalTest_Prop1, OptionalTest_ReturnType, OrderInfo, Person, Quantity, RaysData, ReceiptInfo, ReceiptItem, Recipe, Resume, Schema, SearchParams, SomeClassNestedDynamic, StringToClassEntry, TestClassAlias, TestClassNested, TestClassWithEnum, TestOutputClass, UnionTest_ReturnType, WithReasoning, Category, Category2, Category3, Color, DataType, DynEnumOne, DynEnumTwo, EnumInClass, EnumOutput, Hobby, NamedArgsSingleEnum, NamedArgsSingleEnumList, OptionalTest_CategoryType, OrderStatus, Tag, TestEnum} from "./types"
import TypeBuilder from "./type_builder"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export type RecursivePartialNull<T> = T extends object
  ? {
      [P in keyof T]?: RecursivePartialNull<T[P]>;
    }
  : T | null;

export class BamlAsyncClient {
  private runtime: BamlRuntime
  private ctx_manager: BamlCtxManager
  private stream_client: BamlStreamClient

  constructor(runtime: BamlRuntime, ctx_manager: BamlCtxManager) {
    this.runtime = runtime
    this.ctx_manager = ctx_manager
    this.stream_client = new BamlStreamClient(runtime, ctx_manager)
  }

  get stream() {
    return this.stream_client
  }  

  
  async AaaSamOutputFormat(
      recipe: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Recipe> {
    try {
      const raw = await this.runtime.callFunction(
        "AaaSamOutputFormat",
        {
          "recipe": recipe
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as Recipe
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async AudioInput(
      aud: Audio,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "AudioInput",
        {
          "aud": aud
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async ClassifyDynEnumTwo(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<(string | DynEnumTwo)> {
    try {
      const raw = await this.runtime.callFunction(
        "ClassifyDynEnumTwo",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as (string | DynEnumTwo)
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async ClassifyMessage(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Category> {
    try {
      const raw = await this.runtime.callFunction(
        "ClassifyMessage",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as Category
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async ClassifyMessage2(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Category> {
    try {
      const raw = await this.runtime.callFunction(
        "ClassifyMessage2",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as Category
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async ClassifyMessage3(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Category> {
    try {
      const raw = await this.runtime.callFunction(
        "ClassifyMessage3",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as Category
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async CustomTask(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<BookOrder | FlightConfirmation | GroceryReceipt> {
    try {
      const raw = await this.runtime.callFunction(
        "CustomTask",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as BookOrder | FlightConfirmation | GroceryReceipt
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async DescribeImage(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "DescribeImage",
        {
          "img": img
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async DescribeImage2(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "DescribeImage2",
        {
          "classWithImage": classWithImage,"img2": img2
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async DescribeImage3(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "DescribeImage3",
        {
          "classWithImage": classWithImage,"img2": img2
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async DescribeImage4(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "DescribeImage4",
        {
          "classWithImage": classWithImage,"img2": img2
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async DummyOutputFunction(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<DummyOutput> {
    try {
      const raw = await this.runtime.callFunction(
        "DummyOutputFunction",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as DummyOutput
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async DynamicFunc(
      input: DynamicClassOne,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<DynamicClassTwo> {
    try {
      const raw = await this.runtime.callFunction(
        "DynamicFunc",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as DynamicClassTwo
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async DynamicInputOutput(
      input: DynInputOutput,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<DynInputOutput> {
    try {
      const raw = await this.runtime.callFunction(
        "DynamicInputOutput",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as DynInputOutput
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async DynamicListInputOutput(
      input: DynInputOutput[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<DynInputOutput[]> {
    try {
      const raw = await this.runtime.callFunction(
        "DynamicListInputOutput",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as DynInputOutput[]
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async ExpectFailure(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "ExpectFailure",
        {
          
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async ExtractNames(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string[]> {
    try {
      const raw = await this.runtime.callFunction(
        "ExtractNames",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string[]
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async ExtractPeople(
      text: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Person[]> {
    try {
      const raw = await this.runtime.callFunction(
        "ExtractPeople",
        {
          "text": text
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as Person[]
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async ExtractReceiptInfo(
      email: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<ReceiptInfo> {
    try {
      const raw = await this.runtime.callFunction(
        "ExtractReceiptInfo",
        {
          "email": email
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as ReceiptInfo
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async ExtractResume(
      resume: string,img?: Image | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Resume> {
    try {
      const raw = await this.runtime.callFunction(
        "ExtractResume",
        {
          "resume": resume,"img": img?? null
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as Resume
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async ExtractResume2(
      resume: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Resume> {
    try {
      const raw = await this.runtime.callFunction(
        "ExtractResume2",
        {
          "resume": resume
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as Resume
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnClassOptionalOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<ClassOptionalOutput | null> {
    try {
      const raw = await this.runtime.callFunction(
        "FnClassOptionalOutput",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as ClassOptionalOutput | null
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnClassOptionalOutput2(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<ClassOptionalOutput2 | null> {
    try {
      const raw = await this.runtime.callFunction(
        "FnClassOptionalOutput2",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as ClassOptionalOutput2 | null
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnEnumListOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<EnumOutput[]> {
    try {
      const raw = await this.runtime.callFunction(
        "FnEnumListOutput",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as EnumOutput[]
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnEnumOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<EnumOutput> {
    try {
      const raw = await this.runtime.callFunction(
        "FnEnumOutput",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as EnumOutput
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnNamedArgsSingleStringOptional(
      myString?: string | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "FnNamedArgsSingleStringOptional",
        {
          "myString": myString?? null
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnOutputBool(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<boolean> {
    try {
      const raw = await this.runtime.callFunction(
        "FnOutputBool",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as boolean
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnOutputClass(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestOutputClass> {
    try {
      const raw = await this.runtime.callFunction(
        "FnOutputClass",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as TestOutputClass
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnOutputClassList(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestOutputClass[]> {
    try {
      const raw = await this.runtime.callFunction(
        "FnOutputClassList",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as TestOutputClass[]
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnOutputClassNested(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestClassNested> {
    try {
      const raw = await this.runtime.callFunction(
        "FnOutputClassNested",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as TestClassNested
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnOutputClassWithEnum(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestClassWithEnum> {
    try {
      const raw = await this.runtime.callFunction(
        "FnOutputClassWithEnum",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as TestClassWithEnum
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnOutputStringList(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string[]> {
    try {
      const raw = await this.runtime.callFunction(
        "FnOutputStringList",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string[]
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnTestAliasedEnumOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestEnum> {
    try {
      const raw = await this.runtime.callFunction(
        "FnTestAliasedEnumOutput",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as TestEnum
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnTestClassAlias(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestClassAlias> {
    try {
      const raw = await this.runtime.callFunction(
        "FnTestClassAlias",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as TestClassAlias
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async FnTestNamedArgsSingleEnum(
      myArg: NamedArgsSingleEnum,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "FnTestNamedArgsSingleEnum",
        {
          "myArg": myArg
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async GetDataType(
      text: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<RaysData> {
    try {
      const raw = await this.runtime.callFunction(
        "GetDataType",
        {
          "text": text
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as RaysData
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async GetOrderInfo(
      email: Email,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<OrderInfo> {
    try {
      const raw = await this.runtime.callFunction(
        "GetOrderInfo",
        {
          "email": email
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as OrderInfo
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async GetQuery(
      query: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<SearchParams> {
    try {
      const raw = await this.runtime.callFunction(
        "GetQuery",
        {
          "query": query
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as SearchParams
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async MyFunc(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<DynamicOutput> {
    try {
      const raw = await this.runtime.callFunction(
        "MyFunc",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as DynamicOutput
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async OptionalTest_Function(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<(OptionalTest_ReturnType | null)[]> {
    try {
      const raw = await this.runtime.callFunction(
        "OptionalTest_Function",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as (OptionalTest_ReturnType | null)[]
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async PromptTestClaude(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "PromptTestClaude",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async PromptTestClaudeChat(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "PromptTestClaudeChat",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async PromptTestClaudeChatNoSystem(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "PromptTestClaudeChatNoSystem",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async PromptTestOpenAI(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "PromptTestOpenAI",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async PromptTestOpenAIChat(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "PromptTestOpenAIChat",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async PromptTestOpenAIChatNoSystem(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "PromptTestOpenAIChatNoSystem",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async PromptTestStreaming(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "PromptTestStreaming",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async SchemaDescriptions(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Schema> {
    try {
      const raw = await this.runtime.callFunction(
        "SchemaDescriptions",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as Schema
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestAnthropic(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestAnthropic",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestAnthropicShorthand(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestAnthropicShorthand",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestAws(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestAws",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestAzure(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestAzure",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestCaching(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestCaching",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFallbackClient(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFallbackClient",
        {
          
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFallbackToShorthand(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFallbackToShorthand",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFnNamedArgsSingleBool(
      myBool: boolean,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFnNamedArgsSingleBool",
        {
          "myBool": myBool
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFnNamedArgsSingleClass(
      myArg: NamedArgsSingleClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFnNamedArgsSingleClass",
        {
          "myArg": myArg
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFnNamedArgsSingleEnumList(
      myArg: NamedArgsSingleEnumList[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFnNamedArgsSingleEnumList",
        {
          "myArg": myArg
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFnNamedArgsSingleFloat(
      myFloat: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFnNamedArgsSingleFloat",
        {
          "myFloat": myFloat
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFnNamedArgsSingleInt(
      myInt: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFnNamedArgsSingleInt",
        {
          "myInt": myInt
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFnNamedArgsSingleMapStringToClass(
      myMap: Record<string, StringToClassEntry>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Record<string, StringToClassEntry>> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFnNamedArgsSingleMapStringToClass",
        {
          "myMap": myMap
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as Record<string, StringToClassEntry>
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFnNamedArgsSingleMapStringToMap(
      myMap: Record<string, Record<string, string>>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Record<string, Record<string, string>>> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFnNamedArgsSingleMapStringToMap",
        {
          "myMap": myMap
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as Record<string, Record<string, string>>
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFnNamedArgsSingleMapStringToString(
      myMap: Record<string, string>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Record<string, string>> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFnNamedArgsSingleMapStringToString",
        {
          "myMap": myMap
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as Record<string, string>
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFnNamedArgsSingleString(
      myString: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFnNamedArgsSingleString",
        {
          "myString": myString
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFnNamedArgsSingleStringArray(
      myStringArray: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFnNamedArgsSingleStringArray",
        {
          "myStringArray": myStringArray
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestFnNamedArgsSingleStringList(
      myArg: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestFnNamedArgsSingleStringList",
        {
          "myArg": myArg
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestGemini(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestGemini",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestImageInput(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestImageInput",
        {
          "img": img
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestImageInputAnthropic(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestImageInputAnthropic",
        {
          "img": img
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestImageListInput(
      imgs: Image[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestImageListInput",
        {
          "imgs": imgs
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestMulticlassNamedArgs(
      myArg: NamedArgsSingleClass,myArg2: NamedArgsSingleClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestMulticlassNamedArgs",
        {
          "myArg": myArg,"myArg2": myArg2
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestOllama(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestOllama",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestOpenAILegacyProvider(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestOpenAILegacyProvider",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestOpenAIShorthand(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestOpenAIShorthand",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestRetryConstant(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestRetryConstant",
        {
          
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestRetryExponential(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestRetryExponential",
        {
          
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async TestVertex(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    try {
      const raw = await this.runtime.callFunction(
        "TestVertex",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as string
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
  async UnionTest_Function(
      input: string | boolean,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<UnionTest_ReturnType> {
    try {
      const raw = await this.runtime.callFunction(
        "UnionTest_Function",
        {
          "input": input
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as UnionTest_ReturnType
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  
}

class BamlStreamClient {
  constructor(private runtime: BamlRuntime, private ctx_manager: BamlCtxManager) {}

  
  AaaSamOutputFormat(
      recipe: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Recipe>, Recipe> {
    try {
      const raw = this.runtime.streamFunction(
        "AaaSamOutputFormat",
        {
          "recipe": recipe
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<Recipe>, Recipe>(
        raw,
        (a): a is RecursivePartialNull<Recipe> => a,
        (a): a is Recipe => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  AudioInput(
      aud: Audio,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "AudioInput",
        {
          "aud": aud
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  ClassifyDynEnumTwo(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<(string | DynEnumTwo)>, (string | DynEnumTwo)> {
    try {
      const raw = this.runtime.streamFunction(
        "ClassifyDynEnumTwo",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<(string | DynEnumTwo)>, (string | DynEnumTwo)>(
        raw,
        (a): a is RecursivePartialNull<(string | DynEnumTwo)> => a,
        (a): a is (string | DynEnumTwo) => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  ClassifyMessage(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Category>, Category> {
    try {
      const raw = this.runtime.streamFunction(
        "ClassifyMessage",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<Category>, Category>(
        raw,
        (a): a is RecursivePartialNull<Category> => a,
        (a): a is Category => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  ClassifyMessage2(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Category>, Category> {
    try {
      const raw = this.runtime.streamFunction(
        "ClassifyMessage2",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<Category>, Category>(
        raw,
        (a): a is RecursivePartialNull<Category> => a,
        (a): a is Category => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  ClassifyMessage3(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Category>, Category> {
    try {
      const raw = this.runtime.streamFunction(
        "ClassifyMessage3",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<Category>, Category>(
        raw,
        (a): a is RecursivePartialNull<Category> => a,
        (a): a is Category => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  CustomTask(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<BookOrder | FlightConfirmation | GroceryReceipt>, BookOrder | FlightConfirmation | GroceryReceipt> {
    try {
      const raw = this.runtime.streamFunction(
        "CustomTask",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<BookOrder | FlightConfirmation | GroceryReceipt>, BookOrder | FlightConfirmation | GroceryReceipt>(
        raw,
        (a): a is RecursivePartialNull<BookOrder | FlightConfirmation | GroceryReceipt> => a,
        (a): a is BookOrder | FlightConfirmation | GroceryReceipt => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  DescribeImage(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "DescribeImage",
        {
          "img": img
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  DescribeImage2(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "DescribeImage2",
        {
          "classWithImage": classWithImage,"img2": img2
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  DescribeImage3(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "DescribeImage3",
        {
          "classWithImage": classWithImage,"img2": img2
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  DescribeImage4(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "DescribeImage4",
        {
          "classWithImage": classWithImage,"img2": img2
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  DummyOutputFunction(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<DummyOutput>, DummyOutput> {
    try {
      const raw = this.runtime.streamFunction(
        "DummyOutputFunction",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<DummyOutput>, DummyOutput>(
        raw,
        (a): a is RecursivePartialNull<DummyOutput> => a,
        (a): a is DummyOutput => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  DynamicFunc(
      input: DynamicClassOne,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<DynamicClassTwo>, DynamicClassTwo> {
    try {
      const raw = this.runtime.streamFunction(
        "DynamicFunc",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<DynamicClassTwo>, DynamicClassTwo>(
        raw,
        (a): a is RecursivePartialNull<DynamicClassTwo> => a,
        (a): a is DynamicClassTwo => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  DynamicInputOutput(
      input: DynInputOutput,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<DynInputOutput>, DynInputOutput> {
    try {
      const raw = this.runtime.streamFunction(
        "DynamicInputOutput",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<DynInputOutput>, DynInputOutput>(
        raw,
        (a): a is RecursivePartialNull<DynInputOutput> => a,
        (a): a is DynInputOutput => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  DynamicListInputOutput(
      input: DynInputOutput[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<DynInputOutput[]>, DynInputOutput[]> {
    try {
      const raw = this.runtime.streamFunction(
        "DynamicListInputOutput",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<DynInputOutput[]>, DynInputOutput[]>(
        raw,
        (a): a is RecursivePartialNull<DynInputOutput[]> => a,
        (a): a is DynInputOutput[] => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  ExpectFailure(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "ExpectFailure",
        {
          
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  ExtractNames(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string[]>, string[]> {
    try {
      const raw = this.runtime.streamFunction(
        "ExtractNames",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string[]>, string[]>(
        raw,
        (a): a is RecursivePartialNull<string[]> => a,
        (a): a is string[] => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  ExtractPeople(
      text: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Person[]>, Person[]> {
    try {
      const raw = this.runtime.streamFunction(
        "ExtractPeople",
        {
          "text": text
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<Person[]>, Person[]>(
        raw,
        (a): a is RecursivePartialNull<Person[]> => a,
        (a): a is Person[] => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  ExtractReceiptInfo(
      email: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<ReceiptInfo>, ReceiptInfo> {
    try {
      const raw = this.runtime.streamFunction(
        "ExtractReceiptInfo",
        {
          "email": email
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<ReceiptInfo>, ReceiptInfo>(
        raw,
        (a): a is RecursivePartialNull<ReceiptInfo> => a,
        (a): a is ReceiptInfo => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  ExtractResume(
      resume: string,img?: Image | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Resume>, Resume> {
    try {
      const raw = this.runtime.streamFunction(
        "ExtractResume",
        {
          "resume": resume,"img": img ?? null
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<Resume>, Resume>(
        raw,
        (a): a is RecursivePartialNull<Resume> => a,
        (a): a is Resume => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  ExtractResume2(
      resume: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Resume>, Resume> {
    try {
      const raw = this.runtime.streamFunction(
        "ExtractResume2",
        {
          "resume": resume
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<Resume>, Resume>(
        raw,
        (a): a is RecursivePartialNull<Resume> => a,
        (a): a is Resume => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnClassOptionalOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<ClassOptionalOutput | null>, ClassOptionalOutput | null> {
    try {
      const raw = this.runtime.streamFunction(
        "FnClassOptionalOutput",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<ClassOptionalOutput | null>, ClassOptionalOutput | null>(
        raw,
        (a): a is RecursivePartialNull<ClassOptionalOutput | null> => a,
        (a): a is ClassOptionalOutput | null => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnClassOptionalOutput2(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<ClassOptionalOutput2 | null>, ClassOptionalOutput2 | null> {
    try {
      const raw = this.runtime.streamFunction(
        "FnClassOptionalOutput2",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<ClassOptionalOutput2 | null>, ClassOptionalOutput2 | null>(
        raw,
        (a): a is RecursivePartialNull<ClassOptionalOutput2 | null> => a,
        (a): a is ClassOptionalOutput2 | null => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnEnumListOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<EnumOutput[]>, EnumOutput[]> {
    try {
      const raw = this.runtime.streamFunction(
        "FnEnumListOutput",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<EnumOutput[]>, EnumOutput[]>(
        raw,
        (a): a is RecursivePartialNull<EnumOutput[]> => a,
        (a): a is EnumOutput[] => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnEnumOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<EnumOutput>, EnumOutput> {
    try {
      const raw = this.runtime.streamFunction(
        "FnEnumOutput",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<EnumOutput>, EnumOutput>(
        raw,
        (a): a is RecursivePartialNull<EnumOutput> => a,
        (a): a is EnumOutput => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnNamedArgsSingleStringOptional(
      myString?: string | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "FnNamedArgsSingleStringOptional",
        {
          "myString": myString ?? null
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnOutputBool(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<boolean>, boolean> {
    try {
      const raw = this.runtime.streamFunction(
        "FnOutputBool",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<boolean>, boolean>(
        raw,
        (a): a is RecursivePartialNull<boolean> => a,
        (a): a is boolean => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnOutputClass(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestOutputClass>, TestOutputClass> {
    try {
      const raw = this.runtime.streamFunction(
        "FnOutputClass",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<TestOutputClass>, TestOutputClass>(
        raw,
        (a): a is RecursivePartialNull<TestOutputClass> => a,
        (a): a is TestOutputClass => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnOutputClassList(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestOutputClass[]>, TestOutputClass[]> {
    try {
      const raw = this.runtime.streamFunction(
        "FnOutputClassList",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<TestOutputClass[]>, TestOutputClass[]>(
        raw,
        (a): a is RecursivePartialNull<TestOutputClass[]> => a,
        (a): a is TestOutputClass[] => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnOutputClassNested(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestClassNested>, TestClassNested> {
    try {
      const raw = this.runtime.streamFunction(
        "FnOutputClassNested",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<TestClassNested>, TestClassNested>(
        raw,
        (a): a is RecursivePartialNull<TestClassNested> => a,
        (a): a is TestClassNested => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnOutputClassWithEnum(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestClassWithEnum>, TestClassWithEnum> {
    try {
      const raw = this.runtime.streamFunction(
        "FnOutputClassWithEnum",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<TestClassWithEnum>, TestClassWithEnum>(
        raw,
        (a): a is RecursivePartialNull<TestClassWithEnum> => a,
        (a): a is TestClassWithEnum => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnOutputStringList(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string[]>, string[]> {
    try {
      const raw = this.runtime.streamFunction(
        "FnOutputStringList",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string[]>, string[]>(
        raw,
        (a): a is RecursivePartialNull<string[]> => a,
        (a): a is string[] => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnTestAliasedEnumOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestEnum>, TestEnum> {
    try {
      const raw = this.runtime.streamFunction(
        "FnTestAliasedEnumOutput",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<TestEnum>, TestEnum>(
        raw,
        (a): a is RecursivePartialNull<TestEnum> => a,
        (a): a is TestEnum => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnTestClassAlias(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestClassAlias>, TestClassAlias> {
    try {
      const raw = this.runtime.streamFunction(
        "FnTestClassAlias",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<TestClassAlias>, TestClassAlias>(
        raw,
        (a): a is RecursivePartialNull<TestClassAlias> => a,
        (a): a is TestClassAlias => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  FnTestNamedArgsSingleEnum(
      myArg: NamedArgsSingleEnum,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "FnTestNamedArgsSingleEnum",
        {
          "myArg": myArg
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  GetDataType(
      text: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<RaysData>, RaysData> {
    try {
      const raw = this.runtime.streamFunction(
        "GetDataType",
        {
          "text": text
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<RaysData>, RaysData>(
        raw,
        (a): a is RecursivePartialNull<RaysData> => a,
        (a): a is RaysData => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  GetOrderInfo(
      email: Email,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<OrderInfo>, OrderInfo> {
    try {
      const raw = this.runtime.streamFunction(
        "GetOrderInfo",
        {
          "email": email
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<OrderInfo>, OrderInfo>(
        raw,
        (a): a is RecursivePartialNull<OrderInfo> => a,
        (a): a is OrderInfo => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  GetQuery(
      query: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<SearchParams>, SearchParams> {
    try {
      const raw = this.runtime.streamFunction(
        "GetQuery",
        {
          "query": query
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<SearchParams>, SearchParams>(
        raw,
        (a): a is RecursivePartialNull<SearchParams> => a,
        (a): a is SearchParams => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  MyFunc(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<DynamicOutput>, DynamicOutput> {
    try {
      const raw = this.runtime.streamFunction(
        "MyFunc",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<DynamicOutput>, DynamicOutput>(
        raw,
        (a): a is RecursivePartialNull<DynamicOutput> => a,
        (a): a is DynamicOutput => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  OptionalTest_Function(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<(OptionalTest_ReturnType | null)[]>, (OptionalTest_ReturnType | null)[]> {
    try {
      const raw = this.runtime.streamFunction(
        "OptionalTest_Function",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<(OptionalTest_ReturnType | null)[]>, (OptionalTest_ReturnType | null)[]>(
        raw,
        (a): a is RecursivePartialNull<(OptionalTest_ReturnType | null)[]> => a,
        (a): a is (OptionalTest_ReturnType | null)[] => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  PromptTestClaude(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "PromptTestClaude",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  PromptTestClaudeChat(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "PromptTestClaudeChat",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  PromptTestClaudeChatNoSystem(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "PromptTestClaudeChatNoSystem",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  PromptTestOpenAI(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "PromptTestOpenAI",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  PromptTestOpenAIChat(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "PromptTestOpenAIChat",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  PromptTestOpenAIChatNoSystem(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "PromptTestOpenAIChatNoSystem",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  PromptTestStreaming(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "PromptTestStreaming",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  SchemaDescriptions(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Schema>, Schema> {
    try {
      const raw = this.runtime.streamFunction(
        "SchemaDescriptions",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<Schema>, Schema>(
        raw,
        (a): a is RecursivePartialNull<Schema> => a,
        (a): a is Schema => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestAnthropic(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestAnthropic",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestAnthropicShorthand(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestAnthropicShorthand",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestAws(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestAws",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestAzure(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestAzure",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestCaching(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestCaching",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFallbackClient(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFallbackClient",
        {
          
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFallbackToShorthand(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFallbackToShorthand",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFnNamedArgsSingleBool(
      myBool: boolean,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFnNamedArgsSingleBool",
        {
          "myBool": myBool
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFnNamedArgsSingleClass(
      myArg: NamedArgsSingleClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFnNamedArgsSingleClass",
        {
          "myArg": myArg
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFnNamedArgsSingleEnumList(
      myArg: NamedArgsSingleEnumList[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFnNamedArgsSingleEnumList",
        {
          "myArg": myArg
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFnNamedArgsSingleFloat(
      myFloat: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFnNamedArgsSingleFloat",
        {
          "myFloat": myFloat
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFnNamedArgsSingleInt(
      myInt: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFnNamedArgsSingleInt",
        {
          "myInt": myInt
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFnNamedArgsSingleMapStringToClass(
      myMap: Record<string, StringToClassEntry>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Record<string, StringToClassEntry>>, Record<string, StringToClassEntry>> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFnNamedArgsSingleMapStringToClass",
        {
          "myMap": myMap
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<Record<string, StringToClassEntry>>, Record<string, StringToClassEntry>>(
        raw,
        (a): a is RecursivePartialNull<Record<string, StringToClassEntry>> => a,
        (a): a is Record<string, StringToClassEntry> => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFnNamedArgsSingleMapStringToMap(
      myMap: Record<string, Record<string, string>>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Record<string, Record<string, string>>>, Record<string, Record<string, string>>> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFnNamedArgsSingleMapStringToMap",
        {
          "myMap": myMap
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<Record<string, Record<string, string>>>, Record<string, Record<string, string>>>(
        raw,
        (a): a is RecursivePartialNull<Record<string, Record<string, string>>> => a,
        (a): a is Record<string, Record<string, string>> => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFnNamedArgsSingleMapStringToString(
      myMap: Record<string, string>,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Record<string, string>>, Record<string, string>> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFnNamedArgsSingleMapStringToString",
        {
          "myMap": myMap
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<Record<string, string>>, Record<string, string>>(
        raw,
        (a): a is RecursivePartialNull<Record<string, string>> => a,
        (a): a is Record<string, string> => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFnNamedArgsSingleString(
      myString: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFnNamedArgsSingleString",
        {
          "myString": myString
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFnNamedArgsSingleStringArray(
      myStringArray: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFnNamedArgsSingleStringArray",
        {
          "myStringArray": myStringArray
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestFnNamedArgsSingleStringList(
      myArg: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestFnNamedArgsSingleStringList",
        {
          "myArg": myArg
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestGemini(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestGemini",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestImageInput(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestImageInput",
        {
          "img": img
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestImageInputAnthropic(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestImageInputAnthropic",
        {
          "img": img
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestImageListInput(
      imgs: Image[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestImageListInput",
        {
          "imgs": imgs
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestMulticlassNamedArgs(
      myArg: NamedArgsSingleClass,myArg2: NamedArgsSingleClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestMulticlassNamedArgs",
        {
          "myArg": myArg,"myArg2": myArg2
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestOllama(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestOllama",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestOpenAILegacyProvider(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestOpenAILegacyProvider",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestOpenAIShorthand(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestOpenAIShorthand",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestRetryConstant(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestRetryConstant",
        {
          
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestRetryExponential(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestRetryExponential",
        {
          
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  TestVertex(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    try {
      const raw = this.runtime.streamFunction(
        "TestVertex",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<string>, string>(
        raw,
        (a): a is RecursivePartialNull<string> => a,
        (a): a is string => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
  UnionTest_Function(
      input: string | boolean,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<UnionTest_ReturnType>, UnionTest_ReturnType> {
    try {
      const raw = this.runtime.streamFunction(
        "UnionTest_Function",
        {
          "input": input
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<UnionTest_ReturnType>, UnionTest_ReturnType>(
        raw,
        (a): a is RecursivePartialNull<UnionTest_ReturnType> => a,
        (a): a is UnionTest_ReturnType => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  
}

export const b = new BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)