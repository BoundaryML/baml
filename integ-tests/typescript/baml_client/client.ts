/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install baml_ts
$ yarn add baml_ts
$ pnpm add baml_ts

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
/* eslint-disable */
import { BamlRuntimeFfi, FunctionResult } from "@boundaryml/baml"
import types from "./types"

export class BamlClient {
  private _runtime: BamlRuntimeFfi
  private _unstableClient: BamlUnstableClient

  static fromDirectory(path: string): BamlClient {
    return new BamlClient(BamlRuntimeFfi.fromDirectory(path))
  }

  constructor(private _runtime: BamlRuntimeFfi) {
    this._unstableClient = new UnstableBamlClient(this._runtime)
  }

  get unstable(): UnstableBamlClient { return this._unstableClient; }


  ClassifyMessage = async (args: {
    input: string,
  }): Category => {
    const raw = await this._runtime.callFunction("ClassifyMessage", args, {})
    return raw.parsed as Category
  }

  ClassifyMessage2 = async (args: {
    input: string,
  }): Category => {
    const raw = await this._runtime.callFunction("ClassifyMessage2", args, {})
    return raw.parsed as Category
  }

  ClassifyMessage3 = async (args: {
    input: string,
  }): Category => {
    const raw = await this._runtime.callFunction("ClassifyMessage3", args, {})
    return raw.parsed as Category
  }

  DescribeImage = async (args: {
    img: baml_ts.Image,
  }): string => {
    const raw = await this._runtime.callFunction("DescribeImage", args, {})
    return raw.parsed as string
  }

  DescribeImage2 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): string => {
    const raw = await this._runtime.callFunction("DescribeImage2", args, {})
    return raw.parsed as string
  }

  DescribeImage3 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): string => {
    const raw = await this._runtime.callFunction("DescribeImage3", args, {})
    return raw.parsed as string
  }

  DescribeImage4 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): string => {
    const raw = await this._runtime.callFunction("DescribeImage4", args, {})
    return raw.parsed as string
  }

  ExtractNames = async (args: {
    input: string,
  }): string[] => {
    const raw = await this._runtime.callFunction("ExtractNames", args, {})
    return raw.parsed as string[]
  }

  ExtractResume = async (args: {
    resume: string,
  }): Resume => {
    const raw = await this._runtime.callFunction("ExtractResume", args, {})
    return raw.parsed as Resume
  }

  ExtractResume2 = async (args: {
    resume: string,
  }): Resume => {
    const raw = await this._runtime.callFunction("ExtractResume2", args, {})
    return raw.parsed as Resume
  }

  FnClassOptionalOutput2_V2 = async (args: {
    input: string,
  }): ClassOptionalOutput2v2 | null => {
    const raw = await this._runtime.callFunction("FnClassOptionalOutput2_V2", args, {})
    return raw.parsed as ClassOptionalOutput2v2 | null
  }

  FnOutputClassWithEnum_V2 = async (args: {
    input: string,
  }): TestClassWithEnum2 => {
    const raw = await this._runtime.callFunction("FnOutputClassWithEnum_V2", args, {})
    return raw.parsed as TestClassWithEnum2
  }

  GetDataType = async (args: {
    text: string,
  }): RaysData => {
    const raw = await this._runtime.callFunction("GetDataType", args, {})
    return raw.parsed as RaysData
  }

  GetOrderInfo = async (args: {
    email: Email,
  }): OrderInfo => {
    const raw = await this._runtime.callFunction("GetOrderInfo", args, {})
    return raw.parsed as OrderInfo
  }

  GetQuery = async (args: {
    query: string,
  }): SearchParams => {
    const raw = await this._runtime.callFunction("GetQuery", args, {})
    return raw.parsed as SearchParams
  }

  OptionalTest_Function_V2 = async (args: {
    input: string,
  }): (OptionalTest_ReturnTypev2 | null)[] => {
    const raw = await this._runtime.callFunction("OptionalTest_Function_V2", args, {})
    return raw.parsed as (OptionalTest_ReturnTypev2 | null)[]
  }

  V2_FnClassOptional = async (args: {
    input: OptionalClassv2 | null,
  }): string => {
    const raw = await this._runtime.callFunction("V2_FnClassOptional", args, {})
    return raw.parsed as string
  }

  V2_FnClassOptional2 = async (args: {
    input: ClassOptionalFieldsv2,
  }): string => {
    const raw = await this._runtime.callFunction("V2_FnClassOptional2", args, {})
    return raw.parsed as string
  }

  V2_FnEnumListOutput = async (args: {
    input: string,
  }): EnumOutput[] => {
    const raw = await this._runtime.callFunction("V2_FnEnumListOutput", args, {})
    return raw.parsed as EnumOutput[]
  }

  V2_FnEnumOutput = async (args: {
    input: string,
  }): EnumOutput2 => {
    const raw = await this._runtime.callFunction("V2_FnEnumOutput", args, {})
    return raw.parsed as EnumOutput2
  }

  V2_FnNamedArgsSingleStringOptional = async (args: {
    myString: string | null,
  }): string => {
    const raw = await this._runtime.callFunction("V2_FnNamedArgsSingleStringOptional", args, {})
    return raw.parsed as string
  }

  V2_FnOutputBool = async (args: {
    input: string,
  }): boolean => {
    const raw = await this._runtime.callFunction("V2_FnOutputBool", args, {})
    return raw.parsed as boolean
  }

  V2_FnOutputClass = async (args: {
    input: string,
  }): TestOutputClass2 => {
    const raw = await this._runtime.callFunction("V2_FnOutputClass", args, {})
    return raw.parsed as TestOutputClass2
  }

  V2_FnOutputClassList = async (args: {
    input: string,
  }): TestOutputClass[] => {
    const raw = await this._runtime.callFunction("V2_FnOutputClassList", args, {})
    return raw.parsed as TestOutputClass[]
  }

  V2_FnOutputStringList = async (args: {
    input: string,
  }): string[] => {
    const raw = await this._runtime.callFunction("V2_FnOutputStringList", args, {})
    return raw.parsed as string[]
  }

  V2_FnStringOptional = async (args: {
    input: string | null,
  }): string => {
    const raw = await this._runtime.callFunction("V2_FnStringOptional", args, {})
    return raw.parsed as string
  }

  V2_FnTestNamedArgsSingleEnum = async (args: {
    myArg: NamedArgsSingleEnum2,
  }): string => {
    const raw = await this._runtime.callFunction("V2_FnTestNamedArgsSingleEnum", args, {})
    return raw.parsed as string
  }

  V2_TestFnNamedArgsSingleBool = async (args: {
    myBool: boolean,
  }): string => {
    const raw = await this._runtime.callFunction("V2_TestFnNamedArgsSingleBool", args, {})
    return raw.parsed as string
  }

  V2_TestFnNamedArgsSingleClass = async (args: {
    myArg: NamedArgsSingleClass2,
  }): string => {
    const raw = await this._runtime.callFunction("V2_TestFnNamedArgsSingleClass", args, {})
    return raw.parsed as string
  }

  V2_TestFnNamedArgsSingleEnumList = async (args: {
    myArg: NamedArgsSingleEnumList2[],
  }): string => {
    const raw = await this._runtime.callFunction("V2_TestFnNamedArgsSingleEnumList", args, {})
    return raw.parsed as string
  }

  V2_TestFnNamedArgsSingleFloat = async (args: {
    myFloat: number,
  }): string => {
    const raw = await this._runtime.callFunction("V2_TestFnNamedArgsSingleFloat", args, {})
    return raw.parsed as string
  }

  V2_TestFnNamedArgsSingleInt = async (args: {
    myInt: number,
  }): string => {
    const raw = await this._runtime.callFunction("V2_TestFnNamedArgsSingleInt", args, {})
    return raw.parsed as string
  }

  V2_TestFnNamedArgsSingleString = async (args: {
    myString: string,
  }): string => {
    const raw = await this._runtime.callFunction("V2_TestFnNamedArgsSingleString", args, {})
    return raw.parsed as string
  }

  V2_TestFnNamedArgsSingleStringArray = async (args: {
    myStringArray: string[],
  }): string => {
    const raw = await this._runtime.callFunction("V2_TestFnNamedArgsSingleStringArray", args, {})
    return raw.parsed as string
  }

  V2_TestFnNamedArgsSingleStringList = async (args: {
    myArg: NamedArgsSingleClassList2[],
  }): string => {
    const raw = await this._runtime.callFunction("V2_TestFnNamedArgsSingleStringList", args, {})
    return raw.parsed as string
  }

  V2_TestFnNamedArgsSyntax = async (args: {
    var: string,
    var_with_underscores: string,
  }): string => {
    const raw = await this._runtime.callFunction("V2_TestFnNamedArgsSyntax", args, {})
    return raw.parsed as string
  }

  V2_UnionTest_Function = async (args: {
    input: string | boolean,
  }): UnionTest_ReturnTypev2 | DataType => {
    const raw = await this._runtime.callFunction("V2_UnionTest_Function", args, {})
    return raw.parsed as UnionTest_ReturnTypev2 | DataType
  }

}

export class UnstableBamlClient {
  constructor(private _runtime: BamlRuntimeFfi) {}


  ClassifyMessage = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("ClassifyMessage", args, {})
  }

  ClassifyMessage2 = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("ClassifyMessage2", args, {})
  }

  ClassifyMessage3 = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("ClassifyMessage3", args, {})
  }

  DescribeImage = async (args: {
    img: baml_ts.Image,
  }): FunctionResult => {
    return this._runtime.callFunction("DescribeImage", args, {})
  }

  DescribeImage2 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): FunctionResult => {
    return this._runtime.callFunction("DescribeImage2", args, {})
  }

  DescribeImage3 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): FunctionResult => {
    return this._runtime.callFunction("DescribeImage3", args, {})
  }

  DescribeImage4 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): FunctionResult => {
    return this._runtime.callFunction("DescribeImage4", args, {})
  }

  ExtractNames = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("ExtractNames", args, {})
  }

  ExtractResume = async (args: {
    resume: string,
  }): FunctionResult => {
    return this._runtime.callFunction("ExtractResume", args, {})
  }

  ExtractResume2 = async (args: {
    resume: string,
  }): FunctionResult => {
    return this._runtime.callFunction("ExtractResume2", args, {})
  }

  FnClassOptionalOutput2_V2 = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("FnClassOptionalOutput2_V2", args, {})
  }

  FnOutputClassWithEnum_V2 = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("FnOutputClassWithEnum_V2", args, {})
  }

  GetDataType = async (args: {
    text: string,
  }): FunctionResult => {
    return this._runtime.callFunction("GetDataType", args, {})
  }

  GetOrderInfo = async (args: {
    email: Email,
  }): FunctionResult => {
    return this._runtime.callFunction("GetOrderInfo", args, {})
  }

  GetQuery = async (args: {
    query: string,
  }): FunctionResult => {
    return this._runtime.callFunction("GetQuery", args, {})
  }

  OptionalTest_Function_V2 = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("OptionalTest_Function_V2", args, {})
  }

  V2_FnClassOptional = async (args: {
    input: OptionalClassv2 | null,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_FnClassOptional", args, {})
  }

  V2_FnClassOptional2 = async (args: {
    input: ClassOptionalFieldsv2,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_FnClassOptional2", args, {})
  }

  V2_FnEnumListOutput = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_FnEnumListOutput", args, {})
  }

  V2_FnEnumOutput = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_FnEnumOutput", args, {})
  }

  V2_FnNamedArgsSingleStringOptional = async (args: {
    myString: string | null,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_FnNamedArgsSingleStringOptional", args, {})
  }

  V2_FnOutputBool = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_FnOutputBool", args, {})
  }

  V2_FnOutputClass = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_FnOutputClass", args, {})
  }

  V2_FnOutputClassList = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_FnOutputClassList", args, {})
  }

  V2_FnOutputStringList = async (args: {
    input: string,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_FnOutputStringList", args, {})
  }

  V2_FnStringOptional = async (args: {
    input: string | null,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_FnStringOptional", args, {})
  }

  V2_FnTestNamedArgsSingleEnum = async (args: {
    myArg: NamedArgsSingleEnum2,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_FnTestNamedArgsSingleEnum", args, {})
  }

  V2_TestFnNamedArgsSingleBool = async (args: {
    myBool: boolean,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_TestFnNamedArgsSingleBool", args, {})
  }

  V2_TestFnNamedArgsSingleClass = async (args: {
    myArg: NamedArgsSingleClass2,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_TestFnNamedArgsSingleClass", args, {})
  }

  V2_TestFnNamedArgsSingleEnumList = async (args: {
    myArg: NamedArgsSingleEnumList2[],
  }): FunctionResult => {
    return this._runtime.callFunction("V2_TestFnNamedArgsSingleEnumList", args, {})
  }

  V2_TestFnNamedArgsSingleFloat = async (args: {
    myFloat: number,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_TestFnNamedArgsSingleFloat", args, {})
  }

  V2_TestFnNamedArgsSingleInt = async (args: {
    myInt: number,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_TestFnNamedArgsSingleInt", args, {})
  }

  V2_TestFnNamedArgsSingleString = async (args: {
    myString: string,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_TestFnNamedArgsSingleString", args, {})
  }

  V2_TestFnNamedArgsSingleStringArray = async (args: {
    myStringArray: string[],
  }): FunctionResult => {
    return this._runtime.callFunction("V2_TestFnNamedArgsSingleStringArray", args, {})
  }

  V2_TestFnNamedArgsSingleStringList = async (args: {
    myArg: NamedArgsSingleClassList2[],
  }): FunctionResult => {
    return this._runtime.callFunction("V2_TestFnNamedArgsSingleStringList", args, {})
  }

  V2_TestFnNamedArgsSyntax = async (args: {
    var: string,
    var_with_underscores: string,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_TestFnNamedArgsSyntax", args, {})
  }

  V2_UnionTest_Function = async (args: {
    input: string | boolean,
  }): FunctionResult => {
    return this._runtime.callFunction("V2_UnionTest_Function", args, {})
  }

}

