/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
/* eslint-disable */
import { BamlRuntime, FunctionResult, BamlCtxManager, BamlStream, Image, ClientBuilder } from "@boundaryml/baml"
import {Blah, ClassOptionalOutput, ClassOptionalOutput2, ClassWithImage, DummyOutput, DynInputOutput, DynamicClassOne, DynamicClassTwo, DynamicOutput, Education, Email, Event, FakeImage, InnerClass, InnerClass2, NamedArgsSingleClass, OptionalTest_Prop1, OptionalTest_ReturnType, OrderInfo, Person, RaysData, ReceiptInfo, ReceiptItem, Resume, SearchParams, SomeClassNestedDynamic, TestClassAlias, TestClassNested, TestClassWithEnum, TestOutputClass, UnionTest_ReturnType, WithReasoning, Category, Category2, Category3, Color, DataType, DynEnumOne, DynEnumTwo, EnumInClass, EnumOutput, Hobby, NamedArgsSingleEnum, NamedArgsSingleEnumList, OptionalTest_CategoryType, OrderStatus, Tag, TestEnum} from "./types"
import TypeBuilder from "./type_builder"

export type RecursivePartialNull<T> = T extends object
  ? {
      [P in keyof T]?: RecursivePartialNull<T[P]>;
    }
  : T | null;

export class BamlClient {
  private runtime: BamlRuntime
  private ctx_manager: BamlCtxManager
  private stream_client: BamlStreamClient

  constructor(runtime: BamlRuntime, ctx_manager: BamlCtxManager) {
    this.runtime = runtime
    this.ctx_manager = ctx_manager
    this.stream_client = new BamlStreamClient(runtime, ctx_manager)
  }

  get stream() {
    return this.stream_client
  }  

  
  async AudioInput(
      aud: Audio,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "AudioInput",
      {
        "aud": aud
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async ClassifyMessage(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Category> {
    const raw = await this.runtime.callFunction(
      "ClassifyMessage",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as Category
  }
  
  async ClassifyMessage2(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Category> {
    const raw = await this.runtime.callFunction(
      "ClassifyMessage2",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as Category
  }
  
  async ClassifyMessage3(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Category> {
    const raw = await this.runtime.callFunction(
      "ClassifyMessage3",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as Category
  }
  
  async DescribeImage(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "DescribeImage",
      {
        "img": img
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async DescribeImage2(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "DescribeImage2",
      {
        "classWithImage": classWithImage,"img2": img2
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async DescribeImage3(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "DescribeImage3",
      {
        "classWithImage": classWithImage,"img2": img2
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async DescribeImage4(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "DescribeImage4",
      {
        "classWithImage": classWithImage,"img2": img2
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async DummyOutputFunction(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<DummyOutput> {
    const raw = await this.runtime.callFunction(
      "DummyOutputFunction",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as DummyOutput
  }
  
  async DynamicFunc(
      input: DynamicClassOne,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<DynamicClassTwo> {
    const raw = await this.runtime.callFunction(
      "DynamicFunc",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as DynamicClassTwo
  }
  
  async DynamicInputOutput(
      input: DynInputOutput,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<DynInputOutput> {
    const raw = await this.runtime.callFunction(
      "DynamicInputOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as DynInputOutput
  }
  
  async DynamicListInputOutput(
      input: DynInputOutput[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<DynInputOutput[]> {
    const raw = await this.runtime.callFunction(
      "DynamicListInputOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as DynInputOutput[]
  }
  
  async ExtractNames(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string[]> {
    const raw = await this.runtime.callFunction(
      "ExtractNames",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string[]
  }
  
  async ExtractPeople(
      text: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Person[]> {
    const raw = await this.runtime.callFunction(
      "ExtractPeople",
      {
        "text": text
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as Person[]
  }
  
  async ExtractReceiptInfo(
      email: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<ReceiptInfo> {
    const raw = await this.runtime.callFunction(
      "ExtractReceiptInfo",
      {
        "email": email
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as ReceiptInfo
  }
  
  async ExtractResume(
      resume: string,img?: Image | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Resume> {
    const raw = await this.runtime.callFunction(
      "ExtractResume",
      {
        "resume": resume,"img": img?? null
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as Resume
  }
  
  async ExtractResume2(
      resume: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<Resume> {
    const raw = await this.runtime.callFunction(
      "ExtractResume2",
      {
        "resume": resume
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as Resume
  }
  
  async FnClassOptionalOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<ClassOptionalOutput | null> {
    const raw = await this.runtime.callFunction(
      "FnClassOptionalOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as ClassOptionalOutput | null
  }
  
  async FnClassOptionalOutput2(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<ClassOptionalOutput2 | null> {
    const raw = await this.runtime.callFunction(
      "FnClassOptionalOutput2",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as ClassOptionalOutput2 | null
  }
  
  async FnEnumListOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<EnumOutput[]> {
    const raw = await this.runtime.callFunction(
      "FnEnumListOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as EnumOutput[]
  }
  
  async FnEnumOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<EnumOutput> {
    const raw = await this.runtime.callFunction(
      "FnEnumOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as EnumOutput
  }
  
  async FnNamedArgsSingleStringOptional(
      myString?: string | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "FnNamedArgsSingleStringOptional",
      {
        "myString": myString?? null
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async FnOutputBool(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<boolean> {
    const raw = await this.runtime.callFunction(
      "FnOutputBool",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as boolean
  }
  
  async FnOutputClass(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestOutputClass> {
    const raw = await this.runtime.callFunction(
      "FnOutputClass",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as TestOutputClass
  }
  
  async FnOutputClassList(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestOutputClass[]> {
    const raw = await this.runtime.callFunction(
      "FnOutputClassList",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as TestOutputClass[]
  }
  
  async FnOutputClassNested(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestClassNested> {
    const raw = await this.runtime.callFunction(
      "FnOutputClassNested",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as TestClassNested
  }
  
  async FnOutputClassWithEnum(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestClassWithEnum> {
    const raw = await this.runtime.callFunction(
      "FnOutputClassWithEnum",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as TestClassWithEnum
  }
  
  async FnOutputStringList(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string[]> {
    const raw = await this.runtime.callFunction(
      "FnOutputStringList",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string[]
  }
  
  async FnTestAliasedEnumOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestEnum> {
    const raw = await this.runtime.callFunction(
      "FnTestAliasedEnumOutput",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as TestEnum
  }
  
  async FnTestClassAlias(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<TestClassAlias> {
    const raw = await this.runtime.callFunction(
      "FnTestClassAlias",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as TestClassAlias
  }
  
  async FnTestNamedArgsSingleEnum(
      myArg: NamedArgsSingleEnum,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "FnTestNamedArgsSingleEnum",
      {
        "myArg": myArg
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async GetDataType(
      text: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<RaysData> {
    const raw = await this.runtime.callFunction(
      "GetDataType",
      {
        "text": text
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as RaysData
  }
  
  async GetOrderInfo(
      email: Email,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<OrderInfo> {
    const raw = await this.runtime.callFunction(
      "GetOrderInfo",
      {
        "email": email
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as OrderInfo
  }
  
  async GetQuery(
      query: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<SearchParams> {
    const raw = await this.runtime.callFunction(
      "GetQuery",
      {
        "query": query
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as SearchParams
  }
  
  async MyFunc(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<DynamicOutput> {
    const raw = await this.runtime.callFunction(
      "MyFunc",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as DynamicOutput
  }
  
  async OptionalTest_Function(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<(OptionalTest_ReturnType | null)[]> {
    const raw = await this.runtime.callFunction(
      "OptionalTest_Function",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as (OptionalTest_ReturnType | null)[]
  }
  
  async PromptTestClaude(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "PromptTestClaude",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async PromptTestClaudeChat(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "PromptTestClaudeChat",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async PromptTestClaudeChatNoSystem(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "PromptTestClaudeChatNoSystem",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async PromptTestOpenAIChat(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "PromptTestOpenAIChat",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async PromptTestOpenAIChatNoSystem(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "PromptTestOpenAIChatNoSystem",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async PromptTestStreaming(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "PromptTestStreaming",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestAnthropic(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestAnthropic",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestAws(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestAws",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestAzure(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestAzure",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestFallbackClient(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestFallbackClient",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestFnNamedArgsSingleBool(
      myBool: boolean,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestFnNamedArgsSingleBool",
      {
        "myBool": myBool
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestFnNamedArgsSingleClass(
      myArg: NamedArgsSingleClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestFnNamedArgsSingleClass",
      {
        "myArg": myArg
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestFnNamedArgsSingleEnumList(
      myArg: NamedArgsSingleEnumList[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestFnNamedArgsSingleEnumList",
      {
        "myArg": myArg
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestFnNamedArgsSingleFloat(
      myFloat: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestFnNamedArgsSingleFloat",
      {
        "myFloat": myFloat
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestFnNamedArgsSingleInt(
      myInt: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestFnNamedArgsSingleInt",
      {
        "myInt": myInt
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestFnNamedArgsSingleString(
      myString: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestFnNamedArgsSingleString",
      {
        "myString": myString
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestFnNamedArgsSingleStringArray(
      myStringArray: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestFnNamedArgsSingleStringArray",
      {
        "myStringArray": myStringArray
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestFnNamedArgsSingleStringList(
      myArg: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestFnNamedArgsSingleStringList",
      {
        "myArg": myArg
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestGemini(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestGemini",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestImageInput(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestImageInput",
      {
        "img": img
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestMulticlassNamedArgs(
      myArg: NamedArgsSingleClass,myArg2: NamedArgsSingleClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestMulticlassNamedArgs",
      {
        "myArg": myArg,"myArg2": myArg2
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestOllama(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestOllama",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestOpenAI(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestOpenAI",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestOpenAILegacyProvider(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestOpenAILegacyProvider",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestRetryConstant(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestRetryConstant",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestRetryExponential(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestRetryExponential",
      {
        
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async TestVertex(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<string> {
    const raw = await this.runtime.callFunction(
      "TestVertex",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as string
  }
  
  async UnionTest_Function(
      input: string | boolean,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<UnionTest_ReturnType> {
    const raw = await this.runtime.callFunction(
      "UnionTest_Function",
      {
        "input": input
      },
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return raw.parsed() as UnionTest_ReturnType
  }
  
}

class BamlStreamClient {
  constructor(private runtime: BamlRuntime, private ctx_manager: BamlCtxManager) {}

  
  AudioInput(
      aud: Audio,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "AudioInput",
      {
        "aud": aud
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  ClassifyMessage(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Category>, Category> {
    const raw = this.runtime.streamFunction(
      "ClassifyMessage",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<Category>, Category>(
      raw,
      (a): a is RecursivePartialNull<Category> => a,
      (a): a is Category => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  ClassifyMessage2(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Category>, Category> {
    const raw = this.runtime.streamFunction(
      "ClassifyMessage2",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<Category>, Category>(
      raw,
      (a): a is RecursivePartialNull<Category> => a,
      (a): a is Category => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  ClassifyMessage3(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Category>, Category> {
    const raw = this.runtime.streamFunction(
      "ClassifyMessage3",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<Category>, Category>(
      raw,
      (a): a is RecursivePartialNull<Category> => a,
      (a): a is Category => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  DescribeImage(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "DescribeImage",
      {
        "img": img
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  DescribeImage2(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "DescribeImage2",
      {
        "classWithImage": classWithImage,"img2": img2
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  DescribeImage3(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "DescribeImage3",
      {
        "classWithImage": classWithImage,"img2": img2
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  DescribeImage4(
      classWithImage: ClassWithImage,img2: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "DescribeImage4",
      {
        "classWithImage": classWithImage,"img2": img2
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  DummyOutputFunction(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<DummyOutput>, DummyOutput> {
    const raw = this.runtime.streamFunction(
      "DummyOutputFunction",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<DummyOutput>, DummyOutput>(
      raw,
      (a): a is RecursivePartialNull<DummyOutput> => a,
      (a): a is DummyOutput => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  DynamicFunc(
      input: DynamicClassOne,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<DynamicClassTwo>, DynamicClassTwo> {
    const raw = this.runtime.streamFunction(
      "DynamicFunc",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<DynamicClassTwo>, DynamicClassTwo>(
      raw,
      (a): a is RecursivePartialNull<DynamicClassTwo> => a,
      (a): a is DynamicClassTwo => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  DynamicInputOutput(
      input: DynInputOutput,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<DynInputOutput>, DynInputOutput> {
    const raw = this.runtime.streamFunction(
      "DynamicInputOutput",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<DynInputOutput>, DynInputOutput>(
      raw,
      (a): a is RecursivePartialNull<DynInputOutput> => a,
      (a): a is DynInputOutput => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  DynamicListInputOutput(
      input: DynInputOutput[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<DynInputOutput[]>, DynInputOutput[]> {
    const raw = this.runtime.streamFunction(
      "DynamicListInputOutput",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<DynInputOutput[]>, DynInputOutput[]>(
      raw,
      (a): a is RecursivePartialNull<DynInputOutput[]> => a,
      (a): a is DynInputOutput[] => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  ExtractNames(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string[]>, string[]> {
    const raw = this.runtime.streamFunction(
      "ExtractNames",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string[]>, string[]>(
      raw,
      (a): a is RecursivePartialNull<string[]> => a,
      (a): a is string[] => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  ExtractPeople(
      text: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Person[]>, Person[]> {
    const raw = this.runtime.streamFunction(
      "ExtractPeople",
      {
        "text": text
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<Person[]>, Person[]>(
      raw,
      (a): a is RecursivePartialNull<Person[]> => a,
      (a): a is Person[] => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  ExtractReceiptInfo(
      email: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<ReceiptInfo>, ReceiptInfo> {
    const raw = this.runtime.streamFunction(
      "ExtractReceiptInfo",
      {
        "email": email
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<ReceiptInfo>, ReceiptInfo>(
      raw,
      (a): a is RecursivePartialNull<ReceiptInfo> => a,
      (a): a is ReceiptInfo => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  ExtractResume(
      resume: string,img?: Image | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Resume>, Resume> {
    const raw = this.runtime.streamFunction(
      "ExtractResume",
      {
        "resume": resume,"img": img ?? null
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<Resume>, Resume>(
      raw,
      (a): a is RecursivePartialNull<Resume> => a,
      (a): a is Resume => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  ExtractResume2(
      resume: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<Resume>, Resume> {
    const raw = this.runtime.streamFunction(
      "ExtractResume2",
      {
        "resume": resume
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<Resume>, Resume>(
      raw,
      (a): a is RecursivePartialNull<Resume> => a,
      (a): a is Resume => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnClassOptionalOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<ClassOptionalOutput | null>, ClassOptionalOutput | null> {
    const raw = this.runtime.streamFunction(
      "FnClassOptionalOutput",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<ClassOptionalOutput | null>, ClassOptionalOutput | null>(
      raw,
      (a): a is RecursivePartialNull<ClassOptionalOutput | null> => a,
      (a): a is ClassOptionalOutput | null => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnClassOptionalOutput2(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<ClassOptionalOutput2 | null>, ClassOptionalOutput2 | null> {
    const raw = this.runtime.streamFunction(
      "FnClassOptionalOutput2",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<ClassOptionalOutput2 | null>, ClassOptionalOutput2 | null>(
      raw,
      (a): a is RecursivePartialNull<ClassOptionalOutput2 | null> => a,
      (a): a is ClassOptionalOutput2 | null => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnEnumListOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<EnumOutput[]>, EnumOutput[]> {
    const raw = this.runtime.streamFunction(
      "FnEnumListOutput",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<EnumOutput[]>, EnumOutput[]>(
      raw,
      (a): a is RecursivePartialNull<EnumOutput[]> => a,
      (a): a is EnumOutput[] => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnEnumOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<EnumOutput>, EnumOutput> {
    const raw = this.runtime.streamFunction(
      "FnEnumOutput",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<EnumOutput>, EnumOutput>(
      raw,
      (a): a is RecursivePartialNull<EnumOutput> => a,
      (a): a is EnumOutput => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnNamedArgsSingleStringOptional(
      myString?: string | null,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "FnNamedArgsSingleStringOptional",
      {
        "myString": myString ?? null
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnOutputBool(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<boolean>, boolean> {
    const raw = this.runtime.streamFunction(
      "FnOutputBool",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<boolean>, boolean>(
      raw,
      (a): a is RecursivePartialNull<boolean> => a,
      (a): a is boolean => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnOutputClass(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestOutputClass>, TestOutputClass> {
    const raw = this.runtime.streamFunction(
      "FnOutputClass",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<TestOutputClass>, TestOutputClass>(
      raw,
      (a): a is RecursivePartialNull<TestOutputClass> => a,
      (a): a is TestOutputClass => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnOutputClassList(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestOutputClass[]>, TestOutputClass[]> {
    const raw = this.runtime.streamFunction(
      "FnOutputClassList",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<TestOutputClass[]>, TestOutputClass[]>(
      raw,
      (a): a is RecursivePartialNull<TestOutputClass[]> => a,
      (a): a is TestOutputClass[] => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnOutputClassNested(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestClassNested>, TestClassNested> {
    const raw = this.runtime.streamFunction(
      "FnOutputClassNested",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<TestClassNested>, TestClassNested>(
      raw,
      (a): a is RecursivePartialNull<TestClassNested> => a,
      (a): a is TestClassNested => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnOutputClassWithEnum(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestClassWithEnum>, TestClassWithEnum> {
    const raw = this.runtime.streamFunction(
      "FnOutputClassWithEnum",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<TestClassWithEnum>, TestClassWithEnum>(
      raw,
      (a): a is RecursivePartialNull<TestClassWithEnum> => a,
      (a): a is TestClassWithEnum => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnOutputStringList(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string[]>, string[]> {
    const raw = this.runtime.streamFunction(
      "FnOutputStringList",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string[]>, string[]>(
      raw,
      (a): a is RecursivePartialNull<string[]> => a,
      (a): a is string[] => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnTestAliasedEnumOutput(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestEnum>, TestEnum> {
    const raw = this.runtime.streamFunction(
      "FnTestAliasedEnumOutput",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<TestEnum>, TestEnum>(
      raw,
      (a): a is RecursivePartialNull<TestEnum> => a,
      (a): a is TestEnum => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnTestClassAlias(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<TestClassAlias>, TestClassAlias> {
    const raw = this.runtime.streamFunction(
      "FnTestClassAlias",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<TestClassAlias>, TestClassAlias>(
      raw,
      (a): a is RecursivePartialNull<TestClassAlias> => a,
      (a): a is TestClassAlias => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  FnTestNamedArgsSingleEnum(
      myArg: NamedArgsSingleEnum,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "FnTestNamedArgsSingleEnum",
      {
        "myArg": myArg
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  GetDataType(
      text: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<RaysData>, RaysData> {
    const raw = this.runtime.streamFunction(
      "GetDataType",
      {
        "text": text
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<RaysData>, RaysData>(
      raw,
      (a): a is RecursivePartialNull<RaysData> => a,
      (a): a is RaysData => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  GetOrderInfo(
      email: Email,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<OrderInfo>, OrderInfo> {
    const raw = this.runtime.streamFunction(
      "GetOrderInfo",
      {
        "email": email
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<OrderInfo>, OrderInfo>(
      raw,
      (a): a is RecursivePartialNull<OrderInfo> => a,
      (a): a is OrderInfo => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  GetQuery(
      query: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<SearchParams>, SearchParams> {
    const raw = this.runtime.streamFunction(
      "GetQuery",
      {
        "query": query
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<SearchParams>, SearchParams>(
      raw,
      (a): a is RecursivePartialNull<SearchParams> => a,
      (a): a is SearchParams => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  MyFunc(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<DynamicOutput>, DynamicOutput> {
    const raw = this.runtime.streamFunction(
      "MyFunc",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<DynamicOutput>, DynamicOutput>(
      raw,
      (a): a is RecursivePartialNull<DynamicOutput> => a,
      (a): a is DynamicOutput => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  OptionalTest_Function(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<(OptionalTest_ReturnType | null)[]>, (OptionalTest_ReturnType | null)[]> {
    const raw = this.runtime.streamFunction(
      "OptionalTest_Function",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<(OptionalTest_ReturnType | null)[]>, (OptionalTest_ReturnType | null)[]>(
      raw,
      (a): a is RecursivePartialNull<(OptionalTest_ReturnType | null)[]> => a,
      (a): a is (OptionalTest_ReturnType | null)[] => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  PromptTestClaude(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "PromptTestClaude",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  PromptTestClaudeChat(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "PromptTestClaudeChat",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  PromptTestClaudeChatNoSystem(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "PromptTestClaudeChatNoSystem",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  PromptTestOpenAIChat(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "PromptTestOpenAIChat",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  PromptTestOpenAIChatNoSystem(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "PromptTestOpenAIChatNoSystem",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  PromptTestStreaming(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "PromptTestStreaming",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestAnthropic(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestAnthropic",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestAws(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestAws",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestAzure(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestAzure",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestFallbackClient(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestFallbackClient",
      {
        
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestFnNamedArgsSingleBool(
      myBool: boolean,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestFnNamedArgsSingleBool",
      {
        "myBool": myBool
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestFnNamedArgsSingleClass(
      myArg: NamedArgsSingleClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestFnNamedArgsSingleClass",
      {
        "myArg": myArg
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestFnNamedArgsSingleEnumList(
      myArg: NamedArgsSingleEnumList[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestFnNamedArgsSingleEnumList",
      {
        "myArg": myArg
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestFnNamedArgsSingleFloat(
      myFloat: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestFnNamedArgsSingleFloat",
      {
        "myFloat": myFloat
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestFnNamedArgsSingleInt(
      myInt: number,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestFnNamedArgsSingleInt",
      {
        "myInt": myInt
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestFnNamedArgsSingleString(
      myString: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestFnNamedArgsSingleString",
      {
        "myString": myString
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestFnNamedArgsSingleStringArray(
      myStringArray: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestFnNamedArgsSingleStringArray",
      {
        "myStringArray": myStringArray
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestFnNamedArgsSingleStringList(
      myArg: string[],
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestFnNamedArgsSingleStringList",
      {
        "myArg": myArg
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestGemini(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestGemini",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestImageInput(
      img: Image,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestImageInput",
      {
        "img": img
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestMulticlassNamedArgs(
      myArg: NamedArgsSingleClass,myArg2: NamedArgsSingleClass,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestMulticlassNamedArgs",
      {
        "myArg": myArg,"myArg2": myArg2
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestOllama(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestOllama",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestOpenAI(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestOpenAI",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestOpenAILegacyProvider(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestOpenAILegacyProvider",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestRetryConstant(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestRetryConstant",
      {
        
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestRetryExponential(
      
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestRetryExponential",
      {
        
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  TestVertex(
      input: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<string>, string> {
    const raw = this.runtime.streamFunction(
      "TestVertex",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<string>, string>(
      raw,
      (a): a is RecursivePartialNull<string> => a,
      (a): a is string => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
  UnionTest_Function(
      input: string | boolean,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<UnionTest_ReturnType>, UnionTest_ReturnType> {
    const raw = this.runtime.streamFunction(
      "UnionTest_Function",
      {
        "input": input
      },
      undefined,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.cr,
    )
    return new BamlStream<RecursivePartialNull<UnionTest_ReturnType>, UnionTest_ReturnType>(
      raw,
      (a): a is RecursivePartialNull<UnionTest_ReturnType> => a,
      (a): a is UnionTest_ReturnType => a,
      this.ctx_manager.cloneContext(),
      __baml_options__?.tb?.__tb(),
    )
  }
  
}