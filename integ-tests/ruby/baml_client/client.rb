###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ bundle add baml sorbet-runtime sorbet-struct-comparable
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# frozen_string_literal: true
# rubocop: disable
# formatter:off
# typed: false
require "baml"
require "sorbet-runtime"

require_relative "inlined"
require_relative "partial-types"
require_relative "types"

module Baml
  @instance = nil

  def self.Client
    if @instance.nil?
      @instance = BamlClient.new(runtime: Baml::Ffi::BamlRuntime.from_files("baml_src", Baml::Inlined::FILE_MAP, ENV))
    end
  
    @instance
  end

  class BamlClient
    extend T::Sig

    sig { returns(BamlStreamClient) }
    attr_reader :stream

    sig {params(runtime: Baml::Ffi::BamlRuntime).void}
    def initialize(runtime:)
      @runtime = runtime
      @ctx_manager = runtime.create_context_manager()
      @stream = BamlStreamClient.new(runtime: @runtime, ctx_manager: @ctx_manager)
    end

    sig {params(path: String).returns(BamlClient)}
    def self.from_directory(path)
      BamlClient.new(runtime: Baml::Ffi::BamlRuntime.from_directory(path, ENV))
    end

    sig {
      
      params(
        input: String,
      ).returns(Baml::Types::Category)
      
    }
    def ClassifyMessage(
        input:
    )
      raw = @runtime.call_function(
        "ClassifyMessage",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(Baml::Types::Category)
      
    }
    def ClassifyMessage2(
        input:
    )
      raw = @runtime.call_function(
        "ClassifyMessage2",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(Baml::Types::Category)
      
    }
    def ClassifyMessage3(
        input:
    )
      raw = @runtime.call_function(
        "ClassifyMessage3",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        img: Baml::Image,
      ).returns(String)
      
    }
    def DescribeImage(
        img:
    )
      raw = @runtime.call_function(
        "DescribeImage",
        {
          "img" => img,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        classWithImage: Baml::Types::ClassWithImage,img2: Baml::Image,
      ).returns(String)
      
    }
    def DescribeImage2(
        classWithImage:,img2:
    )
      raw = @runtime.call_function(
        "DescribeImage2",
        {
          "classWithImage" => classWithImage,"img2" => img2,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        classWithImage: Baml::Types::ClassWithImage,img2: Baml::Image,
      ).returns(String)
      
    }
    def DescribeImage3(
        classWithImage:,img2:
    )
      raw = @runtime.call_function(
        "DescribeImage3",
        {
          "classWithImage" => classWithImage,"img2" => img2,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        classWithImage: Baml::Types::ClassWithImage,img2: Baml::Image,
      ).returns(String)
      
    }
    def DescribeImage4(
        classWithImage:,img2:
    )
      raw = @runtime.call_function(
        "DescribeImage4",
        {
          "classWithImage" => classWithImage,"img2" => img2,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: Baml::Types::DynamicClassOne,
      ).returns(Baml::Types::DynamicClassTwo)
      
    }
    def DynamicFunc(
        input:
    )
      raw = @runtime.call_function(
        "DynamicFunc",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(T::Array[String])
      
    }
    def ExtractNames(
        input:
    )
      raw = @runtime.call_function(
        "ExtractNames",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        text: String,
      ).returns(T::Array[Baml::Types::Person])
      
    }
    def ExtractPeople(
        text:
    )
      raw = @runtime.call_function(
        "ExtractPeople",
        {
          "text" => text,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        resume: String,img: T.nilable(Baml::Image),
      ).returns(Baml::Types::Resume)
      
    }
    def ExtractResume(
        resume:,img:
    )
      raw = @runtime.call_function(
        "ExtractResume",
        {
          "resume" => resume,"img" => img,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        resume: String,
      ).returns(Baml::Types::Resume)
      
    }
    def ExtractResume2(
        resume:
    )
      raw = @runtime.call_function(
        "ExtractResume2",
        {
          "resume" => resume,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(T.nilable(Baml::Types::ClassOptionalOutput))
      
    }
    def FnClassOptionalOutput(
        input:
    )
      raw = @runtime.call_function(
        "FnClassOptionalOutput",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(T.nilable(Baml::Types::ClassOptionalOutput2))
      
    }
    def FnClassOptionalOutput2(
        input:
    )
      raw = @runtime.call_function(
        "FnClassOptionalOutput2",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(T::Array[Baml::Types::EnumOutput])
      
    }
    def FnEnumListOutput(
        input:
    )
      raw = @runtime.call_function(
        "FnEnumListOutput",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(Baml::Types::EnumOutput)
      
    }
    def FnEnumOutput(
        input:
    )
      raw = @runtime.call_function(
        "FnEnumOutput",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        myString: T.nilable(String),
      ).returns(String)
      
    }
    def FnNamedArgsSingleStringOptional(
        myString:
    )
      raw = @runtime.call_function(
        "FnNamedArgsSingleStringOptional",
        {
          "myString" => myString,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(T::Boolean)
      
    }
    def FnOutputBool(
        input:
    )
      raw = @runtime.call_function(
        "FnOutputBool",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(Baml::Types::TestOutputClass)
      
    }
    def FnOutputClass(
        input:
    )
      raw = @runtime.call_function(
        "FnOutputClass",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(T::Array[Baml::Types::TestOutputClass])
      
    }
    def FnOutputClassList(
        input:
    )
      raw = @runtime.call_function(
        "FnOutputClassList",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(Baml::Types::TestClassNested)
      
    }
    def FnOutputClassNested(
        input:
    )
      raw = @runtime.call_function(
        "FnOutputClassNested",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(Baml::Types::TestClassWithEnum)
      
    }
    def FnOutputClassWithEnum(
        input:
    )
      raw = @runtime.call_function(
        "FnOutputClassWithEnum",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(T::Array[String])
      
    }
    def FnOutputStringList(
        input:
    )
      raw = @runtime.call_function(
        "FnOutputStringList",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(Baml::Types::TestEnum)
      
    }
    def FnTestAliasedEnumOutput(
        input:
    )
      raw = @runtime.call_function(
        "FnTestAliasedEnumOutput",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(Baml::Types::TestClassAlias)
      
    }
    def FnTestClassAlias(
        input:
    )
      raw = @runtime.call_function(
        "FnTestClassAlias",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        myArg: Baml::Types::NamedArgsSingleEnum,
      ).returns(String)
      
    }
    def FnTestNamedArgsSingleEnum(
        myArg:
    )
      raw = @runtime.call_function(
        "FnTestNamedArgsSingleEnum",
        {
          "myArg" => myArg,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        text: String,
      ).returns(Baml::Types::RaysData)
      
    }
    def GetDataType(
        text:
    )
      raw = @runtime.call_function(
        "GetDataType",
        {
          "text" => text,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        email: Baml::Types::Email,
      ).returns(Baml::Types::OrderInfo)
      
    }
    def GetOrderInfo(
        email:
    )
      raw = @runtime.call_function(
        "GetOrderInfo",
        {
          "email" => email,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        query: String,
      ).returns(Baml::Types::SearchParams)
      
    }
    def GetQuery(
        query:
    )
      raw = @runtime.call_function(
        "GetQuery",
        {
          "query" => query,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(Baml::Types::DynamicOutput)
      
    }
    def MyFunc(
        input:
    )
      raw = @runtime.call_function(
        "MyFunc",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(T::Array[T.nilable(Baml::Types::OptionalTest_ReturnType)])
      
    }
    def OptionalTest_Function(
        input:
    )
      raw = @runtime.call_function(
        "OptionalTest_Function",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(String)
      
    }
    def PromptTestClaude(
        input:
    )
      raw = @runtime.call_function(
        "PromptTestClaude",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(String)
      
    }
    def PromptTestClaudeChat(
        input:
    )
      raw = @runtime.call_function(
        "PromptTestClaudeChat",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(String)
      
    }
    def PromptTestClaudeChatNoSystem(
        input:
    )
      raw = @runtime.call_function(
        "PromptTestClaudeChatNoSystem",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(String)
      
    }
    def PromptTestOpenAI(
        input:
    )
      raw = @runtime.call_function(
        "PromptTestOpenAI",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(String)
      
    }
    def PromptTestOpenAIChat(
        input:
    )
      raw = @runtime.call_function(
        "PromptTestOpenAIChat",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(String)
      
    }
    def PromptTestOpenAIChatNoSystem(
        input:
    )
      raw = @runtime.call_function(
        "PromptTestOpenAIChatNoSystem",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(String)
      
    }
    def TestAnthropic(
        input:
    )
      raw = @runtime.call_function(
        "TestAnthropic",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        img: Baml::Audio,
      ).returns(String)
      
    }
    def TestAudioInput(
        img:
    )
      raw = @runtime.call_function(
        "TestAudioInput",
        {
          "img" => img,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(String)
      
    }
    def TestAzure(
        input:
    )
      raw = @runtime.call_function(
        "TestAzure",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      returns(String)
      
    }
    def TestFallbackClient(
        
    )
      raw = @runtime.call_function(
        "TestFallbackClient",
        {
          
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        myBool: T::Boolean,
      ).returns(String)
      
    }
    def TestFnNamedArgsSingleBool(
        myBool:
    )
      raw = @runtime.call_function(
        "TestFnNamedArgsSingleBool",
        {
          "myBool" => myBool,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        myArg: Baml::Types::NamedArgsSingleClass,
      ).returns(String)
      
    }
    def TestFnNamedArgsSingleClass(
        myArg:
    )
      raw = @runtime.call_function(
        "TestFnNamedArgsSingleClass",
        {
          "myArg" => myArg,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        myArg: T::Array[Baml::Types::NamedArgsSingleEnumList],
      ).returns(String)
      
    }
    def TestFnNamedArgsSingleEnumList(
        myArg:
    )
      raw = @runtime.call_function(
        "TestFnNamedArgsSingleEnumList",
        {
          "myArg" => myArg,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        myFloat: Float,
      ).returns(String)
      
    }
    def TestFnNamedArgsSingleFloat(
        myFloat:
    )
      raw = @runtime.call_function(
        "TestFnNamedArgsSingleFloat",
        {
          "myFloat" => myFloat,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        myInt: Integer,
      ).returns(String)
      
    }
    def TestFnNamedArgsSingleInt(
        myInt:
    )
      raw = @runtime.call_function(
        "TestFnNamedArgsSingleInt",
        {
          "myInt" => myInt,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        myString: String,
      ).returns(String)
      
    }
    def TestFnNamedArgsSingleString(
        myString:
    )
      raw = @runtime.call_function(
        "TestFnNamedArgsSingleString",
        {
          "myString" => myString,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        myStringArray: T::Array[String],
      ).returns(String)
      
    }
    def TestFnNamedArgsSingleStringArray(
        myStringArray:
    )
      raw = @runtime.call_function(
        "TestFnNamedArgsSingleStringArray",
        {
          "myStringArray" => myStringArray,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        myArg: T::Array[String],
      ).returns(String)
      
    }
    def TestFnNamedArgsSingleStringList(
        myArg:
    )
      raw = @runtime.call_function(
        "TestFnNamedArgsSingleStringList",
        {
          "myArg" => myArg,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(String)
      
    }
    def TestGemini(
        input:
    )
      raw = @runtime.call_function(
        "TestGemini",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        img: Baml::Image,
      ).returns(String)
      
    }
    def TestImageInput(
        img:
    )
      raw = @runtime.call_function(
        "TestImageInput",
        {
          "img" => img,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        myArg: Baml::Types::NamedArgsSingleClass,myArg2: Baml::Types::NamedArgsSingleClass,
      ).returns(String)
      
    }
    def TestMulticlassNamedArgs(
        myArg:,myArg2:
    )
      raw = @runtime.call_function(
        "TestMulticlassNamedArgs",
        {
          "myArg" => myArg,"myArg2" => myArg2,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(String)
      
    }
    def TestOllama(
        input:
    )
      raw = @runtime.call_function(
        "TestOllama",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: String,
      ).returns(String)
      
    }
    def TestOpenAI(
        input:
    )
      raw = @runtime.call_function(
        "TestOpenAI",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      returns(String)
      
    }
    def TestRetryConstant(
        
    )
      raw = @runtime.call_function(
        "TestRetryConstant",
        {
          
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      returns(String)
      
    }
    def TestRetryExponential(
        
    )
      raw = @runtime.call_function(
        "TestRetryExponential",
        {
          
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    sig {
      
      params(
        input: T.any(String, T::Boolean),
      ).returns(Baml::Types::UnionTest_ReturnType)
      
    }
    def UnionTest_Function(
        input:
    )
      raw = @runtime.call_function(
        "UnionTest_Function",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    

  end

  class BamlStreamClient
    extend T::Sig

    sig {params(runtime: Baml::Ffi::BamlRuntime, ctx_manager: Baml::Ffi::RuntimeContextManager).void}
    def initialize(runtime:, ctx_manager:)
      @runtime = runtime
      @ctx_manager = ctx_manager
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[Baml::Types::Category])
    }
    def ClassifyMessage(
        input:
    )
      raw = @runtime.stream_function(
        "ClassifyMessage",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(Baml::Types::Category), Baml::Types::Category].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[Baml::Types::Category])
    }
    def ClassifyMessage2(
        input:
    )
      raw = @runtime.stream_function(
        "ClassifyMessage2",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(Baml::Types::Category), Baml::Types::Category].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[Baml::Types::Category])
    }
    def ClassifyMessage3(
        input:
    )
      raw = @runtime.stream_function(
        "ClassifyMessage3",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(Baml::Types::Category), Baml::Types::Category].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        img: Baml::Image,
      ).returns(Baml::BamlStream[String])
    }
    def DescribeImage(
        img:
    )
      raw = @runtime.stream_function(
        "DescribeImage",
        {
          "img" => img,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        classWithImage: Baml::Types::ClassWithImage,img2: Baml::Image,
      ).returns(Baml::BamlStream[String])
    }
    def DescribeImage2(
        classWithImage:,img2:
    )
      raw = @runtime.stream_function(
        "DescribeImage2",
        {
          "classWithImage" => classWithImage,"img2" => img2,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        classWithImage: Baml::Types::ClassWithImage,img2: Baml::Image,
      ).returns(Baml::BamlStream[String])
    }
    def DescribeImage3(
        classWithImage:,img2:
    )
      raw = @runtime.stream_function(
        "DescribeImage3",
        {
          "classWithImage" => classWithImage,"img2" => img2,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        classWithImage: Baml::Types::ClassWithImage,img2: Baml::Image,
      ).returns(Baml::BamlStream[String])
    }
    def DescribeImage4(
        classWithImage:,img2:
    )
      raw = @runtime.stream_function(
        "DescribeImage4",
        {
          "classWithImage" => classWithImage,"img2" => img2,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: Baml::Types::DynamicClassOne,
      ).returns(Baml::BamlStream[Baml::Types::DynamicClassTwo])
    }
    def DynamicFunc(
        input:
    )
      raw = @runtime.stream_function(
        "DynamicFunc",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::DynamicClassTwo, Baml::Types::DynamicClassTwo].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[T::Array[String]])
    }
    def ExtractNames(
        input:
    )
      raw = @runtime.stream_function(
        "ExtractNames",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T::Array[T.nilable(String)], T::Array[String]].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        text: String,
      ).returns(Baml::BamlStream[T::Array[Baml::Types::Person]])
    }
    def ExtractPeople(
        text:
    )
      raw = @runtime.stream_function(
        "ExtractPeople",
        {
          "text" => text,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T::Array[Baml::PartialTypes::Person], T::Array[Baml::Types::Person]].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        resume: String,img: T.nilable(Baml::Image),
      ).returns(Baml::BamlStream[Baml::Types::Resume])
    }
    def ExtractResume(
        resume:,img:
    )
      raw = @runtime.stream_function(
        "ExtractResume",
        {
          "resume" => resume,"img" => img,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::Resume, Baml::Types::Resume].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        resume: String,
      ).returns(Baml::BamlStream[Baml::Types::Resume])
    }
    def ExtractResume2(
        resume:
    )
      raw = @runtime.stream_function(
        "ExtractResume2",
        {
          "resume" => resume,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::Resume, Baml::Types::Resume].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[T.nilable(Baml::Types::ClassOptionalOutput)])
    }
    def FnClassOptionalOutput(
        input:
    )
      raw = @runtime.stream_function(
        "FnClassOptionalOutput",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::ClassOptionalOutput, T.nilable(Baml::Types::ClassOptionalOutput)].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[T.nilable(Baml::Types::ClassOptionalOutput2)])
    }
    def FnClassOptionalOutput2(
        input:
    )
      raw = @runtime.stream_function(
        "FnClassOptionalOutput2",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::ClassOptionalOutput2, T.nilable(Baml::Types::ClassOptionalOutput2)].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[T::Array[Baml::Types::EnumOutput]])
    }
    def FnEnumListOutput(
        input:
    )
      raw = @runtime.stream_function(
        "FnEnumListOutput",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T::Array[T.nilable(Baml::Types::EnumOutput)], T::Array[Baml::Types::EnumOutput]].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[Baml::Types::EnumOutput])
    }
    def FnEnumOutput(
        input:
    )
      raw = @runtime.stream_function(
        "FnEnumOutput",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(Baml::Types::EnumOutput), Baml::Types::EnumOutput].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        myString: T.nilable(String),
      ).returns(Baml::BamlStream[String])
    }
    def FnNamedArgsSingleStringOptional(
        myString:
    )
      raw = @runtime.stream_function(
        "FnNamedArgsSingleStringOptional",
        {
          "myString" => myString,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[T::Boolean])
    }
    def FnOutputBool(
        input:
    )
      raw = @runtime.stream_function(
        "FnOutputBool",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(T::Boolean), T::Boolean].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[Baml::Types::TestOutputClass])
    }
    def FnOutputClass(
        input:
    )
      raw = @runtime.stream_function(
        "FnOutputClass",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::TestOutputClass, Baml::Types::TestOutputClass].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[T::Array[Baml::Types::TestOutputClass]])
    }
    def FnOutputClassList(
        input:
    )
      raw = @runtime.stream_function(
        "FnOutputClassList",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T::Array[Baml::PartialTypes::TestOutputClass], T::Array[Baml::Types::TestOutputClass]].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[Baml::Types::TestClassNested])
    }
    def FnOutputClassNested(
        input:
    )
      raw = @runtime.stream_function(
        "FnOutputClassNested",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::TestClassNested, Baml::Types::TestClassNested].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[Baml::Types::TestClassWithEnum])
    }
    def FnOutputClassWithEnum(
        input:
    )
      raw = @runtime.stream_function(
        "FnOutputClassWithEnum",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::TestClassWithEnum, Baml::Types::TestClassWithEnum].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[T::Array[String]])
    }
    def FnOutputStringList(
        input:
    )
      raw = @runtime.stream_function(
        "FnOutputStringList",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T::Array[T.nilable(String)], T::Array[String]].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[Baml::Types::TestEnum])
    }
    def FnTestAliasedEnumOutput(
        input:
    )
      raw = @runtime.stream_function(
        "FnTestAliasedEnumOutput",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(Baml::Types::TestEnum), Baml::Types::TestEnum].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[Baml::Types::TestClassAlias])
    }
    def FnTestClassAlias(
        input:
    )
      raw = @runtime.stream_function(
        "FnTestClassAlias",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::TestClassAlias, Baml::Types::TestClassAlias].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        myArg: Baml::Types::NamedArgsSingleEnum,
      ).returns(Baml::BamlStream[String])
    }
    def FnTestNamedArgsSingleEnum(
        myArg:
    )
      raw = @runtime.stream_function(
        "FnTestNamedArgsSingleEnum",
        {
          "myArg" => myArg,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        text: String,
      ).returns(Baml::BamlStream[Baml::Types::RaysData])
    }
    def GetDataType(
        text:
    )
      raw = @runtime.stream_function(
        "GetDataType",
        {
          "text" => text,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::RaysData, Baml::Types::RaysData].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        email: Baml::Types::Email,
      ).returns(Baml::BamlStream[Baml::Types::OrderInfo])
    }
    def GetOrderInfo(
        email:
    )
      raw = @runtime.stream_function(
        "GetOrderInfo",
        {
          "email" => email,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::OrderInfo, Baml::Types::OrderInfo].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        query: String,
      ).returns(Baml::BamlStream[Baml::Types::SearchParams])
    }
    def GetQuery(
        query:
    )
      raw = @runtime.stream_function(
        "GetQuery",
        {
          "query" => query,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::SearchParams, Baml::Types::SearchParams].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[Baml::Types::DynamicOutput])
    }
    def MyFunc(
        input:
    )
      raw = @runtime.stream_function(
        "MyFunc",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::DynamicOutput, Baml::Types::DynamicOutput].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[T::Array[T.nilable(Baml::Types::OptionalTest_ReturnType)]])
    }
    def OptionalTest_Function(
        input:
    )
      raw = @runtime.stream_function(
        "OptionalTest_Function",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T::Array[Baml::PartialTypes::OptionalTest_ReturnType], T::Array[T.nilable(Baml::Types::OptionalTest_ReturnType)]].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[String])
    }
    def PromptTestClaude(
        input:
    )
      raw = @runtime.stream_function(
        "PromptTestClaude",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[String])
    }
    def PromptTestClaudeChat(
        input:
    )
      raw = @runtime.stream_function(
        "PromptTestClaudeChat",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[String])
    }
    def PromptTestClaudeChatNoSystem(
        input:
    )
      raw = @runtime.stream_function(
        "PromptTestClaudeChatNoSystem",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[String])
    }
    def PromptTestOpenAI(
        input:
    )
      raw = @runtime.stream_function(
        "PromptTestOpenAI",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[String])
    }
    def PromptTestOpenAIChat(
        input:
    )
      raw = @runtime.stream_function(
        "PromptTestOpenAIChat",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[String])
    }
    def PromptTestOpenAIChatNoSystem(
        input:
    )
      raw = @runtime.stream_function(
        "PromptTestOpenAIChatNoSystem",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[String])
    }
    def TestAnthropic(
        input:
    )
      raw = @runtime.stream_function(
        "TestAnthropic",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        img: Baml::Audio,
      ).returns(Baml::BamlStream[String])
    }
    def TestAudioInput(
        img:
    )
      raw = @runtime.stream_function(
        "TestAudioInput",
        {
          "img" => img,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[String])
    }
    def TestAzure(
        input:
    )
      raw = @runtime.stream_function(
        "TestAzure",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        
      ).returns(Baml::BamlStream[String])
    }
    def TestFallbackClient(
        
    )
      raw = @runtime.stream_function(
        "TestFallbackClient",
        {
          
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        myBool: T::Boolean,
      ).returns(Baml::BamlStream[String])
    }
    def TestFnNamedArgsSingleBool(
        myBool:
    )
      raw = @runtime.stream_function(
        "TestFnNamedArgsSingleBool",
        {
          "myBool" => myBool,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        myArg: Baml::Types::NamedArgsSingleClass,
      ).returns(Baml::BamlStream[String])
    }
    def TestFnNamedArgsSingleClass(
        myArg:
    )
      raw = @runtime.stream_function(
        "TestFnNamedArgsSingleClass",
        {
          "myArg" => myArg,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        myArg: T::Array[Baml::Types::NamedArgsSingleEnumList],
      ).returns(Baml::BamlStream[String])
    }
    def TestFnNamedArgsSingleEnumList(
        myArg:
    )
      raw = @runtime.stream_function(
        "TestFnNamedArgsSingleEnumList",
        {
          "myArg" => myArg,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        myFloat: Float,
      ).returns(Baml::BamlStream[String])
    }
    def TestFnNamedArgsSingleFloat(
        myFloat:
    )
      raw = @runtime.stream_function(
        "TestFnNamedArgsSingleFloat",
        {
          "myFloat" => myFloat,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        myInt: Integer,
      ).returns(Baml::BamlStream[String])
    }
    def TestFnNamedArgsSingleInt(
        myInt:
    )
      raw = @runtime.stream_function(
        "TestFnNamedArgsSingleInt",
        {
          "myInt" => myInt,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        myString: String,
      ).returns(Baml::BamlStream[String])
    }
    def TestFnNamedArgsSingleString(
        myString:
    )
      raw = @runtime.stream_function(
        "TestFnNamedArgsSingleString",
        {
          "myString" => myString,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        myStringArray: T::Array[String],
      ).returns(Baml::BamlStream[String])
    }
    def TestFnNamedArgsSingleStringArray(
        myStringArray:
    )
      raw = @runtime.stream_function(
        "TestFnNamedArgsSingleStringArray",
        {
          "myStringArray" => myStringArray,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        myArg: T::Array[String],
      ).returns(Baml::BamlStream[String])
    }
    def TestFnNamedArgsSingleStringList(
        myArg:
    )
      raw = @runtime.stream_function(
        "TestFnNamedArgsSingleStringList",
        {
          "myArg" => myArg,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[String])
    }
    def TestGemini(
        input:
    )
      raw = @runtime.stream_function(
        "TestGemini",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        img: Baml::Image,
      ).returns(Baml::BamlStream[String])
    }
    def TestImageInput(
        img:
    )
      raw = @runtime.stream_function(
        "TestImageInput",
        {
          "img" => img,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        myArg: Baml::Types::NamedArgsSingleClass,myArg2: Baml::Types::NamedArgsSingleClass,
      ).returns(Baml::BamlStream[String])
    }
    def TestMulticlassNamedArgs(
        myArg:,myArg2:
    )
      raw = @runtime.stream_function(
        "TestMulticlassNamedArgs",
        {
          "myArg" => myArg,"myArg2" => myArg2,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[String])
    }
    def TestOllama(
        input:
    )
      raw = @runtime.stream_function(
        "TestOllama",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::BamlStream[String])
    }
    def TestOpenAI(
        input:
    )
      raw = @runtime.stream_function(
        "TestOpenAI",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        
      ).returns(Baml::BamlStream[String])
    }
    def TestRetryConstant(
        
    )
      raw = @runtime.stream_function(
        "TestRetryConstant",
        {
          
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        
      ).returns(Baml::BamlStream[String])
    }
    def TestRetryExponential(
        
    )
      raw = @runtime.stream_function(
        "TestRetryExponential",
        {
          
        },
        @ctx_manager,
      )
      Baml::BamlStream[T.nilable(String), String].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    sig {
      params(
        input: T.any(String, T::Boolean),
      ).returns(Baml::BamlStream[Baml::Types::UnionTest_ReturnType])
    }
    def UnionTest_Function(
        input:
    )
      raw = @runtime.stream_function(
        "UnionTest_Function",
        {
          "input" => input,
        },
        @ctx_manager,
      )
      Baml::BamlStream[Baml::PartialTypes::UnionTest_ReturnType, Baml::Types::UnionTest_ReturnType].new(
        ffi_stream: raw,
        ctx_manager: @ctx_manager
      )
    end

    
  end
end