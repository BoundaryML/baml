# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..clients.client_gpt4 import GPT4
from ..functions.fx_getorderinfo import BAMLGetOrderInfo
from ..types.classes.cls_email import Email
from ..types.classes.cls_orderinfo import OrderInfo
from ..types.enums.enm_orderstatus import OrderStatus
from ..types.partial.classes.cls_email import PartialEmail
from ..types.partial.classes.cls_orderinfo import PartialOrderInfo
from baml_core.jinja.render_prompt import RenderData
from baml_core.provider_manager.llm_response import LLMResponse
from baml_core.stream import AsyncStream
from baml_lib._impl.deserializer import Deserializer


import typing
# Impl: default_config
# Client: GPT4
# An implementation of GetOrderInfo.

__prompt_template = """\
Given the email below:

```
from: {{email.from_address}}
Email Subject: {{email.subject}}
Email Body: {{email.body}}
```

Extract this info from the email in JSON format:
{{ ctx.output_format }}

Before you output the JSON, please explain your
reasoning step-by-step. Here is an example on how to do this:
'If we think step by step we can see that ...
 therefore the output JSON is:
{
  ... the json schema ...
}'\
"""

# We ignore the type here because baml does some type magic to make this work
# for inline SpecialForms like Optional, Union, List.
__deserializer = Deserializer[OrderInfo](OrderInfo)  # type: ignore

# Add a deserializer that handles stream responses, which are all Partial types
__partial_deserializer = Deserializer[PartialOrderInfo](PartialOrderInfo)  # type: ignore

__output_format = """
{
  "order_status": "OrderStatus as string",
  "tracking_number": string | null,
  "estimated_arrival_date": string | null
}

OrderStatus
---
ORDERED
SHIPPED
DELIVERED
CANCELLED
""".strip()

__template_macros = [
]


async def default_config(*, email: Email) -> OrderInfo:
    response = await GPT4.run_jinja_template(
        jinja_template=__prompt_template,
        output_format=__output_format, template_macros=__template_macros,
        args=dict(email=email)
    )
    deserialized = __deserializer.from_string(response.generated)
    return deserialized


def default_config_stream(*, email: Email
) -> AsyncStream[OrderInfo, PartialOrderInfo]:
    def run_prompt() -> typing.AsyncIterator[LLMResponse]:
        raw_stream = GPT4.run_jinja_template_stream(
            jinja_template=__prompt_template,
            output_format=__output_format, template_macros=__template_macros,
            args=dict(email=email)
        )
        return raw_stream
    stream = AsyncStream(stream_cb=run_prompt, partial_deserializer=__partial_deserializer, final_deserializer=__deserializer)
    return stream

BAMLGetOrderInfo.register_impl("default_config")(default_config, default_config_stream)