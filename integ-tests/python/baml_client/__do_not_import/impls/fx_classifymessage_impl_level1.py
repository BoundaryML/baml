# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..clients.client_gpt4 import GPT4
from ..functions.fx_classifymessage import BAMLClassifyMessage
from ..types.enums.enm_category import Category
from baml_core.provider_manager.llm_response import LLMResponse
from baml_core.stream import AsyncStream
from baml_lib._impl.deserializer import Deserializer
from typing import List


import typing
# Impl: level1
# Client: GPT4
# An implementation of ClassifyMessage.

__prompt_template = """\
Classify the following INPUT into following:
Category
---
Refund
CancelOrder
TechnicalSupport
AccountIssue
Question

INPUT
---
date: {//BAML_CLIENT_REPLACE_ME_MAGIC_input.message_date//}
message: {//BAML_CLIENT_REPLACE_ME_MAGIC_input.message//}
---

Output json format:
"Category as string"[]

JSON:\
"""

__input_replacers = {
    "{message}",
    "{message_date}"
}


# We ignore the type here because baml does some type magic to make this work
# for inline SpecialForms like Optional, Union, List.
__deserializer = Deserializer[List[Category]](List[Category])  # type: ignore

# Add a deserializer that handles stream responses, which are all Partial types
__partial_deserializer = Deserializer[List[Category]](List[Category])  # type: ignore







async def level1(*, message: str, message_date: str) -> List[Category]:
    response = await GPT4.run_prompt_template(template=__prompt_template, replacers=__input_replacers, params=dict(message=message, message_date=message_date))
    deserialized = __deserializer.from_string(response.generated)
    return deserialized


def level1_stream(*, message: str, message_date: str
) -> AsyncStream[List[Category], List[Category]]:
    def run_prompt() -> typing.AsyncIterator[LLMResponse]:
        raw_stream = GPT4.run_prompt_template_stream(template=__prompt_template, replacers=__input_replacers, params=dict(message=message, message_date=message_date))
        return raw_stream
    stream = AsyncStream(stream_cb=run_prompt, partial_deserializer=__partial_deserializer, final_deserializer=__deserializer)
    return stream

BAMLClassifyMessage.register_impl("level1")(level1, level1_stream)