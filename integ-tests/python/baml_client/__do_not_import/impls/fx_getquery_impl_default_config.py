# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..clients.client_gpt4 import GPT4
from ..functions.fx_getquery import BAMLGetQuery
from ..types.classes.cls_searchparams import SearchParams
from ..types.classes.cls_withreasoning import WithReasoning
from ..types.enums.enm_tag import Tag
from ..types.partial.classes.cls_searchparams import PartialSearchParams
from ..types.partial.classes.cls_withreasoning import PartialWithReasoning
from baml_core.jinja.render_prompt import RenderData
from baml_core.provider_manager.llm_response import LLMResponse
from baml_core.stream import AsyncStream
from baml_lib._impl.deserializer import Deserializer


import typing
# Impl: default_config
# Client: GPT4
# An implementation of GetQuery.

__prompt_template = """\
Extract the following information from the query:

Query:
<<<<
{{ query }}
<<<<

OUTPUT_JSON_SCHEMA:
{{ ctx.output_schema }}

Before OUTPUT_JSON_SCHEMA, list 5 intentions the user may have.
--- EXAMPLES ---
1. <intent>
2. <intent>
3. <intent>
4. <intent>
5. <intent>

{
    ... // OUTPUT_JSON_SCHEMA
}\
"""

# We ignore the type here because baml does some type magic to make this work
# for inline SpecialForms like Optional, Union, List.
__deserializer = Deserializer[SearchParams](SearchParams)  # type: ignore

# Add a deserializer that handles stream responses, which are all Partial types
__partial_deserializer = Deserializer[PartialSearchParams](PartialSearchParams)  # type: ignore

__output_schema = """
{
  // In ISO duration format, e.g. P1Y2M10D.
  "dateRange": int | null,
  "location": string[],
  // An exact job title, not a general category.
  "jobTitle": {
    "value": string,
    // Why the value is a good fit.
    "reasoning": string
  } | null,
  // The exact name of the company, not a product or service.
  "company": {
    "value": string,
    // Why the value is a good fit.
    "reasoning": string
  } | null,
  // Any specific projects or features the user is looking for.
  "description": {
    "value": string,
    // Why the value is a good fit.
    "reasoning": string
  }[],
  "tags": ("Tag as string" | string)[]
}

Tag
---
Security
AI
Blockchain
""".strip()

__template_macros = [
]


async def default_config(*, query: str) -> SearchParams:
    response = await GPT4.run_jinja_template(
        jinja_template=__prompt_template,
        output_schema=__output_schema, template_macros=__template_macros,
        args=dict(query=query)
    )
    deserialized = __deserializer.from_string(response.generated)
    return deserialized


def default_config_stream(*, query: str
) -> AsyncStream[SearchParams, PartialSearchParams]:
    def run_prompt() -> typing.AsyncIterator[LLMResponse]:
        raw_stream = GPT4.run_jinja_template_stream(
            jinja_template=__prompt_template,
            output_schema=__output_schema, template_macros=__template_macros,
            args=dict(query=query)
        )
        return raw_stream
    stream = AsyncStream(stream_cb=run_prompt, partial_deserializer=__partial_deserializer, final_deserializer=__deserializer)
    return stream

BAMLGetQuery.register_impl("default_config")(default_config, default_config_stream)