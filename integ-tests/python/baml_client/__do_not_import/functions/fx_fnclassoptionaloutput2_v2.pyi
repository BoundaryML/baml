# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.classes.cls_blah2 import Blah2
from ..types.classes.cls_classoptionaloutput2v2 import ClassOptionalOutput2v2
from ..types.partial.classes.cls_blah2 import PartialBlah2
from ..types.partial.classes.cls_classoptionaloutput2v2 import PartialClassOptionalOutput2v2
from baml_core.stream import AsyncStream
from typing import Callable, Optional, Protocol, runtime_checkable


import typing

import pytest
from contextlib import contextmanager
from unittest import mock

ImplName = typing.Literal["default_config"]

T = typing.TypeVar("T", bound=typing.Callable[..., typing.Any])
CLS = typing.TypeVar("CLS", bound=type)


IFnClassOptionalOutput2_V2Output = Optional[ClassOptionalOutput2v2]

@runtime_checkable
class IFnClassOptionalOutput2_V2(Protocol):
    """
    This is the interface for a function.

    Args:
        input: str

    Returns:
        Optional[ClassOptionalOutput2v2]
    """

    async def __call__(self, *, input: str) -> Optional[ClassOptionalOutput2v2]:
        ...

   

@runtime_checkable
class IFnClassOptionalOutput2_V2Stream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        input: str

    Returns:
        AsyncStream[Optional[ClassOptionalOutput2v2], PartialClassOptionalOutput2v2]
    """

    def __call__(self, *, input: str
) -> AsyncStream[Optional[ClassOptionalOutput2v2], PartialClassOptionalOutput2v2]:
        ...
class BAMLFnClassOptionalOutput2_V2Impl:
    async def run(self, *, input: str) -> Optional[ClassOptionalOutput2v2]:
        ...
    
    def stream(self, *, input: str
) -> AsyncStream[Optional[ClassOptionalOutput2v2], PartialClassOptionalOutput2v2]:
        ...

class IBAMLFnClassOptionalOutput2_V2:
    def register_impl(
        self, name: ImplName
    ) -> typing.Callable[[IFnClassOptionalOutput2_V2, IFnClassOptionalOutput2_V2Stream], None]:
        ...

    async def __call__(self, *, input: str) -> Optional[ClassOptionalOutput2v2]:
        ...

    def stream(self, *, input: str
) -> AsyncStream[Optional[ClassOptionalOutput2v2], PartialClassOptionalOutput2v2]:
        ...

    def get_impl(self, name: ImplName) -> BAMLFnClassOptionalOutput2_V2Impl:
        ...

    @contextmanager
    def mock(self) -> typing.Generator[mock.AsyncMock, None, None]:
        """
        Utility for mocking the FnClassOptionalOutput2_V2Interface.

        Usage:
            ```python
            # All implementations are mocked.

            async def test_logic() -> None:
                with baml.FnClassOptionalOutput2_V2.mock() as mocked:
                    mocked.return_value = ...
                    result = await FnClassOptionalOutput2_V2Impl(...)
                    assert mocked.called
            ```
        """
        ...

    @typing.overload
    def test(self, test_function: T) -> T:
        """
        Provides a pytest.mark.parametrize decorator to facilitate testing different implementations of
        the FnClassOptionalOutput2_V2Interface.

        Args:
            test_function : T
                The test function to be decorated.

        Usage:
            ```python
            # All implementations will be tested.

            @baml.FnClassOptionalOutput2_V2.test
            async def test_logic(FnClassOptionalOutput2_V2Impl: IFnClassOptionalOutput2_V2) -> None:
                result = await FnClassOptionalOutput2_V2Impl(...)
            ```
        """
        ...

    @typing.overload
    def test(self, *, exclude_impl: typing.Iterable[ImplName] = [], stream: bool = False) -> pytest.MarkDecorator:
        """
        Provides a pytest.mark.parametrize decorator to facilitate testing different implementations of
        the FnClassOptionalOutput2_V2Interface.

        Args:
            exclude_impl : Iterable[ImplName]
                The names of the implementations to exclude from testing.
            stream: bool
                If set, will return a streamable version of the test function.

        Usage:
            ```python
            # All implementations except the given impl will be tested.

            @baml.FnClassOptionalOutput2_V2.test(exclude_impl=["implname"])
            async def test_logic(FnClassOptionalOutput2_V2Impl: IFnClassOptionalOutput2_V2) -> None:
                result = await FnClassOptionalOutput2_V2Impl(...)
            ```

            ```python
            # Streamable version of the test function.

            @baml.FnClassOptionalOutput2_V2.test(stream=True)
            async def test_logic(FnClassOptionalOutput2_V2Impl: IFnClassOptionalOutput2_V2Stream) -> None:
                async for result in FnClassOptionalOutput2_V2Impl(...):
                    ...
            ```
        """
        ...

    @typing.overload
    def test(self, test_class: typing.Type[CLS]) -> typing.Type[CLS]:
        """
        Provides a pytest.mark.parametrize decorator to facilitate testing different implementations of
        the FnClassOptionalOutput2_V2Interface.

        Args:
            test_class : Type[CLS]
                The test class to be decorated.

        Usage:
        ```python
        # All implementations will be tested in every test method.

        @baml.FnClassOptionalOutput2_V2.test
        class TestClass:
            def test_a(self, FnClassOptionalOutput2_V2Impl: IFnClassOptionalOutput2_V2) -> None:
                ...
            def test_b(self, FnClassOptionalOutput2_V2Impl: IFnClassOptionalOutput2_V2) -> None:
                ...
        ```
        """
        ...

BAMLFnClassOptionalOutput2_V2: IBAMLFnClassOptionalOutput2_V2
