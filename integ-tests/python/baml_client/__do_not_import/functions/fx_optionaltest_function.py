# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.classes.cls_optionaltest_prop1 import OptionalTest_Prop1
from ..types.classes.cls_optionaltest_returntype import OptionalTest_ReturnType
from ..types.enums.enm_optionaltest_categorytype import OptionalTest_CategoryType
from ..types.partial.classes.cls_optionaltest_prop1 import PartialOptionalTest_Prop1
from ..types.partial.classes.cls_optionaltest_returntype import PartialOptionalTest_ReturnType
from baml_core.stream import AsyncStream
from baml_lib._impl.functions import BaseBAMLFunction
from typing import AsyncIterator, Callable, List, Optional, Protocol, runtime_checkable


IOptionalTest_FunctionOutput = List[Optional[OptionalTest_ReturnType]]

@runtime_checkable
class IOptionalTest_Function(Protocol):
    """
    This is the interface for a function.

    Args:
        arg: str

    Returns:
        List[Optional[OptionalTest_ReturnType]]
    """

    async def __call__(self, arg: str, /) -> List[Optional[OptionalTest_ReturnType]]:
        ...

   

@runtime_checkable
class IOptionalTest_FunctionStream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        arg: str

    Returns:
        AsyncStream[List[Optional[OptionalTest_ReturnType]], List[Optional[OptionalTest_ReturnType]]]
    """

    def __call__(self, arg: str, /) -> AsyncStream[List[Optional[OptionalTest_ReturnType]], List[Optional[OptionalTest_ReturnType]]]:
        ...
class IBAMLOptionalTest_Function(BaseBAMLFunction[List[Optional[OptionalTest_ReturnType]], List[Optional[OptionalTest_ReturnType]]]):
    def __init__(self) -> None:
        super().__init__(
            "OptionalTest_Function",
            IOptionalTest_Function,
            ["v1"],
        )

    async def __call__(self, *args, **kwargs) -> List[Optional[OptionalTest_ReturnType]]:
        return await self.get_impl("v1").run(*args, **kwargs)
    
    def stream(self, *args, **kwargs) -> AsyncStream[List[Optional[OptionalTest_ReturnType]], List[Optional[OptionalTest_ReturnType]]]:
        res = self.get_impl("v1").stream(*args, **kwargs)
        return res

BAMLOptionalTest_Function = IBAMLOptionalTest_Function()

__all__ = [ "BAMLOptionalTest_Function" ]
