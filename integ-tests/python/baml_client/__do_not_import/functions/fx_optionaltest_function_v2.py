# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.classes.cls_optionaltest_prop1v2 import OptionalTest_Prop1v2
from ..types.classes.cls_optionaltest_returntypev2 import OptionalTest_ReturnTypev2
from ..types.enums.enm_optionaltest_categorytypev2 import OptionalTest_CategoryTypev2
from ..types.partial.classes.cls_optionaltest_prop1v2 import PartialOptionalTest_Prop1v2
from ..types.partial.classes.cls_optionaltest_returntypev2 import PartialOptionalTest_ReturnTypev2
from baml_core.stream import AsyncStream
from baml_lib._impl.functions import BaseBAMLFunction
from typing import AsyncIterator, Callable, List, Optional, Protocol, runtime_checkable


IOptionalTest_Function_V2Output = List[Optional[OptionalTest_ReturnTypev2]]

@runtime_checkable
class IOptionalTest_Function_V2(Protocol):
    """
    This is the interface for a function.

    Args:
        input: str

    Returns:
        List[Optional[OptionalTest_ReturnTypev2]]
    """

    async def __call__(self, *, input: str) -> List[Optional[OptionalTest_ReturnTypev2]]:
        ...

   

@runtime_checkable
class IOptionalTest_Function_V2Stream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        input: str

    Returns:
        AsyncStream[List[Optional[OptionalTest_ReturnTypev2]], List[Optional[OptionalTest_ReturnTypev2]]]
    """

    def __call__(self, *, input: str
) -> AsyncStream[List[Optional[OptionalTest_ReturnTypev2]], List[Optional[OptionalTest_ReturnTypev2]]]:
        ...
class IBAMLOptionalTest_Function_V2(BaseBAMLFunction[List[Optional[OptionalTest_ReturnTypev2]], List[Optional[OptionalTest_ReturnTypev2]]]):
    def __init__(self) -> None:
        super().__init__(
            "OptionalTest_Function_V2",
            IOptionalTest_Function_V2,
            ["default_config"],
        )

    async def __call__(self, *args, **kwargs) -> List[Optional[OptionalTest_ReturnTypev2]]:
        return await self.get_impl("default_config").run(*args, **kwargs)
    
    def stream(self, *args, **kwargs) -> AsyncStream[List[Optional[OptionalTest_ReturnTypev2]], List[Optional[OptionalTest_ReturnTypev2]]]:
        res = self.get_impl("default_config").stream(*args, **kwargs)
        return res

BAMLOptionalTest_Function_V2 = IBAMLOptionalTest_Function_V2()

__all__ = [ "BAMLOptionalTest_Function_V2" ]
