# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.classes.cls_uniontest_returntype import UnionTest_ReturnType
from ..types.partial.classes.cls_uniontest_returntype import PartialUnionTest_ReturnType
from baml_core.stream import AsyncStream
from baml_lib._impl.functions import BaseBAMLFunction
from typing import AsyncIterator, Callable, Protocol, Union, runtime_checkable


IUnionTest_FunctionOutput = UnionTest_ReturnType

@runtime_checkable
class IUnionTest_Function(Protocol):
    """
    This is the interface for a function.

    Args:
        arg: Union[str, bool]

    Returns:
        UnionTest_ReturnType
    """

    async def __call__(self, arg: Union[str, bool], /) -> UnionTest_ReturnType:
        ...

   

@runtime_checkable
class IUnionTest_FunctionStream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        arg: Union[str, bool]

    Returns:
        AsyncStream[UnionTest_ReturnType, PartialUnionTest_ReturnType]
    """

    def __call__(self, arg: Union[str, bool], /) -> AsyncStream[UnionTest_ReturnType, PartialUnionTest_ReturnType]:
        ...
class IBAMLUnionTest_Function(BaseBAMLFunction[UnionTest_ReturnType, PartialUnionTest_ReturnType]):
    def __init__(self) -> None:
        super().__init__(
            "UnionTest_Function",
            IUnionTest_Function,
            ["v1"],
        )

    async def __call__(self, *args, **kwargs) -> UnionTest_ReturnType:
        return await self.get_impl("v1").run(*args, **kwargs)
    
    def stream(self, *args, **kwargs) -> AsyncStream[UnionTest_ReturnType, PartialUnionTest_ReturnType]:
        res = self.get_impl("v1").stream(*args, **kwargs)
        return res

BAMLUnionTest_Function = IBAMLUnionTest_Function()

__all__ = [ "BAMLUnionTest_Function" ]
