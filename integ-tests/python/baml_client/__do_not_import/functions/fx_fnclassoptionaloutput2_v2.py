# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.classes.cls_blah2 import Blah2
from ..types.classes.cls_classoptionaloutput2v2 import ClassOptionalOutput2v2
from ..types.partial.classes.cls_blah2 import PartialBlah2
from ..types.partial.classes.cls_classoptionaloutput2v2 import PartialClassOptionalOutput2v2
from baml_core.stream import AsyncStream
from baml_lib._impl.functions import BaseBAMLFunction
from typing import AsyncIterator, Callable, Optional, Protocol, runtime_checkable


IFnClassOptionalOutput2_V2Output = Optional[ClassOptionalOutput2v2]

@runtime_checkable
class IFnClassOptionalOutput2_V2(Protocol):
    """
    This is the interface for a function.

    Args:
        input: str

    Returns:
        Optional[ClassOptionalOutput2v2]
    """

    async def __call__(self, *, input: str) -> Optional[ClassOptionalOutput2v2]:
        ...

   

@runtime_checkable
class IFnClassOptionalOutput2_V2Stream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        input: str

    Returns:
        AsyncStream[Optional[ClassOptionalOutput2v2], PartialClassOptionalOutput2v2]
    """

    def __call__(self, *, input: str
) -> AsyncStream[Optional[ClassOptionalOutput2v2], PartialClassOptionalOutput2v2]:
        ...
class IBAMLFnClassOptionalOutput2_V2(BaseBAMLFunction[Optional[ClassOptionalOutput2v2], PartialClassOptionalOutput2v2]):
    def __init__(self) -> None:
        super().__init__(
            "FnClassOptionalOutput2_V2",
            IFnClassOptionalOutput2_V2,
            ["default_config"],
        )

    async def __call__(self, *args, **kwargs) -> Optional[ClassOptionalOutput2v2]:
        return await self.get_impl("default_config").run(*args, **kwargs)
    
    def stream(self, *args, **kwargs) -> AsyncStream[Optional[ClassOptionalOutput2v2], PartialClassOptionalOutput2v2]:
        res = self.get_impl("default_config").stream(*args, **kwargs)
        return res

BAMLFnClassOptionalOutput2_V2 = IBAMLFnClassOptionalOutput2_V2()

__all__ = [ "BAMLFnClassOptionalOutput2_V2" ]
