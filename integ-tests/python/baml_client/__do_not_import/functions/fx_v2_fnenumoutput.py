# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.enums.enm_enumoutput2 import EnumOutput2
from baml_core.stream import AsyncStream
from baml_lib._impl.functions import BaseBAMLFunction
from typing import AsyncIterator, Callable, Protocol, runtime_checkable


IV2_FnEnumOutputOutput = EnumOutput2

@runtime_checkable
class IV2_FnEnumOutput(Protocol):
    """
    This is the interface for a function.

    Args:
        input: str

    Returns:
        EnumOutput2
    """

    async def __call__(self, *, input: str) -> EnumOutput2:
        ...

   

@runtime_checkable
class IV2_FnEnumOutputStream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        input: str

    Returns:
        AsyncStream[EnumOutput2, EnumOutput2]
    """

    def __call__(self, *, input: str
) -> AsyncStream[EnumOutput2, EnumOutput2]:
        ...
class IBAMLV2_FnEnumOutput(BaseBAMLFunction[EnumOutput2, EnumOutput2]):
    def __init__(self) -> None:
        super().__init__(
            "V2_FnEnumOutput",
            IV2_FnEnumOutput,
            ["default_config"],
        )

    async def __call__(self, *args, **kwargs) -> EnumOutput2:
        return await self.get_impl("default_config").run(*args, **kwargs)
    
    def stream(self, *args, **kwargs) -> AsyncStream[EnumOutput2, EnumOutput2]:
        res = self.get_impl("default_config").stream(*args, **kwargs)
        return res

BAMLV2_FnEnumOutput = IBAMLV2_FnEnumOutput()

__all__ = [ "BAMLV2_FnEnumOutput" ]
