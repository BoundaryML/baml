# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.classes.cls_testoutputclass import TestOutputClass
from ..types.partial.classes.cls_testoutputclass import PartialTestOutputClass
from baml_core.stream import AsyncStream
from baml_lib._impl.functions import BaseBAMLFunction
from typing import AsyncIterator, Callable, List, Protocol, runtime_checkable


IFnOutputClassListOutput = List[TestOutputClass]

@runtime_checkable
class IFnOutputClassList(Protocol):
    """
    This is the interface for a function.

    Args:
        arg: str

    Returns:
        List[TestOutputClass]
    """

    async def __call__(self, arg: str, /) -> List[TestOutputClass]:
        ...

   

@runtime_checkable
class IFnOutputClassListStream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        arg: str

    Returns:
        AsyncStream[List[TestOutputClass], List[TestOutputClass]]
    """

    def __call__(self, arg: str, /) -> AsyncStream[List[TestOutputClass], List[TestOutputClass]]:
        ...
class IBAMLFnOutputClassList(BaseBAMLFunction[List[TestOutputClass], List[TestOutputClass]]):
    def __init__(self) -> None:
        super().__init__(
            "FnOutputClassList",
            IFnOutputClassList,
            ["v1"],
        )

    async def __call__(self, *args, **kwargs) -> List[TestOutputClass]:
        return await self.get_impl("v1").run(*args, **kwargs)
    
    def stream(self, *args, **kwargs) -> AsyncStream[List[TestOutputClass], List[TestOutputClass]]:
        res = self.get_impl("v1").stream(*args, **kwargs)
        return res

BAMLFnOutputClassList = IBAMLFnOutputClassList()

__all__ = [ "BAMLFnOutputClassList" ]
