# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..__do_not_import.generated_baml_client import baml
from ..baml_types import Category, IClassifyConversation, IClassifyConversationStream, Message
from baml_lib._impl.deserializer import Deserializer
from json import dumps
from pytest_baml.ipc_channel import BaseIPCChannel
from typing import Any, List


@baml.ClassifyConversation.test(stream=True)
async def test_blue_dolphin(ClassifyConversationImpl: IClassifyConversationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    case = {"messages": [{"role": "user", "message": "This is so frustrating, i bought a laptop and it's not working properly. I want to return it and get my money back. I'm so disappointed", }, {"role": "assistant", "message": "I'm sorry to hear that. Could you please provide me with the order number and the reason for the return?", }, {"role": "user", "message": "I don't have the order number with me right now, but I can provide you with the serial number of the laptop. The reason for the return is that the laptop is not turning on and the screen is flickering. Also i can't even log in!", }], }
    deserializer_messages = Deserializer[List[Message]](List[Message]) # type: ignore
    messages = deserializer_messages.from_string(to_str(case["messages"]))
    async with ClassifyConversationImpl(
        messages=messages
    ) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()
@baml.ClassifyConversation.test(stream=True)
async def test_case1(ClassifyConversationImpl: IClassifyConversationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    case = {"messages": [{"role": "user", "content": "Can you help me find when an order I placed is shipping?", }], }
    deserializer_messages = Deserializer[List[Message]](List[Message]) # type: ignore
    messages = deserializer_messages.from_string(to_str(case["messages"]))
    async with ClassifyConversationImpl(
        messages=messages
    ) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()
