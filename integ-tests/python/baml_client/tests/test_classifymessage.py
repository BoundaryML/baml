# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..__do_not_import.generated_baml_client import baml
from ..baml_types import Category, IClassifyMessage, IClassifyMessageStream
from baml_lib._impl.deserializer import Deserializer
from json import dumps
from pytest_baml.ipc_channel import BaseIPCChannel
from typing import Any


@baml.ClassifyMessage.test(stream=True)
async def test_blue_dolphin(ClassifyMessageImpl: IClassifyMessageStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    case = "{\"message\":\"This is so frustrating, i bought a laptop and it's not working properly. I want to return it and get my money back. I'm so disappointed\",\"message_date\":\"2019-01-01T00:00:00Z\"}"
    deserializer_message = Deserializer[str](str) # type: ignore
    message = deserializer_message.from_string(to_str(case["message"]))
    deserializer_message_date = Deserializer[str](str) # type: ignore
    message_date = deserializer_message_date.from_string(to_str(case["message_date"]))
    async with ClassifyMessageImpl(
        message=message,
        message_date=message_date
    ) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()
@baml.ClassifyMessage.test(stream=True)
async def test_case1(ClassifyMessageImpl: IClassifyMessageStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    case = "{\"message\":\"Hi! I'm having an issue with my account. Can you help me?\",\"message_date\":\"2019-01-01T00:00:00Z\"}"
    deserializer_message = Deserializer[str](str) # type: ignore
    message = deserializer_message.from_string(to_str(case["message"]))
    deserializer_message_date = Deserializer[str](str) # type: ignore
    message_date = deserializer_message_date.from_string(to_str(case["message_date"]))
    async with ClassifyMessageImpl(
        message=message,
        message_date=message_date
    ) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()
