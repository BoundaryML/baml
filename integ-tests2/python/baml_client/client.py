###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Generic, List, Optional, TypeVar, Union
import pprint

import baml_py
from pydantic import BaseModel, ValidationError

from . import partial_types, types

OutputType = TypeVar('OutputType')

class BamlOutputWrapper(BaseModel, Generic[OutputType]):
    wrapped: OutputType
    
    @classmethod
    def coerce(cls, parsed: Any) -> OutputType:
      try:
        return cls.model_validate(obj={'wrapped': parsed}).wrapped
      except ValidationError as e:
        
        raise TypeError(
          "Internal BAML error while casting output type:\n{}".format(
            pprint.pformat(parsed)
          )
        ) from e

class BamlClient:
    __runtime: baml_py.BamlRuntimePy
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"

    def __init__(self, runtime: baml_py.BamlRuntimePy, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager)

    @property
    def stream(self):
      return self.__stream_client

    
    async def ClassifyMessage(
        self,
        input: str
    ) -> types.Category:
      raw = await self.__runtime.call_function(
        "ClassifyMessage",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.Category].coerce(raw.parsed())
    
    async def ClassifyMessage2(
        self,
        input: str
    ) -> types.Category:
      raw = await self.__runtime.call_function(
        "ClassifyMessage2",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.Category].coerce(raw.parsed())
    
    async def ClassifyMessage3(
        self,
        input: str
    ) -> types.Category:
      raw = await self.__runtime.call_function(
        "ClassifyMessage3",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.Category].coerce(raw.parsed())
    
    async def DescribeImage(
        self,
        img: baml_py.Image
    ) -> str:
      raw = await self.__runtime.call_function(
        "DescribeImage",
        {
          "img": img,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def DescribeImage2(
        self,
        classWithImage: types.ClassWithImage,img2: baml_py.Image
    ) -> str:
      raw = await self.__runtime.call_function(
        "DescribeImage2",
        {
          "classWithImage": classWithImage,"img2": img2,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def DescribeImage3(
        self,
        classWithImage: types.ClassWithImage,img2: baml_py.Image
    ) -> str:
      raw = await self.__runtime.call_function(
        "DescribeImage3",
        {
          "classWithImage": classWithImage,"img2": img2,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def DescribeImage4(
        self,
        classWithImage: types.ClassWithImage,img2: baml_py.Image
    ) -> str:
      raw = await self.__runtime.call_function(
        "DescribeImage4",
        {
          "classWithImage": classWithImage,"img2": img2,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def ExtractNames(
        self,
        input: str
    ) -> List[str]:
      raw = await self.__runtime.call_function(
        "ExtractNames",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[List[str]].coerce(raw.parsed())
    
    async def ExtractResume(
        self,
        resume: str
    ) -> types.Resume:
      raw = await self.__runtime.call_function(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.Resume].coerce(raw.parsed())
    
    async def ExtractResume2(
        self,
        resume: str
    ) -> types.Resume:
      raw = await self.__runtime.call_function(
        "ExtractResume2",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.Resume].coerce(raw.parsed())
    
    async def FnClassOptionalOutput2_V2(
        self,
        input: str
    ) -> Optional[types.ClassOptionalOutput2v2]:
      raw = await self.__runtime.call_function(
        "FnClassOptionalOutput2_V2",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[Optional[types.ClassOptionalOutput2v2]].coerce(raw.parsed())
    
    async def FnOutputClassWithEnum_V2(
        self,
        input: str
    ) -> types.TestClassWithEnum2:
      raw = await self.__runtime.call_function(
        "FnOutputClassWithEnum_V2",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.TestClassWithEnum2].coerce(raw.parsed())
    
    async def GetDataType(
        self,
        text: str
    ) -> types.RaysData:
      raw = await self.__runtime.call_function(
        "GetDataType",
        {
          "text": text,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.RaysData].coerce(raw.parsed())
    
    async def GetOrderInfo(
        self,
        email: types.Email
    ) -> types.OrderInfo:
      raw = await self.__runtime.call_function(
        "GetOrderInfo",
        {
          "email": email,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.OrderInfo].coerce(raw.parsed())
    
    async def GetQuery(
        self,
        query: str
    ) -> types.SearchParams:
      raw = await self.__runtime.call_function(
        "GetQuery",
        {
          "query": query,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.SearchParams].coerce(raw.parsed())
    
    async def OptionalTest_Function_V2(
        self,
        input: str
    ) -> List[Optional[types.OptionalTest_ReturnTypev2]]:
      raw = await self.__runtime.call_function(
        "OptionalTest_Function_V2",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[List[Optional[types.OptionalTest_ReturnTypev2]]].coerce(raw.parsed())
    
    async def V2_FnClassOptional(
        self,
        input: Optional[types.OptionalClassv2]
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_FnClassOptional",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_FnClassOptional2(
        self,
        input: types.ClassOptionalFieldsv2
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_FnClassOptional2",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_FnEnumListOutput(
        self,
        input: str
    ) -> List[types.EnumOutput]:
      raw = await self.__runtime.call_function(
        "V2_FnEnumListOutput",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[List[types.EnumOutput]].coerce(raw.parsed())
    
    async def V2_FnEnumOutput(
        self,
        input: str
    ) -> types.EnumOutput2:
      raw = await self.__runtime.call_function(
        "V2_FnEnumOutput",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.EnumOutput2].coerce(raw.parsed())
    
    async def V2_FnNamedArgsSingleStringOptional(
        self,
        myString: Optional[str]
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_FnNamedArgsSingleStringOptional",
        {
          "myString": myString,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_FnOutputBool(
        self,
        input: str
    ) -> bool:
      raw = await self.__runtime.call_function(
        "V2_FnOutputBool",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[bool].coerce(raw.parsed())
    
    async def V2_FnOutputClass(
        self,
        input: str
    ) -> types.TestOutputClass2:
      raw = await self.__runtime.call_function(
        "V2_FnOutputClass",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[types.TestOutputClass2].coerce(raw.parsed())
    
    async def V2_FnOutputClassList(
        self,
        input: str
    ) -> List[types.TestOutputClass]:
      raw = await self.__runtime.call_function(
        "V2_FnOutputClassList",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[List[types.TestOutputClass]].coerce(raw.parsed())
    
    async def V2_FnOutputStringList(
        self,
        input: str
    ) -> List[str]:
      raw = await self.__runtime.call_function(
        "V2_FnOutputStringList",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[List[str]].coerce(raw.parsed())
    
    async def V2_FnStringOptional(
        self,
        input: Optional[str]
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_FnStringOptional",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_FnTestNamedArgsSingleEnum(
        self,
        myArg: types.NamedArgsSingleEnum2
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_FnTestNamedArgsSingleEnum",
        {
          "myArg": myArg,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_TestFnNamedArgsSingleBool(
        self,
        myBool: bool
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_TestFnNamedArgsSingleBool",
        {
          "myBool": myBool,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_TestFnNamedArgsSingleClass(
        self,
        myArg: types.NamedArgsSingleClass2
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_TestFnNamedArgsSingleClass",
        {
          "myArg": myArg,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_TestFnNamedArgsSingleEnumList(
        self,
        myArg: List[types.NamedArgsSingleEnumList2]
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_TestFnNamedArgsSingleEnumList",
        {
          "myArg": myArg,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_TestFnNamedArgsSingleFloat(
        self,
        myFloat: float
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_TestFnNamedArgsSingleFloat",
        {
          "myFloat": myFloat,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_TestFnNamedArgsSingleInt(
        self,
        myInt: int
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_TestFnNamedArgsSingleInt",
        {
          "myInt": myInt,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_TestFnNamedArgsSingleString(
        self,
        myString: str
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_TestFnNamedArgsSingleString",
        {
          "myString": myString,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_TestFnNamedArgsSingleStringArray(
        self,
        myStringArray: List[str]
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_TestFnNamedArgsSingleStringArray",
        {
          "myStringArray": myStringArray,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_TestFnNamedArgsSingleStringList(
        self,
        myArg: List[types.NamedArgsSingleClassList2]
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_TestFnNamedArgsSingleStringList",
        {
          "myArg": myArg,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_TestFnNamedArgsSyntax(
        self,
        var: str,var_with_underscores: str
    ) -> str:
      raw = await self.__runtime.call_function(
        "V2_TestFnNamedArgsSyntax",
        {
          "var": var,"var_with_underscores": var_with_underscores,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[str].coerce(raw.parsed())
    
    async def V2_UnionTest_Function(
        self,
        input: Union[str, bool]
    ) -> Union[types.UnionTest_ReturnTypev2, types.DataType]:
      raw = await self.__runtime.call_function(
        "V2_UnionTest_Function",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[Union[types.UnionTest_ReturnTypev2, types.DataType]].coerce(raw.parsed())
    

class BamlStreamClient:
    __runtime: baml_py.BamlRuntimePy
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntimePy, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def ClassifyMessage(
        self,
        input: str
    ) -> baml_py.BamlStream[Optional[types.Category], types.Category]:
      raw = self.__runtime.stream_function(
        "ClassifyMessage",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[types.Category], types.Category](
        raw,
        BamlOutputWrapper[Optional[types.Category]].coerce,
        BamlOutputWrapper[types.Category].coerce,
        self.__ctx_manager.get(),
      )
    
    def ClassifyMessage2(
        self,
        input: str
    ) -> baml_py.BamlStream[Optional[types.Category], types.Category]:
      raw = self.__runtime.stream_function(
        "ClassifyMessage2",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[types.Category], types.Category](
        raw,
        BamlOutputWrapper[Optional[types.Category]].coerce,
        BamlOutputWrapper[types.Category].coerce,
        self.__ctx_manager.get(),
      )
    
    def ClassifyMessage3(
        self,
        input: str
    ) -> baml_py.BamlStream[Optional[types.Category], types.Category]:
      raw = self.__runtime.stream_function(
        "ClassifyMessage3",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[types.Category], types.Category](
        raw,
        BamlOutputWrapper[Optional[types.Category]].coerce,
        BamlOutputWrapper[types.Category].coerce,
        self.__ctx_manager.get(),
      )
    
    def DescribeImage(
        self,
        img: baml_py.Image
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "DescribeImage",
        {
          "img": img,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def DescribeImage2(
        self,
        classWithImage: types.ClassWithImage,img2: baml_py.Image
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "DescribeImage2",
        {
          "classWithImage": classWithImage,
          "img2": img2,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def DescribeImage3(
        self,
        classWithImage: types.ClassWithImage,img2: baml_py.Image
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "DescribeImage3",
        {
          "classWithImage": classWithImage,
          "img2": img2,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def DescribeImage4(
        self,
        classWithImage: types.ClassWithImage,img2: baml_py.Image
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "DescribeImage4",
        {
          "classWithImage": classWithImage,
          "img2": img2,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def ExtractNames(
        self,
        input: str
    ) -> baml_py.BamlStream[List[Optional[str]], List[str]]:
      raw = self.__runtime.stream_function(
        "ExtractNames",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[List[Optional[str]], List[str]](
        raw,
        BamlOutputWrapper[List[Optional[str]]].coerce,
        BamlOutputWrapper[List[str]].coerce,
        self.__ctx_manager.get(),
      )
    
    def ExtractResume(
        self,
        resume: str
    ) -> baml_py.BamlStream[partial_types.Resume, types.Resume]:
      raw = self.__runtime.stream_function(
        "ExtractResume",
        {
          "resume": resume,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[partial_types.Resume, types.Resume](
        raw,
        BamlOutputWrapper[partial_types.Resume].coerce,
        BamlOutputWrapper[types.Resume].coerce,
        self.__ctx_manager.get(),
      )
    
    def ExtractResume2(
        self,
        resume: str
    ) -> baml_py.BamlStream[partial_types.Resume, types.Resume]:
      raw = self.__runtime.stream_function(
        "ExtractResume2",
        {
          "resume": resume,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[partial_types.Resume, types.Resume](
        raw,
        BamlOutputWrapper[partial_types.Resume].coerce,
        BamlOutputWrapper[types.Resume].coerce,
        self.__ctx_manager.get(),
      )
    
    def FnClassOptionalOutput2_V2(
        self,
        input: str
    ) -> baml_py.BamlStream[partial_types.ClassOptionalOutput2v2, Optional[types.ClassOptionalOutput2v2]]:
      raw = self.__runtime.stream_function(
        "FnClassOptionalOutput2_V2",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[partial_types.ClassOptionalOutput2v2, Optional[types.ClassOptionalOutput2v2]](
        raw,
        BamlOutputWrapper[partial_types.ClassOptionalOutput2v2].coerce,
        BamlOutputWrapper[Optional[types.ClassOptionalOutput2v2]].coerce,
        self.__ctx_manager.get(),
      )
    
    def FnOutputClassWithEnum_V2(
        self,
        input: str
    ) -> baml_py.BamlStream[partial_types.TestClassWithEnum2, types.TestClassWithEnum2]:
      raw = self.__runtime.stream_function(
        "FnOutputClassWithEnum_V2",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[partial_types.TestClassWithEnum2, types.TestClassWithEnum2](
        raw,
        BamlOutputWrapper[partial_types.TestClassWithEnum2].coerce,
        BamlOutputWrapper[types.TestClassWithEnum2].coerce,
        self.__ctx_manager.get(),
      )
    
    def GetDataType(
        self,
        text: str
    ) -> baml_py.BamlStream[partial_types.RaysData, types.RaysData]:
      raw = self.__runtime.stream_function(
        "GetDataType",
        {
          "text": text,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[partial_types.RaysData, types.RaysData](
        raw,
        BamlOutputWrapper[partial_types.RaysData].coerce,
        BamlOutputWrapper[types.RaysData].coerce,
        self.__ctx_manager.get(),
      )
    
    def GetOrderInfo(
        self,
        email: types.Email
    ) -> baml_py.BamlStream[partial_types.OrderInfo, types.OrderInfo]:
      raw = self.__runtime.stream_function(
        "GetOrderInfo",
        {
          "email": email,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[partial_types.OrderInfo, types.OrderInfo](
        raw,
        BamlOutputWrapper[partial_types.OrderInfo].coerce,
        BamlOutputWrapper[types.OrderInfo].coerce,
        self.__ctx_manager.get(),
      )
    
    def GetQuery(
        self,
        query: str
    ) -> baml_py.BamlStream[partial_types.SearchParams, types.SearchParams]:
      raw = self.__runtime.stream_function(
        "GetQuery",
        {
          "query": query,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[partial_types.SearchParams, types.SearchParams](
        raw,
        BamlOutputWrapper[partial_types.SearchParams].coerce,
        BamlOutputWrapper[types.SearchParams].coerce,
        self.__ctx_manager.get(),
      )
    
    def OptionalTest_Function_V2(
        self,
        input: str
    ) -> baml_py.BamlStream[List[partial_types.OptionalTest_ReturnTypev2], List[Optional[types.OptionalTest_ReturnTypev2]]]:
      raw = self.__runtime.stream_function(
        "OptionalTest_Function_V2",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[List[partial_types.OptionalTest_ReturnTypev2], List[Optional[types.OptionalTest_ReturnTypev2]]](
        raw,
        BamlOutputWrapper[List[partial_types.OptionalTest_ReturnTypev2]].coerce,
        BamlOutputWrapper[List[Optional[types.OptionalTest_ReturnTypev2]]].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_FnClassOptional(
        self,
        input: Optional[types.OptionalClassv2]
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_FnClassOptional",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_FnClassOptional2(
        self,
        input: types.ClassOptionalFieldsv2
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_FnClassOptional2",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_FnEnumListOutput(
        self,
        input: str
    ) -> baml_py.BamlStream[List[Optional[types.EnumOutput]], List[types.EnumOutput]]:
      raw = self.__runtime.stream_function(
        "V2_FnEnumListOutput",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[List[Optional[types.EnumOutput]], List[types.EnumOutput]](
        raw,
        BamlOutputWrapper[List[Optional[types.EnumOutput]]].coerce,
        BamlOutputWrapper[List[types.EnumOutput]].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_FnEnumOutput(
        self,
        input: str
    ) -> baml_py.BamlStream[Optional[types.EnumOutput2], types.EnumOutput2]:
      raw = self.__runtime.stream_function(
        "V2_FnEnumOutput",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[types.EnumOutput2], types.EnumOutput2](
        raw,
        BamlOutputWrapper[Optional[types.EnumOutput2]].coerce,
        BamlOutputWrapper[types.EnumOutput2].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_FnNamedArgsSingleStringOptional(
        self,
        myString: Optional[str]
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_FnNamedArgsSingleStringOptional",
        {
          "myString": myString,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_FnOutputBool(
        self,
        input: str
    ) -> baml_py.BamlStream[Optional[bool], bool]:
      raw = self.__runtime.stream_function(
        "V2_FnOutputBool",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[bool], bool](
        raw,
        BamlOutputWrapper[Optional[bool]].coerce,
        BamlOutputWrapper[bool].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_FnOutputClass(
        self,
        input: str
    ) -> baml_py.BamlStream[partial_types.TestOutputClass2, types.TestOutputClass2]:
      raw = self.__runtime.stream_function(
        "V2_FnOutputClass",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[partial_types.TestOutputClass2, types.TestOutputClass2](
        raw,
        BamlOutputWrapper[partial_types.TestOutputClass2].coerce,
        BamlOutputWrapper[types.TestOutputClass2].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_FnOutputClassList(
        self,
        input: str
    ) -> baml_py.BamlStream[List[partial_types.TestOutputClass], List[types.TestOutputClass]]:
      raw = self.__runtime.stream_function(
        "V2_FnOutputClassList",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[List[partial_types.TestOutputClass], List[types.TestOutputClass]](
        raw,
        BamlOutputWrapper[List[partial_types.TestOutputClass]].coerce,
        BamlOutputWrapper[List[types.TestOutputClass]].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_FnOutputStringList(
        self,
        input: str
    ) -> baml_py.BamlStream[List[Optional[str]], List[str]]:
      raw = self.__runtime.stream_function(
        "V2_FnOutputStringList",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[List[Optional[str]], List[str]](
        raw,
        BamlOutputWrapper[List[Optional[str]]].coerce,
        BamlOutputWrapper[List[str]].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_FnStringOptional(
        self,
        input: Optional[str]
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_FnStringOptional",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_FnTestNamedArgsSingleEnum(
        self,
        myArg: types.NamedArgsSingleEnum2
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_FnTestNamedArgsSingleEnum",
        {
          "myArg": myArg,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_TestFnNamedArgsSingleBool(
        self,
        myBool: bool
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_TestFnNamedArgsSingleBool",
        {
          "myBool": myBool,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_TestFnNamedArgsSingleClass(
        self,
        myArg: types.NamedArgsSingleClass2
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_TestFnNamedArgsSingleClass",
        {
          "myArg": myArg,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_TestFnNamedArgsSingleEnumList(
        self,
        myArg: List[types.NamedArgsSingleEnumList2]
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_TestFnNamedArgsSingleEnumList",
        {
          "myArg": myArg,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_TestFnNamedArgsSingleFloat(
        self,
        myFloat: float
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_TestFnNamedArgsSingleFloat",
        {
          "myFloat": myFloat,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_TestFnNamedArgsSingleInt(
        self,
        myInt: int
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_TestFnNamedArgsSingleInt",
        {
          "myInt": myInt,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_TestFnNamedArgsSingleString(
        self,
        myString: str
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_TestFnNamedArgsSingleString",
        {
          "myString": myString,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_TestFnNamedArgsSingleStringArray(
        self,
        myStringArray: List[str]
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_TestFnNamedArgsSingleStringArray",
        {
          "myStringArray": myStringArray,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_TestFnNamedArgsSingleStringList(
        self,
        myArg: List[types.NamedArgsSingleClassList2]
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_TestFnNamedArgsSingleStringList",
        {
          "myArg": myArg,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_TestFnNamedArgsSyntax(
        self,
        var: str,var_with_underscores: str
    ) -> baml_py.BamlStream[Optional[str], str]:
      raw = self.__runtime.stream_function(
        "V2_TestFnNamedArgsSyntax",
        {
          "var": var,
          "var_with_underscores": var_with_underscores,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[str], str](
        raw,
        BamlOutputWrapper[Optional[str]].coerce,
        BamlOutputWrapper[str].coerce,
        self.__ctx_manager.get(),
      )
    
    def V2_UnionTest_Function(
        self,
        input: Union[str, bool]
    ) -> baml_py.BamlStream[Optional[Union[partial_types.UnionTest_ReturnTypev2, Optional[types.DataType]]], Union[types.UnionTest_ReturnTypev2, types.DataType]]:
      raw = self.__runtime.stream_function(
        "V2_UnionTest_Function",
        {
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[Optional[Union[partial_types.UnionTest_ReturnTypev2, Optional[types.DataType]]], Union[types.UnionTest_ReturnTypev2, types.DataType]](
        raw,
        BamlOutputWrapper[Optional[Union[partial_types.UnionTest_ReturnTypev2, Optional[types.DataType]]]].coerce,
        BamlOutputWrapper[Union[types.UnionTest_ReturnTypev2, types.DataType]].coerce,
        self.__ctx_manager.get(),
      )
    