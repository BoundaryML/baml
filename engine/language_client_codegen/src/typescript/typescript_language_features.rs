use crate::dir_writer::LanguageFeatures;
use baml_types::{BamlMediaType, TypeValue};

#[derive(Default)]
pub(super) struct TypescriptLanguageFeatures {}

impl LanguageFeatures for TypescriptLanguageFeatures {
    const CONTENT_PREFIX: &'static str = r#"
/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
        "#;
}

pub(super) trait ToTypescript {
    fn to_typescript(&self) -> String;
}

impl ToTypescript for TypeValue {
    fn to_typescript(&self) -> String {
        let var_name = &match self {
            TypeValue::Bool => "boolean",
            TypeValue::Float => "number",
            TypeValue::Int => "number",
            TypeValue::String => "string",
            TypeValue::Null => "null",
            TypeValue::Media(BamlMediaType::Image) => "Image",
            TypeValue::Media(BamlMediaType::Audio) => "Audio",
        };
        var_name.to_string()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_eslint_before_ts_nocheck() {
        let content = TypescriptLanguageFeatures::CONTENT_PREFIX;

        let re_generate_position = content
            .find("re-generate this code")
            .expect("Expected to find 're-generate this code' in the content");
        let eslint_position = content
            .find("/* eslint-disable */")
            .expect("Expected to find 'eslint-disable' in the content");
        let ts_nocheck_position = content
            .find("// @ts-nocheck")
            .expect("Expected to find '@ts-nocheck' in the content");

        assert!(
            eslint_position < ts_nocheck_position,
            "'eslint-disable' should appear before '@ts-nocheck'"
        );

        {
            assert!(
                re_generate_position < eslint_position,
                "'eslint-disable' should appear after 're-generate this code'"
            );
            let in_between =
                &content[re_generate_position + "re-generate this code".len()..eslint_position];
            assert!(
                !in_between.chars().any(|c| c.is_alphanumeric()),
                "'eslint-disable' should be the first linter directive in the TS content prefix"
            );
        }
    }
}
