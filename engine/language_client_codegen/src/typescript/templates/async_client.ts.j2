import { BamlRuntime, FunctionResult, BamlCtxManager, BamlStream, Image, ClientRegistry, BamlValidationError, createBamlValidationError } from "@boundaryml/baml"
import { 
  {%- for t in types %}{{ t }}{% if !loop.last %}, {% endif %}{% endfor -%} 
} from "./types"
import TypeBuilder from "./type_builder"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export type RecursivePartialNull<T> = T extends object
  ? {
      [P in keyof T]?: RecursivePartialNull<T[P]>;
    }
  : T | null;

export class BamlAsyncClient {
  private runtime: BamlRuntime
  private ctx_manager: BamlCtxManager
  private stream_client: BamlStreamClient

  constructor(runtime: BamlRuntime, ctx_manager: BamlCtxManager) {
    this.runtime = runtime
    this.ctx_manager = ctx_manager
    this.stream_client = new BamlStreamClient(runtime, ctx_manager)
  }

  get stream() {
    return this.stream_client
  }  

  {% for fn in funcs %}
  async {{ fn.name }}(
      {% for (name, optional, type) in fn.args -%}
      {{name}}{% if optional %}?{% endif %}: {{type}},
      {%- endfor %}
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Promise<{{fn.return_type}}> {
    try {
      const raw = await this.runtime.callFunction(
        "{{fn.name}}",
        {
          {% for (name, optional, type) in fn.args -%}
          "{{name}}": {{name}}{% if optional %}?? null{% endif %}{% if !loop.last %},{% endif %}
          {%- endfor %}
        },
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return raw.parsed() as {{fn.return_type}}
    } catch (error: any) {
      const bamlError = createBamlValidationError(error);
      if (bamlError instanceof BamlValidationError) {
        throw bamlError;
      } else {
        throw error;
      }
    }
  }
  {% endfor %}
}

class BamlStreamClient {
  constructor(private runtime: BamlRuntime, private ctx_manager: BamlCtxManager) {}

  {% for fn in funcs %}
  {{ fn.name }}(
      {% for (name, optional, type) in fn.args -%}
      {{name}}{% if optional %}?{% endif %}: {{type}},
      {%- endfor %}
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BamlStream<RecursivePartialNull<{{ fn.return_type }}>, {{ fn.return_type }}> {
    try {
      const raw = this.runtime.streamFunction(
        "{{fn.name}}",
        {
          {% for (name, optional, type) in fn.args -%}
          "{{name}}": {{name}}{% if optional %} ?? null{% endif %}{% if !loop.last %},{% endif %}
          {%- endfor %}
        },
        undefined,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      )
      return new BamlStream<RecursivePartialNull<{{ fn.return_type }}>, {{ fn.return_type }}>(
        raw,
        (a): a is RecursivePartialNull<{{ fn.return_type }}> => a,
        (a): a is {{ fn.return_type }} => a,
        this.ctx_manager.cloneContext(),
        __baml_options__?.tb?.__tb(),
      )
    } catch (error) {
      if (error instanceof Error) {
        const bamlError = createBamlValidationError(error);
        if (bamlError instanceof BamlValidationError) {
          throw bamlError;
        }
      }
      throw error;
    }
  }
  {% endfor %}
}

export const b = new BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)
