schema = {
    SOI ~ (value_expression_block | type_expression_block | template_declaration | type_alias | comment_block | raw_string_literal | empty_lines | CATCH_ALL)* ~ EOI
}

// ######################################
// Unified Block for Class and Enum
// ######################################
type_expression_keyword  = { ENUM_KEYWORD | CLASS_KEYWORD | identifier }
type_expression_block    = { type_expression_keyword ~ identifier ~ named_argument_list? ~ BLOCK_OPEN ~ type_expression_contents ~ BLOCK_CLOSE }
type_expression_contents = {
    (type_expression | block_attribute | comment_block | empty_lines | BLOCK_LEVEL_CATCH_ALL)*
}
type_expression          = {
    identifier ~ field_type_chain? ~ (NEWLINE? ~ (field_attribute | trailing_comment))* ~ NEWLINE?
}

field_operator       = { "|" | "&" }
field_type_chain     = { field_type_with_attr ~ (field_operator ~ field_type_with_attr)* }
field_type_with_attr = { field_type ~ (NEWLINE? ~ (field_attribute | trailing_comment))* }

// ######################################
// Unified Block for Function, Test, Client, Generator
// ######################################
value_expression_keyword  = { FUNCTION_KEYWORD | TEST_KEYWORD | CLIENT_KEYWORD | RETRY_POLICY_KEYWORD | GENERATOR_KEYWORD }
value_expression_block    = { value_expression_keyword ~ identifier ~ named_argument_list? ~ ARROW? ~ field_type? ~ SPACER_TEXT ~ BLOCK_OPEN ~ value_expression_contents ~ BLOCK_CLOSE }
value_expression_contents = {
    (value_expression | comment_block | empty_lines | BLOCK_LEVEL_CATCH_ALL)*
}
value_expression          = { identifier ~ expression? ~ (NEWLINE? ~ field_attribute)* ~ trailing_comment? }

// ######################################
ARROW = { SPACER_TEXT ~ "->" ~ SPACER_TEXT }

// ######################################
// Template Declaration
// ######################################
assignment           = { "=" }
template_declaration = { TEMPLATE_KEYWORD ~ identifier ~ assignment? ~ named_argument_list? ~ raw_string_literal }

colon          = { ":" }
named_argument = { identifier ~ ((":" ~ field_type) | colon)? }
// Be forgiving and allow trailing comma
named_argument_list = { openParan ~ SPACER_TEXT ~ named_argument? ~ ("," ~ SPACER_TEXT ~ named_argument)* ~ ","? ~ SPACER_TEXT ~ closeParan }

// ######################################
// Attributes
// ######################################
block_attribute = { "@@" ~ identifier ~ arguments_list? }
field_attribute = { "@" ~ identifier ~ arguments_list? }

// Pest is greedy, order is very important here.
field_type          = { (union | non_union) ~ optional_token? }
optional_token      = { "?" }
union               = { base_type_with_attr ~ (field_operator ~ base_type_with_attr)+ }
base_type_with_attr = { base_type ~ (NEWLINE? ~ field_attribute)* }
base_type           = { array_notation | map | identifier | group | tuple | parenthesized_type }

array_suffix   = { "[]" }
array_notation = { base_type_without_array ~ array_suffix+ }

map = { "map" ~ "<" ~ field_type ~ "," ~ field_type ~ ">" }

openParan  = { "(" }
closeParan = { ")" }
group      = { openParan ~ field_type ~ closeParan }
tuple      = { openParan ~ field_type ~ ("," ~ field_type)+ ~ closeParan }

base_type_without_array = { map | identifier | group | tuple }

non_union = { array_notation | map | identifier | group | tuple }

parenthesized_type = { openParan ~ field_type_with_attr ~ closeParan }

path_identifier =  { single_word ~ ("." ~ single_word)+ }
identifier      =  { path_identifier | single_word }
single_word     = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "-")* }

// ######################################
// Type Alias
// ######################################
type_alias = { TYPE_KEYWORD ~ identifier ~ base_type ~ (NEWLINE? ~ field_attribute)* }

// ######################################
// Arguments
// ######################################
arguments_list = { "(" ~ (NEWLINE?) ~ expression? ~ ("," ~ (NEWLINE?) ~ expression)? ~ (NEWLINE?) ~ ")" }

// ######################################
// Expressions & Functions
// ######################################
map_key   = { identifier | quoted_string_literal }
map_entry = { (comment_block | empty_lines)* ~ map_key ~ (expression | ENTRY_CATCH_ALL)? ~ trailing_comment? }

splitter         = _{ ("," ~ NEWLINE?) | NEWLINE }
map_expression   =  { "{" ~ empty_lines? ~ (map_entry ~ (splitter ~ map_entry)*)? ~ (comment_block | empty_lines)* ~ "}" }
array_expression =  { "[" ~ empty_lines? ~ ((expression | ARRAY_CATCH_ALL) ~ trailing_comment? ~ (splitter ~ (comment_block | empty_lines)* ~ (expression | ARRAY_CATCH_ALL) ~ trailing_comment?)*)? ~ (comment_block | empty_lines)* ~ "]" }
expression       =  { map_expression | array_expression | numeric_literal | string_literal | identifier }
ARRAY_CATCH_ALL  =  { !"]" ~ CATCH_ALL }
ENTRY_CATCH_ALL  =  { field_attribute | BLOCK_LEVEL_CATCH_ALL }
// ######################################
// Literals / Values
// ######################################
numeric_literal = @{ ("-")? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

// ######################################
// String literals. These behave specially in BAML.
// ######################################
banned_chars            = @{ "#" | "@" | "{" | "(" | "[" | "<" | "}" | ")" | "]" | ">" | "," | "'" | NEWLINE }
banned_start_chars      =  { WHITESPACE | banned_chars }
banned_end_chars        =  { WHITESPACE | banned_chars }
unquoted_string_literal =  { (!banned_start_chars ~ ANY) ~ (!banned_chars ~ ANY)* ~ (!banned_end_chars ~ ANY)* }
quoted_string_content   = @{ (!"\"" ~ !NEWLINE ~ ANY)* }
quoted_string_literal   = ${ "\"" ~ quoted_string_content ~ "\"" }

// TODO: Support comments in raw string literals
raw_string_literal_content_1 = @{ (!"\"#" ~ ANY)* }
raw_string_literal_content_2 = @{ (!"\"##" ~ ANY)* }
raw_string_literal_content_3 = @{ (!"\"###" ~ ANY)* }
raw_string_literal_content_4 = @{ (!"\"####" ~ ANY)* }
raw_string_literal_content_5 = @{ (!"\"#####" ~ ANY)* }

raw_string_start_5 = _{ (single_word)? ~ "#####\"" }
raw_string_start_4 = _{ (single_word)? ~ "####\"" }
raw_string_start_3 = _{ (single_word)? ~ "###\"" }
raw_string_start_2 = _{ (single_word)? ~ "##\"" }
raw_string_start_1 = _{ (single_word)? ~ "#\"" }

raw_string_literal                 =  {
    (raw_string_start_5 ~ raw_string_literal_content_5 ~ "\"#####")
  | (raw_string_start_4 ~ raw_string_literal_content_4 ~ "\"####")
  | (raw_string_start_3 ~ raw_string_literal_content_3 ~ "\"###")
  | (raw_string_start_2 ~ raw_string_literal_content_2 ~ "\"##")
  | (raw_string_start_1 ~ raw_string_literal_content_1 ~ "\"#")
}
unterminated_raw_string_literal    = ${
    (raw_string_start_5 ~ raw_string_literal_content_5)
  | (raw_string_start_4 ~ raw_string_literal_content_4)
  | (raw_string_start_3 ~ raw_string_literal_content_3)
  | (raw_string_start_2 ~ raw_string_literal_content_2)
  | (raw_string_start_1 ~ raw_string_literal_content_1)
}
unterminated_quoted_string_literal = ${ "\"" ~ quoted_string_content }
unterminated_string_literal        = ${ unterminated_raw_string_literal | unterminated_quoted_string_literal }
string_literal                     =  { raw_string_literal | quoted_string_literal | unquoted_string_literal | unterminated_string_literal }

// ######################################
// Comments and Documentation Comments
// ######################################
comment_block    = ${ ((block_comment | doc_comment | comment) ~ NEWLINE?)+ }
trailing_comment = ${ doc_comment | comment }
doc_comment      =  { WHITESPACE* ~ "///" ~ doc_content }
comment          =  { WHITESPACE* ~ (!"///") ~ "//" ~ doc_content }
block_content    = @{ (!"//}" ~ ANY)* }
block_comment    =  { WHITESPACE* ~ "{//" ~ block_content ~ "//}" }
doc_content      = @{ (!NEWLINE ~ ANY)* }

// ######################################
// Shared Building Blocks and Comments
// ######################################
WHITESPACE  = _{ " " | "\t" }
NEWLINE     = _{ "\n" | "\r\n" | "\r" }
empty_lines = @{ (WHITESPACE* ~ NEWLINE)+ }

// ######################################
// Utilities
// ######################################
SPACER_TEXT = { (comment_block | empty_lines)* }

// the any part is to not crash on comments next to an open block, see test `parse_comments_without_crasing_or_loosing_info`
BLOCK_OPEN  = { "{" }
BLOCK_CLOSE = { "}" }

BLOCK_LEVEL_CATCH_ALL = { !BLOCK_CLOSE ~ CATCH_ALL }
CATCH_ALL             = { (!NEWLINE ~ ANY)+ ~ NEWLINE? }

TYPE_KEYWORD         = { "type" }
ENUM_KEYWORD         = { "enum" }
CLASS_KEYWORD        = { "class" }
FUNCTION_KEYWORD     = { "function" }
TEMPLATE_KEYWORD     = { "template_string" | "string_template" }
TEST_KEYWORD         = { "test" }
CLIENT_KEYWORD       = { "client<llm>" | "client" }
GENERATOR_KEYWORD    = { "generator" }
RETRY_POLICY_KEYWORD = { "retry_policy" }
