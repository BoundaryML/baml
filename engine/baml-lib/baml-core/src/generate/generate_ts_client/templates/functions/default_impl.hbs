// Impl: {{name}}
// Client: {{client}}
// An implementation for {{function.name}}


const prompt_template = `{{{prompt}}}`;
const output_format = `{{{output_format}}}`;

const template_macros = [
{{#each template_macros}}
{
  name: "{{name}}",
  argNames: [
    {{#each args}}
    "{{name}}",
    {{/each}}
  ],
  argTypes: [
    {{#each args}}
    "{{type}}",
    {{/each}}
  ],
  template: `{{{template}}}`,
},
{{/each}}
]

const deserializer = new Deserializer<{{function.return_type}}>(schema, {
  $ref: '#/definitions/{{function.name}}_output'
});

{{function.name}}.registerImpl('{{name}}', async (
  {{function.params.name}}: {
    {{#each function.params.values as |v|}}{{v.name}}: {{v.type}}{{#unless @last}}, {{/unless}}{{/each}}
  }
): Promise<{{function.return_type}}> => {
    const result = await {{client}}.run_jinja_template(
      prompt_template,
      {{function.params.name}},
      output_format,
      template_macros,
    );

    return deserializer.coerce(result.generated);
  }
);
