# typed: false
require "baml"
require "sorbet-coerce"
require "sorbet-runtime"

require_relative "inlined"
require_relative "partial-types"
require_relative "types"

module Baml
  @instance = nil

  def self.Client
    if @instance.nil?
      @instance = BamlClient.new(runtime: Baml::Ffi::BamlRuntime.from_files("baml_src", Baml::Inlined::FILE_MAP, ENV))
    end
  
    @instance
  end

  class BamlClient
    extend T::Sig

    sig { returns(BamlStreamClient) }
    attr_reader :stream

    sig {params(runtime: Baml::Ffi::BamlRuntime).void}
    def initialize(runtime:)
      @runtime = runtime
      @ctx_manager = runtime.create_context_manager()
      @stream = BamlStreamClient.new(runtime: @runtime, ctx_manager: @ctx_manager)
    end

    sig {params(path: String).returns(BamlClient)}
    def self.from_directory(path)
      BamlClient.new(runtime: Baml::Ffi::BamlRuntime.from_directory(path, ENV))
    end

    {% for fn in funcs -%}
    sig {
      {% if fn.args.len() > 0 %}
      params(
        {% for (name, type) in fn.args -%}
        {{name}}: {{type}},
        {%- endfor %}
      ).returns({{ fn.return_type }})
      {% else %}
      returns({{ fn.return_type }})
      {% endif %}
    }
    def {{fn.name}}(
        {% for (name, _) in fn.args -%}
        {{name}}:{% if !loop.last %},{% endif %}
        {%- endfor %}
    )
      raw = @runtime.call_function(
        "{{fn.name}}",
        {
          {% for (name, _) in fn.args -%}
          "{{name}}" => {{name}},
          {%- endfor %}
        },
        @ctx_manager,
      )
      (raw.parsed_using_types(Baml::Types))
    end

    {% endfor %}

  end

  class BamlStreamClient
    extend T::Sig

    sig {params(runtime: Baml::Ffi::BamlRuntime, ctx_manager: Baml::Ffi::RuntimeContextManager).void}
    def initialize(runtime:, ctx_manager:)
      @runtime = runtime
      @ctx_manager = ctx_manager
    end

    {% for fn in funcs -%}
    sig {
      params(
        {% for (name, type) in fn.args -%}
        {{name}}: {{type}},
        {%- endfor %}
      ).returns(Baml::BamlStream[{{ fn.return_type }}])
    }
    def {{fn.name}}(
        {% for (name, _) in fn.args -%}
        {{name}}:{% if !loop.last %},{% endif %}
        {%- endfor %}
    )
      raw = @runtime.stream_function(
        "{{fn.name}}",
        {
          {% for (name, _) in fn.args -%}
          "{{name}}" => {{name}},
          {%- endfor %}
        },
        @ctx_manager,
      )
      Baml::BamlStream[{{fn.partial_return_type}}, {{fn.return_type}}].new(
        ffi_stream: raw,
        partial_coerce: TypeCoerce[{{fn.partial_return_type}}],
        final_coerce: TypeCoerce[{{fn.return_type}}],
        ctx_manager: @ctx_manager
      )
    end

    {% endfor %}
  end
end