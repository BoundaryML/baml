import typing
from baml_py.type_builder import FieldType, TypeBuilder as _TypeBuilder, ClassPropertyBuilder, EnumValueBuilder

class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          [{% for cls in classes %}"{{cls.name}}",{% endfor %}]
        ), enums=set(
          [{% for enum in enums %}"{{enum.name}}",{% endfor %}]
        ))

{%- for cls in classes %}{% if cls.dynamic %}

    @property
    def {{cls.name}}(self) -> "{{cls.name}}Builder":
        return {{cls.name}}Builder(self)
{%- endif %}{% endfor %}

{%- for enum in enums %}{% if enum.dynamic %}

    @property
    def {{enum.name}}(self) -> "{{enum.name}}Builder":
        return {{enum.name}}Builder(self)
{% endif %}{% endfor %}

{% for cls in classes %}{% if cls.dynamic -%}
class {{cls.name}}Builder:
    def __init__(self, tb: _TypeBuilder):
        self.__bldr = tb._tb.class_("{{cls.name}}")
        self.__properties = set([{% for (name, _) in cls.fields %} "{{name}}", {% endfor %}])
        self.__props = {{cls.name}}Properties(self)

    def field(self) -> FieldType:
        return self.__bldr.field()

    @property
    def props(self) -> "{{cls.name}}Properties":
        return self.__props
    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyBuilder]]:
        return [(name, self.__bldr.property(name)) for name in self.__properties]

    def add_property(self, name: str, type: FieldType) -> ClassPropertyBuilder:
        if name in self.__properties:
            raise ValueError(f"Property {name} already exists.")
        return ClassPropertyBuilder(self.__bldr.property(name).type(type))

class {{cls.name}}Properties:
    def __init__(self, class_builder: "{{cls.name}}Builder"):
        self.__cls_builder = class_builder

    {%- for (name, type) in cls.fields %}

    @property
    def {{name}}(self) -> ClassPropertyBuilder:
        return self.__cls_builder.__bldr.property("{{name}}")
    {%- endfor %}

    def __getattr__(self, name: str) -> ClassPropertyBuilder:
        if name not in self.__cls_builder.__properties:
            raise AttributeError(f"Property {name} not found.")
        return ClassPropertyBuilder(self.__cls_builder.__bldr.property(name))
{%- endif %}{% endfor %}

{% for enum in enums %}{% if enum.dynamic %}
class {{enum.name}}Builder:
    def __init__(self, tb: _TypeBuilder):
        self.__bldr = tb._tb.enum("{{enum.name}}")
        self.__values = set([{% for value in enum.values %} "{{value}}", {% endfor %}])
        self.__vals = {{enum.name}}Values(self)

    def field(self) -> FieldType:
        return self.__bldr.field()

    @property
    def values(self) -> "{{enum.name}}Values":
        return self.__vals

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueBuilder]]:
        return [(name, self.__bldr.value(name)) for name in self.__values]

    def add_value(self, name: str) -> EnumValueBuilder:
        if name in self.__values:
            raise ValueError(f"Value {name} already exists.")
        self.__values.add(name)
        return self.__bldr.value(name)

class {{enum.name}}Values:
    def __init__(self, enum_builder: "{{enum.name}}Builder"):
        self.__enum_builder = enum_builder

    {%- for value in enum.values %}

    @property
    def {{value}}(self) -> EnumValueBuilder:
        return self.__enum_builder.__bldr.value("{{value}}")
    {%- endfor %}

    def __getattr__(self, name: str) -> EnumValueBuilder:
        if name not in self.__enum_builder.__values:
            raise AttributeError(f"Value {name} not found.")
        return self.__enum_builder.__bldr.value(name)
{%- endif %}{% endfor %}

__all__ = ["TypeBuilder"]
