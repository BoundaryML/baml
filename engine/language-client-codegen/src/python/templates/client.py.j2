from typing import Any, Generic, List, Optional, TypeVar, Union
import pprint

import baml_py
from pydantic import BaseModel, ValidationError

from . import partial_types, types

OutputType = TypeVar('OutputType')

class BamlOutputWrapper(BaseModel, Generic[OutputType]):
    wrapped: OutputType
    
    @classmethod
    def coerce(cls, parsed: Any) -> OutputType:
      try:
        return cls.model_validate(obj={'wrapped': parsed}).wrapped
      except ValidationError as e:
        {# TODO(sam): can I surface {{ fn.name }} here? #}
        raise TypeError(
          "Internal BAML error while casting output type:\n{}".format(
            pprint.pformat(parsed)
          )
        ) from e

class BamlClient:
    __runtime: baml_py.BamlRuntimeFfi
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"

    def __init__(self, runtime: baml_py.BamlRuntimeFfi, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager)

    @property
    def stream(self):
      return self.__stream_client

    {% for fn in funcs %}
    async def {{ fn.name }}(
        self,
        {% for (name, type) in fn.args -%}
        {{name}}: {{type}}{% if !loop.last %},{% endif %}
        {%- endfor %}
    ) -> {{fn.return_type}}:
      raw = await self.__runtime.call_function(
        "{{fn.name}}",
        {
          {% for (name, _) in fn.args -%}
          "{{name}}": {{name}},
          {%- endfor %}
        },
        self.__ctx_manager.get(),
      )
      return BamlOutputWrapper[{{ fn.return_type }}].coerce(raw.parsed())
    {% endfor %}

class BamlStreamClient:
    __runtime: baml_py.BamlRuntimeFfi
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntimeFfi, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    {% for fn in funcs %}
    def {{ fn.name }}(
        self,
        {% for (name, type) in fn.args -%}
        {{name}}: {{type}}{% if !loop.last %},{% endif %}
        {%- endfor %}
    ) -> baml_py.BamlStream[{{ fn.partial_return_type }}, {{ fn.return_type }}]:
      raw = self.__runtime.stream_function(
        "{{fn.name}}",
        {
          {%- for (name, _) in fn.args %}
          "{{name}}": {{name}},
          {%- endfor %}
        },
        None,
        self.__ctx_manager.get(),
      )
      return baml_py.BamlStream[{{ fn.partial_return_type }}, {{ fn.return_type }}](
        raw,
        BamlOutputWrapper[{{ fn.partial_return_type }}].coerce,
        BamlOutputWrapper[{{ fn.return_type }}].coerce,
        self.__ctx_manager.get(),
      )
    {% endfor %}