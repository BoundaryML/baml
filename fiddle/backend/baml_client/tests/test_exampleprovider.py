# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..__do_not_import.generated_baml_client import baml
from ..baml_types import IExampleProvider, IExampleProviderStream, LinterOutput
from baml_lib._impl.deserializer import Deserializer
from json import dumps
from pytest_baml.ipc_channel import BaseIPCChannel
from typing import Any


@baml.ExampleProvider.test(stream=True)
async def test_test1(ExampleProviderImpl: IExampleProviderStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("\n\nclass Email {\n  subject string\n  body string\n}\n\nclass OrderInfo {\n  id string?\n  @alias(\"order_id\")\n  @description(\"The id of the order\")\n  date string?\n  @description(\"The date the order was placed in ISO8601 format\")\n  product_name string?\n  @description(\"The name of the first product listed\")\n  cost float?\n  @description(\"The cost, in dollars, without currency symbols\")\n}\n\nfunction GetOrderInfo {\n  input Email\n  output OrderInfo\n  default_impl level1\n}\n\n\nimpl<llm, GetOrderInfo> level1 {\n  client GPT4\n  prompt #\"\n    Given the email below: fe er  \n\n    Email Subject: {#input.subject}\n    Email Body: {#input.body}\n\n    Extract this info from the email in JSON format:\n    {#print_type(output)}\n\n    Make sure the cost is in euros\n\n    JSON:\n  \"#\n}\n")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with ExampleProviderImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

