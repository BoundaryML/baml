#!/usr/bin/env /bin/sh

set -eu

show_help() {
  cat <<EOF
Usage: build [options]

Options:
    --help      Display this help message and exit.
    --watch     Watch dependencies and rebuild on demand.
    --test      In addition to build, run tests
EOF
}

_help_mode=0
_watch_mode=0
_test_mode=0

while [ $# -gt 0 ]; do
    case "$1" in
        --help)
            _help_mode=1
            shift
            ;;
        --watch)
            _watch_mode=1
            shift
            ;;
        --test)
            _test_mode=1
            shift
            ;;
        --) # End of all options
            shift
            break
            ;;
        *) # No more options
            break
            ;;
    esac
done

if [ "$_help_mode" -eq 1 ]; then
    show_help
    exit 0
fi

# Display the status of flags
if [ "$_watch_mode" -eq 1 ]; then
    echo "Interactive mode is enabled."
else
    echo "Interactive mode is not enabled."
fi

if [ "$_test_mode" -eq 1 ]; then
    echo "Testing is enabled."
else
    echo "Testing is not enabled."
fi

cd "$1"
_repo_root="$(git rev-parse --show-toplevel)"
_path="$(pwd | sed "s|^${_repo_root}||")"
echo "Building in REPO${_path} (cwd: $(pwd))"

case "$_path" in

  /engine/language_client_typescript | /engine/language_client_typescript/* )
    command="pnpm build:debug; date"
    command="${command} && BAML_LOG=debug node cli.js generate --from ../../integ-tests/baml_src --to integ-tests-ts-v2"
    command="${command} && BAML_LOG=debug infisical run -- pnpm ts-node test.ts"

    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext rs,ts,json,j2,hb,hbs,toml,baml,rb \
        --watch "${_repo_root}/engine" \
        --ignore 'target' \
        --ignore 'index.d.ts' \
        --ignore 'index.js' \
        --ignore 'dist' \
        --ignore 'tmp' \
        --exec "${command}"
    else
      eval "${command}"
    fi
    ;;

  /engine/language_client_ruby | /engine/language_client_ruby/* )
    #command="rake compile; date"
    command="cargo build"

    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext rs,hb,hbs,toml,baml,rb \
        --watch "${_repo_root}/engine" \
        --ignore 'target' \
        --ignore 'tmp' \
        --exec "${command}"
    else
      eval "${command}"
    fi
    ;;

  /engine/baml-core-ffi | /engine/baml-core-ffi/* )
    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --verbose \
        --ext js,ts \
        --ignore index.js \
        --ignore index.d.ts \
        --exec 'yarn build; date'
    else
      yarn build
      date
    fi
    ;;

  # Subdirectories of engine must be matched before this line
  /engine/baml-runtime | /engine/baml-runtime/* )
    if [ "$_test_mode" -eq 1 ]; then
      #command="wasm-pack test --chrome . --features=wasm"
      #command="wasm-pack test --node . --features=wasm"
      command="cargo test --features=no_wasm,internal internal --verbose -- --nocapture"
    else
      command="cargo build --features=wasm --target=wasm32-unknown-unknown"
    fi
    #command="cargo test --features=no_wasm"

    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext rs,hb,hbs,j2,toml,baml \
        --watch "${_repo_root}/engine" \
        --ignore 'target' \
        --exec "${command}"
    else
      eval "${command}"
    fi
    ;;

  # Subdirectories of engine must be matched before this line
  /engine | /engine/* )
    command=""
    if [ "$_test_mode" -eq 1 ]; then
      command="cargo test ${command} jsonish::parser"
    else
      command="cargo build ${command}"
    fi

    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext rs,hb,hbs,j2,toml,baml \
        --watch "${_repo_root}/engine" \
        --ignore 'target' \
        --exec "${command}"
    else
      eval "${command}"
    fi
    ;;

  /clients/python | /clients/python/* )
    command="env -u CONDA_PREFIX poetry run maturin develop --manifest-path ${_repo_root}/clients/python-ffi/Cargo.toml"
    #command="${command} && poetry run mypy ."
    #command="${command} && poetry run ruff check"
    command="${command} && poetry run ruff format"
    command="${command} && poetry run -- python -m baml_core.jinja.render_prompt"
    if [ "$_test_mode" -eq 1 ]; then
      command="${command} && poetry run -- pytest baml_core"
    fi
    command="${command}; date"
    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext py,pyi,rs \
        --watch "${_repo_root}/engine/baml-lib/jinja" \
        --watch "${_repo_root}/clients/python-ffi" \
        --watch . \
        --exec "${command}"
    else
      eval "${command}"
      date
    fi
    ;;

  /clients/ts | /clients/ts/* )
    pnpm link "${_repo_root}/engine/baml-core-ffi"
    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --verbose \
        --ext js,ts \
        --ignore '**/dist' \
        --ignore '**/node_modules' \
        --exec 'pnpm build; date'
    else
      pnpm build
      date
    fi
    ;;

  /integ-tests2/python | /integ-tests2/python/* )
    command="env -u CONDA_PREFIX poetry run maturin develop --manifest-path ${_repo_root}/engine/language_client_python/Cargo.toml"
    #command="${command} && poetry run mypy ."
    #command="${command} && poetry run ruff check"
    #command="${command} && poetry run ruff format"
    command="${command} && poetry run baml-cli generate --from ${_repo_root}/integ-tests2/baml_src --to ${_repo_root}/integ-tests2/python"
    #command="${command} && poetry run baml-cli generate --from /home/sam/repos/baml-examples/nextjs-starter-v1/baml_src --to /home/sam/baml/integ-tests/python_v3"
    #command="${command} && BAML_LOG=debug,baml_runtime=off infisical run poetry run python main.py"
    # command="${command} && BAML_LOG=debug infisical run poetry run python main.py"
    if [ "$_test_mode" -eq 1 ]; then
      command="${command} && poetry run -- pytest baml_core"
    fi
    command="${command}; date"
    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext py,pyi,rs,j2,toml \
        --watch "${_repo_root}/engine" \
        --watch "${_repo_root}/clients/python-ffi" \
        --watch . \
        --ignore baml_client \
        --exec "${command}"
    else
      eval "${command}"
      date
    fi
    ;;

  /integ-tests/python | /integ-tests/python/* )
    command="env -u CONDA_PREFIX poetry run maturin develop --manifest-path ${_repo_root}/engine/language_client_python/Cargo.toml"
    command="${command} && poetry run baml-cli generate --from ${_repo_root}/integ-tests/baml_src"
    if [ "$_test_mode" -eq 1 ]; then
      command="${command} && BAML_LOG=debug infisical run --env=test -- poetry run pytest app/test_functions.py::test_streaming_claude"
    fi
    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext py,pyi,rs,j2,toml \
        --watch "${_repo_root}/engine" \
        --watch . \
        --ignore baml_client \
        --exec "${command}"
    else
      eval "${command}"
      date
    fi
    ;;

  /integ-tests/typescript | /integ-tests/typescript/* )
    command="env -C ${_repo_root}/engine/language_client_typescript -- pnpm build:debug"
    command="${command} && pnpm baml-cli generate --from ${_repo_root}/integ-tests/baml_src"
    if [ "$_test_mode" -eq 1 ]; then
      command="${command} && BAML_LOG=debug infisical run --env=test -- poetry run pytest app/test_functions.py::test_streaming_claude"
    fi
    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext py,pyi,rs,j2,toml \
        --watch "${_repo_root}/engine" \
        --watch . \
        --ignore baml_client \
        --exec "${command}"
    else
      eval "${command}"
      date
    fi
    ;;

  /typescript/codemirror-lang-baml | /typescript/codemirror-lang-baml/* )
    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext grammar,js,ts,tsx,json \
        --ignore '**/dist' \
        --exec 'pnpm prepare; date'
    else
      pnpm prepare
      date
    fi
    ;;

  /typescript | /typescript/* )
    # This also consume schanges to baml-schema-wasm
    if [ "$_watch_mode" -eq 1 ]; then
      # nodemon config in typescript/nodemon.json
      npx nodemon \
        --ext js,ts,tsx,rs,hb,hbs,toml \
        --watch "${_repo_root}/engine" \
        --watch "${_repo_root}/engine/jinja" \
        --watch "${_repo_root}/typescript" \
        --ignore '.next/**' \
        --ignore 'dist/**' \
        --ignore 'node_modules/**' \
        --ignore 'out/**' \
        --ignore 'baml-schema-wasm/web/**' \
        --ignore 'baml-schema-wasm/nodejs/**' \
        --exec 'pnpm build; date'
    else
      pnpm build
      date
    fi
    ;;

  *)
    echo "Nothing to build in repo root"
    ;;

esac

