#!/usr/bin/env /bin/sh

set -eu

show_help() {
  cat <<EOF
Usage: build [options]

Options:
    --help      Display this help message and exit.
    --watch     Watch dependencies and rebuild on demand.
    --test      In addition to build, run tests
EOF
}

_help_mode=0
_watch_mode=0
_test_mode=0

while [ $# -gt 0 ]; do
    case "$1" in
        --help)
            _help_mode=1
            shift
            ;;
        --watch)
            _watch_mode=1
            shift
            ;;
        --test)
            _test_mode=1
            shift
            ;;
        --) # End of all options
            shift
            break
            ;;
        *) # No more options
            break
            ;;
    esac
done

if [ "$_help_mode" -eq 1 ]; then
    show_help
    exit 0
fi

# Display the status of flags
if [ "$_watch_mode" -eq 1 ]; then
    echo "Interactive mode is enabled."
else
    echo "Interactive mode is not enabled."
fi

if [ "$_test_mode" -eq 1 ]; then
    echo "Testing is enabled."
else
    echo "Testing is not enabled."
fi

cd "$1"
_repo_root="$(git rev-parse --show-toplevel)"
_path="$(pwd | sed "s|^${_repo_root}||")"
echo "Building in REPO${_path} (cwd: $(pwd))"

case "$_path" in

  /engine/language_client_typescript | /engine/language_client_typescript/* )
    command="pnpm build:debug; date"
    command="${command} && BAML_LOG=debug node cli.js generate --from ../../integ-tests/baml_src --to integ-tests-ts-v2"
    command="${command} && BAML_LOG=debug infisical run -- pnpm ts-node test.ts"

    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext rs,ts,json,j2,hb,hbs,toml,baml,rb \
        --watch "${_repo_root}/engine" \
        --ignore 'target' \
        --ignore 'index.d.ts' \
        --ignore 'index.js' \
        --ignore 'dist' \
        --ignore 'tmp' \
        --exec "${command}"
    else
      eval "${command}"
    fi
    ;;

  /engine/language_client_ruby | /engine/language_client_ruby/* )
    command="RB_SYS_CARGO_PROFILE=dev2 rake compile; date"

    if [ "$_test_mode" -eq 1 ]; then
      #command="wasm-pack test --chrome . --features=wasm"
      #command="wasm-pack test --node . --features=wasm"
      command="${command} && rake test"
    fi

    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext rs,j2,toml,baml,rb,gemspec,Gemfile \
        --watch "${_repo_root}/engine" \
        --ignore 'target' \
        --ignore 'tmp' \
        --exec "${command}"
    else
      eval "${command}"
    fi
    ;;

  /engine/baml-schema-wasm | /engine/baml-schema-wasm/* )
    command="cargo build --target=wasm32-unknown-unknown"

    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext rs,toml \
        --watch "${_repo_root}/engine" \
        --ignore 'target' \
        --ignore 'tmp' \
        --exec "${command}"
    else
      eval "${command}"
      date
    fi
    ;;

  # Subdirectories of engine must be matched before this line
  /engine/baml-runtime | /engine/baml-runtime/* )
    if [ "$_test_mode" -eq 1 ]; then
      #command="wasm-pack test --chrome . --features=wasm"
      #command="wasm-pack test --node . --features=wasm"
      command="cargo test --features=no_wasm,internal internal --verbose -- --nocapture"
    else
      command="cargo build --features=wasm --target=wasm32-unknown-unknown"
      command="cargo build"
    fi
    #command="cargo test --features=no_wasm"

    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext rs,hb,hbs,j2,toml,baml \
        --watch "${_repo_root}/engine" \
        --ignore 'target' \
        --exec "${command}"
    else
      eval "${command}"
    fi
    ;;

  # Subdirectories of engine must be matched before this line
  /engine | /engine/* )
    command=""
    if [ "$_test_mode" -eq 1 ]; then
      command="cargo test ${command}"
    else
      command="cargo build ${command}"
    fi

    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext rs,hb,hbs,j2,toml,baml \
        --watch "${_repo_root}/engine" \
        --ignore 'target/**' \
        --exec "${command}"
    else
      eval "${command}"
    fi
    ;;

  /integ-tests/python | /integ-tests/python/* )
    command="true"
    command="env -u CONDA_PREFIX poetry run maturin develop --manifest-path ${_repo_root}/engine/language_client_python/Cargo.toml"
    command="${command} && poetry run baml-cli generate --from ${_repo_root}/integ-tests/baml_src"
    if [ "$_test_mode" -eq 1 ]; then
      #command="${command} && BAML_LOG=trace infisical run --env=test -- poetry run python baml_example_tracing.py"
      #command="${command} && BAML_LOG=trace infisical run --env=test -- poetry run pytest -s tests/test_functions.py::test_should_work_with_image_file"
      command="${command} && BAML_LOG=trace infisical run --env=test -- poetry run pytest"
    fi
    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext py,pyi,rs,j2,toml,baml \
        --watch "${_repo_root}/engine" \
        --watch . \
        --ignore 'baml_client/**' \
        --ignore 'target/**' \
        --ignore .pytest_cache \
        --exec "${command}"
    else
      eval "${command}"
      date
    fi
    ;;

  /integ-tests/typescript | /integ-tests/typescript/* )
    #BAML_LOG="baml_runtime::tracing=trace,baml_runtime::types::context_manager=debug,baml_runtime=debug"
    # BAML_LOG="baml_runtime=debug"
    command="(cd ${_repo_root}/engine/language_client_typescript && pnpm build:debug)"
    command="${command} && pnpm baml-cli generate --from ${_repo_root}/integ-tests/baml_src"
    if [ "$_test_mode" -eq 1 ]; then
      #command="${command} && pnpm integ-tests"
      command="${command} && BAML_LOG=${BAML_LOG}  infisical run -- pnpm test tests/integ-tests.test.ts"
    fi
    if [ "$_watch_mode" -eq 1 ]; then
        #--verbose \
      npx nodemon \
        --delay 1.5 \
        --ext py,pyi,rs,j2,toml,test.ts \
        --watch "${_repo_root}/engine" \
        --watch . \
        --ignore baml_client/** \
        --ignore dist/** \
        --ignore target/** \
        --ignore node_modules/** \
        --ignore *.d.ts \
        --exec "${command}"
    else
      eval "${command}"
      date
    fi
    ;;

  /integ-tests/ruby | /integ-tests/ruby/* )
    command="rake generate"
    if [ "$_test_mode" -eq 1 ]; then
      command="${command} && infisical run --env=dev -- rake test"
    fi
    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext bundle,rb \
        --watch "${_repo_root}/engine/language_client_ruby/lib/" \
        --watch . \
        --ignore baml_client \
        --exec "${command}"
    else
      eval "${command}"
      date
    fi
    ;;

  /typescript/codemirror-lang-baml | /typescript/codemirror-lang-baml/* )
    if [ "$_watch_mode" -eq 1 ]; then
      npx nodemon \
        --ext grammar,js,ts,tsx,json \
        --ignore '**/dist' \
        --exec 'pnpm prepare; date'
    else
      pnpm prepare
      date
    fi
    ;;

  /typescript | /typescript/* )
    # This also consume schanges to baml-schema-wasm
    if [ "$_watch_mode" -eq 1 ]; then
      # nodemon config in typescript/nodemon.json
      npx nodemon \
        --ext js,ts,tsx,rs,hb,hbs,toml,html \
        --watch "${_repo_root}/engine" \
        --watch "${_repo_root}/engine/jinja" \
        --watch "${_repo_root}/typescript" \
        --ignore '.next/**' \
        --ignore 'dist/**' \
        --ignore 'node_modules/**' \
        --ignore 'out/**' \
        --ignore 'baml-schema-wasm/web/**' \
        --ignore 'baml-schema-wasm/nodejs/**' \
        --exec 'pnpm build; date'
    else
      pnpm build
      date
    fi
    ;;

  *)
    echo "Nothing to build in repo root"
    ;;

esac

