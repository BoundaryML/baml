#!/usr/bin/env /bin/sh

# Usage: bump-version
#
# Bumps the version of the project.
# After you merge that in, manually set the release.

set -eu

show_help() {
  cat <<EOF
Usage: bump-version [options]

Options:
    --help         Display this help message.
    --typescript   Bump patch for typescript
    --python       Bump patch for python
    --ruby         Bump patch for ruby
    --vscode       Bump patch for vscode
    --all          Bump all versions [default]
EOF
}

ensure_preconditions() {
    # Ensure bump2version is installed
    if ! command -v pipx > /dev/null; then
        echo "Error: pipx is not installed."
        exit 1
    fi

    # Ensure git cliff is available
    if ! git cliff -h > /dev/null 2>&1; then
        echo "Error: git-cliff is not installed or not working. Please install it using 'cargo install git-cliff'."
        exit 1
    fi
}

bump2version() {
    pipx run bump2version "$@"
}

_help_mode=0
_ts_mode=0
_python_mode=0
_ruby_mode=0
_vscode_mode=0
_all_mode=0

while [ $# -gt 0 ]; do
    case "$1" in
        --help)
            _help_mode=1
            shift
            ;;
        --ts)
            _ts_mode=1
            shift
            ;;
        --python)
            _python_mode=1
            shift
            ;;
        --ruby)
            _ruby_mode=1
            shift
            ;;
        --vscode)
            _vscode_mode=1
            shift
            ;;
        --all)
            _all_mode=1
            shift
            ;;
        --) # End of all options
            shift
            break
            ;;
        *) # No more options
            break
            ;;
    esac
done

if [ "$_help_mode" -eq 1 ]; then
    show_help
    exit 0
fi

ensure_preconditions

# Ensure only one mode is enabled
if [ "$((_ts_mode + _python_mode + _ruby_mode + _vscode_mode + _all_mode))" -gt 1 ]; then
    echo "Error: Only one mode can be enabled."
    exit 1
fi

# Default to all mode
if [ "$((_ts_mode + _python_mode + _ruby_mode + _vscode_mode + _all_mode))" -eq 0 ]; then
    _all_mode=1
fi

_repo_root="$(git rev-parse --show-toplevel)"
cd "${_repo_root}"
git pull --tags


# Ensure clean git status
# if ! git diff --quiet; then
#     echo "Error: Git status is not clean. Please commit or stash your changes."
#     exit 1
# fi

PRE_BUMP_VERSION=$(grep "current_version =" tools/versions/engine.cfg | awk '{print $3}')

CODE_GEN_CHANGES=$(git diff ${PRE_BUMP_VERSION} -- 'engine/language_client_codegen/src' | grep -c '^diff --git')

if [ "$CODE_GEN_CHANGES" -gt 0 ]; then
    version_bump="minor"
    echo "Code generation changes detected since ${PRE_BUMP_VERSION}. Recommending a \033[33mminor\033[0m version bump."
else
    version_bump="patch"
    echo "No code generation changes detected since ${PRE_BUMP_VERSION}. Recommending a \033[32mpatch\033[0m version bump."
fi

read -p $'Please confirm the version bump type (\033[33mminor\033[0m / \033[32mpatch\033[0m): ' user_confirmation
if [[ "$user_confirmation" != "$version_bump" ]]; then
    echo "\033[31mWarning: Confirmation does not match the recommended version bump type.\033[0m"
    read -p "Are you sure you want to proceed with the different version bump type? Type 'yes' to confirm: " double_check
    if [[ "$double_check" != "yes" ]]; then
        echo "\033[31mError: Confirmation does not match the recommended version bump type.\033[0m"
        exit 1
    fi
fi


cd "${_repo_root}/tools"
if [ "$_all_mode" -eq 1 ]; then
  bump2version --config-file ./versions/engine.cfg $version_bump --allow-dirty
  bump2version --config-file ./versions/python.cfg $version_bump --allow-dirty
  bump2version --config-file ./versions/typescript.cfg $version_bump --allow-dirty
  bump2version --config-file ./versions/ruby.cfg $version_bump --allow-dirty
  bump2version --config-file ./versions/vscode.cfg $version_bump --allow-dirty
  bump2version --config-file ./versions/integ-tests.cfg $version_bump --allow-dirty
elif [ "$_ts_mode" -eq 1 ]; then
  bump2version --config-file ./versions/typescript.cfg patch
elif [ "$_python_mode" -eq 1 ]; then
  bump2version --config-file ./versions/python.cfg patch
elif [ "$_ruby_mode" -eq 1 ]; then
  bump2version --config-file ./versions/ruby.cfg patch
elif [ "$_vscode_mode" -eq 1 ]; then
  bump2version --config-file ./versions/vscode.cfg patch
fi

cd "${_repo_root}"
NEW_VERSION=$(grep "current_version =" tools/versions/engine.cfg | awk '{print $3}')

_branch_name="bump-version-$NEW_VERSION"

# If the branch already exists, delete it with user confirmation
if git show-ref --verify --quiet "refs/heads/$_branch_name"; then
    read -p "Branch $_branch_name already exists. Do you want to delete it? Type 'yes' to confirm: " delete_confirmation
    if [[ "$delete_confirmation" != "yes" ]]; then
        echo "Exiting without creating a new branch."
        exit 1
    fi
    git branch -D "$_branch_name"
fi

git checkout -b "$_branch_name"
git add .
git commit -m "Bump version to $NEW_VERSION"

# Generate the changelog
git cliff --tag $NEW_VERSION -u --prepend CHANGELOG.md
echo "Version bumped to $NEW_VERSION successfully! Please update CHANGELOG.md."

# Ask the user to confirm CHANGELOG.md update
while true; do
    read -p "Have you updated CHANGELOG.md? Type 'yes' to confirm: " changelog_confirmation
    if [[ "$changelog_confirmation" == "yes" ]]; then
        if grep -q "### UNMATCHED" CHANGELOG.md; then
            echo "### UNMATCHED section found in CHANGELOG.md. Please remove it before proceeding."
        else
            break
        fi
    else
        echo "Please update CHANGELOG.md before proceeding."
    fi
done

git add CHANGELOG.md
git commit --amend --no-edit

# Now run the build scripts for python and typescript integ tests
cd "${_repo_root}/integ-tests/typescript"
pnpm build
pnpm generate

cd "${_repo_root}/integ-tests/python"
env -u CONDA_PREFIX poetry run maturin develop --manifest-path ${_repo_root}/engine/language_client_python/Cargo.toml
poetry run baml-cli generate --from ../baml_src


# Now run integ tests for each
cd "${_repo_root}/integ-tests/typescript"
# Echo version and date to integ-tests.log
echo "Version: $NEW_VERSION" > integ-tests.log
echo "Date: $(date)" >> integ-tests.log
if pnpm integ-tests:ci; then
    ts_tests_status="✅ Typescript integ tests"
else
    ts_tests_status="❌ Typescript integ tests"
    echo "Typescript integ tests failed, but continuing..."
fi

cd "${_repo_root}/integ-tests/python"
# Echo version and date to integ-tests.log
echo "Version: $NEW_VERSION" > integ-tests.log
echo "Date: $(date)" >> integ-tests.log
if $(infisical run --env=test -- poetry run pytest --template=html1/index.html --report=report.html); then
    python_tests_status="✅ Python integ tests"
else
    python_tests_status="❌ Python integ tests"
    echo "Python integ tests failed, but continuing..."
fi

git add .

git commit -m "Run integ tests for $NEW_VERSION"

echo "All done! Please push the branch $_branch_name and create a PR."

gh pr create --base main --head $_branch_name --title "chore: Bump version to $NEW_VERSION" --body "Bump version to $NEW_VERSION\n\n$ts_tests_status\n$python_tests_status\n\nGenerated by bump-version script."
