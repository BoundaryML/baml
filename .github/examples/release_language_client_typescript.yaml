name: Release engine/language_client_typescript
env:
  DEBUG: napi:*
  APP_NAME: baml
  MACOSX_DEPLOYMENT_TARGET: "10.13"
on:
  push:
    branches:
      - canary
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: write
  id-token: write
defaults:
  run:
    working-directory: engine/language_client_typescript
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: aarch64-apple-darwin
            host: macos-14
            build: pnpm build --target aarch64-apple-darwin

          - target: aarch64-pc-windows-msvc
            host: windows-latest
            build: pnpm build --target aarch64-pc-windows-msvc

          - target: aarch64-unknown-linux-gnu
            host: ubuntu-latest
            build: pnpm build --target aarch64-unknown-linux-gnu --use-napi-cross

          - target: x86_64-apple-darwin
            host: macos-latest
            build: pnpm build --target x86_64-apple-darwin

          - target: x86_64-pc-windows-msvc
            host: windows-latest
            build: pnpm build --target x86_64-pc-windows-msvc

          - target: x86_64-unknown-linux-gnu
            host: ubuntu-latest
            build: pnpm build --target x86_64-unknown-linux-gnu --use-napi-cross

          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: pnpm build --target aarch64-pc-windows-msvc

    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9.0.6
          package_json_file: engine/language_client_typescript/package.json
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: engine/language_client_typescript/pnpm-lock.yaml

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: engine/language_client_typescript/*.node
          if-no-files-found: error

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          # - host: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   architecture: x64
          # - host: macos-latest
          #   target: x86_64-apple-darwin
          #   architecture: x64
          - host: macos-latest
            target: aarch64-apple-darwin
            architecture: arm64
        node:
          - "18"
          - "20"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - name: setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.0.6
          package_json_file: engine/language_client_typescript/package.json
          run_install: false

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: engine/language_client_typescript/pnpm-lock.yaml
          architecture: ${{ matrix.settings.architecture }}

      - name: Install dependencies
        run: pnpm install

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: pnpm test

  # test-linux-binding:
  #   name: Test ${{ matrix.target }} - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target:
  #         - x86_64-unknown-linux-gnu
  #         - aarch64-unknown-linux-gnu
  #       node:
  #         - "18"
  #         - "20"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: setup pnpm
  #       uses: pnpm/action-setup@v3
  #       with:
  #         version: 9.0.6
  #         package_json_file: engine/language_client_typescript/package.json
  #         run_install: false
  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #         cache: pnpm
  #         cache-dependency-path: engine/language_client_typescript/pnpm-lock.yaml
  #     - name: Output docker params
  #       id: docker
  #       run: |
  #         node -e "
  #           if ('${{ matrix.target }}'.startsWith('aarch64')) {
  #             console.log('PLATFORM=linux/arm64')
  #           } else if ('${{ matrix.target }}'.startsWith('armv7')) {
  #             console.log('PLATFORM=linux/arm/v7')
  #           } else {
  #             console.log('PLATFORM=linux/amd64')
  #           }
  #         " >> $GITHUB_OUTPUT
  #         node -e "
  #           if ('${{ matrix.target }}'.endsWith('-musl')) {
  #             console.log('IMAGE=node:${{ matrix.node }}-alpine')
  #           } else {
  #             console.log('IMAGE=node:${{ matrix.node }}-slim')
  #           }
  #         " >> $GITHUB_OUTPUT
  #         echo "PNPM_STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
  #     # use --force to download the all platform/arch dependencies
  #     - name: Install dependencies
  #       run: pnpm install --force
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-${{ matrix.target }}
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #       with:
  #         platforms: all
  #     - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  #     - name: Test bindings
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: ${{ steps.docker.outputs.IMAGE }}
  #         options: -v ${{ steps.docker.outputs.PNPM_STORE_PATH }}:${{ steps.docker.outputs.PNPM_STORE_PATH }} -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }}/engine/language_client_typescript --platform ${{ steps.docker.outputs.PLATFORM }}
  #         run: npm run test

  publish:
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    environment: release
    needs:
      - test-macOS-windows-binding
      # - test-linux-binding
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.0.6
          package_json_file: engine/language_client_typescript/package.json
          run_install: false
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: engine/language_client_typescript/pnpm-lock.yaml
          registry-url: "https://registry.npmjs.org"
      - name: Install dependencies
        run: pnpm install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: engine/language_client_typescript/artifacts
      - name: create npm dirs
        run: pnpm napi create-npm-dirs
      - name: Move artifacts
        run: pnpm artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          # npm config set provenance true
          #echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
          # if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          # then
          #   echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          #   npm publish --access public
          # elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          # then
          #   echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          #   npm publish --tag next --access public
          # else
          #   echo "Not a release, skipping publish"
          # fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
