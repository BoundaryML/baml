name: BAML Release

on:
  workflow_dispatch: {}
  # need to run this periodically on the default branch to populate the build cache
  schedule:
    # daily at 2am PST
    - cron: 0 10 * * *
  push:
    tags:
      - "test-release/*.*"
      - "*.*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write
env:
  DEBUG: napi:*
  APP_NAME: baml
  MACOSX_DEPLOYMENT_TARGET: "10.13"
jobs:
  build-wasm:
    runs-on: ubuntu-latest
    name: Build WASM
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: engine
      - name: Bindgen
        run: cargo install -f wasm-bindgen-cli@0.2.92
        working-directory: engine/baml-schema-wasm
      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: "pnpm"
          node-version: 20
          cache-dependency-path: |
            typescript/**/pnpm-lock.yaml
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
        working-directory: typescript/
      - name: Build Typescript Project
        run: pnpm run build
        working-directory: typescript/

      # Build the VSCode Extension
      - name: Build VSCode Extension
        id: build
        run: |
          pnpm run vscode:package
          VERSION=$(cat package.json| grep version | cut -d ' ' -f 4 | sed 's/[",]//g')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        working-directory: typescript/vscode-ext/packages

      # Upload the artifact (helpful for debugging and manual downloads)
      - name: Upload VSCode Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: baml-vscode.vsix
          path: typescript/vscode-ext/packages/baml-extension-${{ steps.build.outputs.version }}.vsix
          if-no-files-found: error

      # Upload the artifact (helpful for debugging and manual downloads)
      - name: Upload VSCode Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: baml-out
          path: typescript/vscode-ext/packages/vscode/out
          if-no-files-found: error

      # upload the lang server artifact
      - name: Upload VSCode Lang Server Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: language-server
          path: typescript/vscode-ext/packages/language-server/out
          if-no-files-found: error

      - name: VSCode Playground Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-playground
          path: typescript/vscode-ext/packages/web-panel/dist
          if-no-files-found: error

  build-ruby-release:
    uses: ./.github/workflows/build-ruby-release.reusable.yaml

  build-release:
    strategy:
      fail-fast: false
      matrix:
        _:
          - target: aarch64-apple-darwin
            host: macos-14
            node_build: pnpm build --target aarch64-apple-darwin
            baml_build_help: "off"
            # mise: true

          # Disabled as python is not supported on aarch64 windows
          # - target: aarch64-pc-windows-msvc
          #   host: windows-latest
          #   node_build: pnpm build --target aarch64-pc-windows-msvc

          - target: aarch64-unknown-linux-gnu
            host: ubuntu-latest
            # from https://github.com/PyO3/maturin-action?tab=readme-ov-file#manylinux-docker-container
            # need a new version of manylinux to build crates on arm64-linux
            container: ghcr.io/rust-cross/manylinux_2_28-cross:aarch64
            node_build: pnpm build --target aarch64-unknown-linux-gnu --use-napi-cross
            cargo_args: -p baml-typescript-ffi -p baml-python-ffi
            baml_build_help: "off"

          - target: x86_64-apple-darwin
            host: macos-latest
            node_build: pnpm build --target x86_64-apple-darwin
            baml_build_help: "off"
            # mise: true

          - target: x86_64-pc-windows-msvc
            host: windows-latest
            node_build: pnpm build --target x86_64-pc-windows-msvc
            setup-python-architecture: x64
            cargo_args: -p baml-typescript-ffi -p baml-python-ffi
            baml_build_help: "off"

          - target: x86_64-unknown-linux-gnu
            host: ubuntu-latest
            # Using any of the manylinux containers breaks a bunch of stuff: actions/checkout here, pnpm build there - not worth it.
            container: null
            node_build: pnpm build --target x86_64-unknown-linux-gnu --use-napi-cross
            mise: true

    name: Build ${{ matrix._.target }}
    runs-on: ${{ matrix._.host }}
    container: ${{ matrix._.container }}
    steps:
      - uses: actions/checkout@v4
      # Install python set up
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
          architecture: ${{ matrix._.setup-python-architecture }}

      - uses: jdx/mise-action@v2
        if: ${{ matrix._.mise }}

      - uses: pnpm/action-setup@v3
        with:
          version: 9.0.6
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: |
            engine/language_client_typescript/pnpm-lock.yaml

      # Install rust
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix._.target }}

      # Install steps
      - name: PNPM Install
        run: pnpm install --frozen-lockfile
        working-directory: engine/language_client_typescript

      # Rust caching
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: engine
          shared-key: engine-${{ github.job }}-${{ matrix._.target }}
          cache-on-failure: true

      - name: Build Rust
        run: cargo build --release --target ${{ matrix._.target }} ${{ matrix._.cargo_args }}
        working-directory: engine
        env:
          BAML_BUILD_HELP: ${{ matrix._.baml_build_help }}

      # Build Node
      - name: PNPM Build
        run: ${{ matrix._.node_build }}
        working-directory: engine/language_client_typescript
        env:
          BAML_BUILD_HELP: ${{ matrix._.baml_build_help }}

      # Build Python
      - name: Build Python
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix._.target }}
          command: build
          args: --release --out engine/language_client_python/dist --manifest-path engine/language_client_python/Cargo.toml
          container: off

      # Upload
      - name: Upload Python
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix._.target }}
          path: engine/language_client_python/dist
          if-no-files-found: error

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix._.target }}
          path: engine/language_client_typescript/*.node
          if-no-files-found: error

  # placeholder fan-in step
  assert-all-builds-passed:
    runs-on: ubuntu-latest
    needs:
      - build-release
      - build-ruby-release
      - build-wasm
    steps:
      - run: true

  publish-to-pypi:
    environment: release
    if: github.ref_type == 'tag'
    needs: [assert-all-builds-passed]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*

      - run: mkdir dist && mv wheels-*/* dist
      # authz is managed via OIDC configured at https://pypi.org/manage/project/baml-py/settings/publishing/
      # it is pinned to this github actions filename, so renaming this file is not safe!!
      - name: Publish package to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') && !startsWith(github.ref, 'refs/tags/test-release') }}
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-npm:
    environment: release
    if: github.ref_type == 'tag'
    needs: [assert-all-builds-passed]
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.0.6
          package_json_file: engine/language_client_typescript/package.json
          run_install: false

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: engine/language_client_typescript/pnpm-lock.yaml
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: pnpm install
        working-directory: engine/language_client_typescript

      - uses: actions/download-artifact@v4
        with:
          pattern: bindings-*
          path: engine/language_client_typescript/artifacts

      - name: create npm dirs
        run: pnpm napi create-npm-dirs
        working-directory: engine/language_client_typescript

      - name: Move artifacts
        run: pnpm artifacts
        working-directory: engine/language_client_typescript

      - name: Publish
        if: ${{ startsWith(github.ref, 'refs/tags/') && !startsWith(github.ref, 'refs/tags/test-release') }}
        run: |
          npm publish --access public
        working-directory: engine/language_client_typescript
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-to-rubygems:
    environment: release
    if: github.ref_type == 'tag'
    needs: [assert-all-builds-passed]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: rubygems/configure-rubygems-credentials@main
        with:
          # https://rubygems.org/profile/oidc/api_key_roles/rg_oidc_akr_p6x4xz53qtk948na3bgy
          role-to-assume: rg_oidc_akr_p6x4xz53qtk948na3bgy

      - uses: jdx/mise-action@v2

      - uses: actions/download-artifact@v4
        with:
          pattern: gem-*
          path: engine/language_client_ruby/pkg/
          merge-multiple: true

      - working-directory: engine/language_client_ruby
        run: |
          set -euxo pipefail
          find pkg
          for i in $(ls pkg/*.gem); do
            gem push $i
          done

  # publish-vscode:
  #   environment: release
  #   needs: [build-release, build-wasm]
  #   if: github.ref_type == 'tag'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     # Get all the artifacts
  #     - name: Get artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: baml-vscode.vsix
  #         path: typescript/vscode-ext/packages
  #     - name: Get artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: baml-out
  #         path: typescript/vscode-ext/packages/vscode/out
  #     - name: Get artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: language-server
  #         path: typescript/vscode-ext/packages/language-server/out
  #     - name: Get artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: vscode-playground
  #         path: typescript/vscode-ext/packages/web-panel/dist

  #     - name: setup pnpm
  #       uses: pnpm/action-setup@v3
  #       with:
  #         version: 9.0.6
  #         package_json_file: typescript/package.json
  #         run_install: false
  #     # Set up Node.js
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         cache: "pnpm"
  #         node-version: 20
  #         cache-dependency-path: typescript/pnpm-lock.yaml

  #     - name: Install Dependencies
  #       run: pnpm install --frozen-lockfile
  #       working-directory: typescript/
  #     - name: Publish
  #       if: ${{ startsWith(github.ref, 'refs/tags/') && !startsWith(github.ref, 'refs/tags/test-release') }}
  #       run: |
  #         pnpm run vscode:publish --no-git-tag-version -p ${{ secrets.VSCODE_PAT }}
  #       working-directory: typescript/vscode-ext/packages

  release-github:
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    needs:
      - publish-to-pypi
      - publish-to-npm
      - publish-to-rubygems
      # - publish-vscode
    steps:
      - uses: actions/checkout@v4

      - name: Get Changelog
        id: latest_release
        run: |
          echo "::set-output name=changelog::$(awk '/^## \[/{if (p) exit; p=1} p' CHANGELOG.md)"

      - name: Create Release
        uses: mikepenz/action-gh-release@v1 #softprops/action-gh-release
        with:
          body: ${{steps.latest_release.outputs.changelog}}
