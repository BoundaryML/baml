name: CI
env:
  DEBUG: napi:*
  APP_NAME: baml-core-ffi
  MACOSX_DEPLOYMENT_TARGET: "10.13"
permissions:
  contents: write
  id-token: write
"on":
  push:
    branches:
      - log-jest
      - canary
    tags-ignore:
      - "**"
    paths:
      - engine/**
      - .github/workflows/baml-core-ffi-typescript-ci.yml
      - .github/workflows/baml-core-ffi-typescript-lint.yml
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    defaults:
      run:
        working-directory: engine/baml-core-ffi
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              yarn build --target i686-pc-windows-msvc
              yarn test
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              yarn build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: set -e && yarn build && strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              yarn build --target aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              yarn build --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip *.node
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: |
              yarn build --target armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip *.node
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: |
              yarn build --target aarch64-linux-android
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: |
              yarn build --target armv7-linux-androideabi
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              yarn build --target aarch64-unknown-linux-musl &&
              /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip *.node
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: engine/baml-core-ffi/yarn.lock
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            engine/baml-core-ffi/.cargo/registry/index/
            engine/baml-core-ffi/.cargo/registry/cache/
            engine/baml-core-ffi/.cargo/git/db/
            engine/baml-core-ffi/.cargo-cache
            engine/baml-core-ffi/target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.11.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          cache: yarn
          architecture: x86
          cache-dependency-path: engine/baml-core-ffi/yarn.lock
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/engine/baml-core-ffi/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/engine/baml-core-ffi/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/engine/baml-core-ffi/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}/engine:/build -w /build/baml-core-ffi"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: engine/baml-core-ffi/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  build-freebsd:
    runs-on: macos-13
    name: Build FreeBSD
    defaults:
      run:
        working-directory: engine/baml-core-ffi
    steps:
      - uses: actions/checkout@v4
      - name: Build
        id: build
        uses: cross-platform-actions/action@v0.23.0
        env:
          DEBUG: napi:*
          RUSTUP_IO_THREADS: 1
        with:
          operating_system: freebsd
          version: "13.2"
          memory: 13G
          cpu_count: 3
          environment_variables: DEBUG RUSTUP_IO_THREADS
          shell: bash
          run: |
            sudo pkg install -y -f curl node libnghttp2 npm
            sudo npm install -g yarn --ignore-scripts
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain beta
            source "$HOME/.cargo/env"
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            echo "~~~~ yarn --version ~~~~"
            yarn --version
            cd engine/baml-core-ffi
            pwd
            ls -lah
            whoami
            env
            freebsd-version
            yarn install
            yarn build
            rm -rf node_modules
            rm -rf target
            rm -rf .yarn/cache
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-freebsd
          path: engine/baml-core-ffi/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-macOS-windows-binding:
    defaults:
      run:
        working-directory: engine/baml-core-ffi
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          - host: macos-latest
            target: x86_64-apple-darwin
        node:
          - "18"
          - "20"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: engine/baml-core-ffi/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: engine/baml-core-ffi
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test
  test-linux-x64-gnu-binding:
    defaults:
      run:
        working-directory: engine/baml-core-ffi
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "18"
          - "20"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: engine/baml-core-ffi/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: engine/baml-core-ffi
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test
  test-linux-x64-musl-binding:
    defaults:
      run:
        working-directory: engine/baml-core-ffi
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "18"
          - "20"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: engine/baml-core-ffi/yarn.lock
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.libc "musl"
          yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: engine/baml-core-ffi
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine yarn test
  test-linux-aarch64-gnu-binding:
    defaults:
      run:
        working-directory: engine/baml-core-ffi
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "18"
          - "20"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: engine/baml-core-ffi
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "glibc"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-slim
          options: "--platform linux/arm64 -v ${{ github.workspace }}/engine/baml-core-ffi:/build -w /build"
          run: |
            set -e
            yarn test
            ls -la
  test-linux-aarch64-musl-binding:
    defaults:
      run:
        working-directory: engine/baml-core-ffi
    name: Test bindings on aarch64-unknown-linux-musl - node@lts
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-musl
          path: engine/baml-core-ffi
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "musl"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:lts-alpine
          options: "--platform linux/arm64 -v ${{ github.workspace }}/engine/baml-core-ffi:/build -w /build"
          run: |
            set -e
            yarn test
  test-linux-arm-gnueabihf-binding:
    defaults:
      run:
        working-directory: engine/baml-core-ffi
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "18"
          - "20"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: engine/baml-core-ffi
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-bullseye-slim
          options: "--platform linux/arm/v7 -v ${{ github.workspace }}/engine/baml-core-ffi:/build -w /build"
          run: |
            set -e
            yarn test
            ls -la
  publish:
    defaults:
      run:
        working-directory: engine/baml-core-ffi
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build-freebsd
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      - test-linux-aarch64-musl-binding
      - test-linux-arm-gnueabihf-binding
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: engine/baml-core-ffi/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: engine/baml-core-ffi/artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
