name: Gloo CLI

on:
  pull_request:
    paths:
      - "engine/**"
    branches:
      - canary
  push:
    paths:
      - "engine/.bumpversion.cfg"
    branches:
      - canary
    tags:
      - "release/baml-cli/v*.*.*"

jobs:
  build:
    name: Build ${{ matrix.platform.name }}

    strategy:
      fail-fast: false # Don't stop all builds if one fails
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: baml
            name: baml-linux-x86_64
            command: build

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: baml.exe
            name: baml-Windows-x86_64
            command: both

          - os: macOS-latest
            target: x86_64-apple-darwin
            bin: baml
            name: baml-Darwin-x86_64
            command: both

          - os: macOS-latest
            target: aarch64-apple-darwin
            bin: baml
            name: baml-Darwin-apple-silicon
            command: build # Can't test on macOS-latest because it's Intel

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            engine

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: ${{ matrix.platform.command }}
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: false # Don't strip debug symbols
          working-directory: engine/baml-cli

      - name: Add artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform.name }}
          path: engine/target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}

  pre-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/canary'
    environment: nightly

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get artifact [Darwin-Intel]
        uses: actions/download-artifact@v3
        with:
          name: baml-Darwin-x86_64
          path: engine/target/x86_64-apple-darwin/release/
      - name: Get artifact [Darwin-Silicon]
        uses: actions/download-artifact@v3
        with:
          name: baml-Darwin-apple-silicon
          path: engine/target/aarch64-apple-darwin/release/
      - name: Get artifact [Linux]
        uses: actions/download-artifact@v3
        with:
          name: baml-linux-x86_64
          path: engine/target/x86_64-unknown-linux-gnu/release/
      - name: Get artifact [Windows]
        uses: actions/download-artifact@v3
        with:
          name: baml-Windows-x86_64
          path: engine/target/x86_64-pc-windows-msvc/release/
      - id: hash
        run: |
          VERSION=$(cat engine/.bumpversion.cfg | grep current_version | cut -d '=' -f 2 | sed 's/[", ]//g')

          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-canary\.[0-9]+$ ]]; then
            echo "Version ($VERSION) is not a pre-release build"
            exit 1
          fi

          # Function to package binaries for Unix-like systems
          package_binary() {
            local platform="$1"
            local binary="$2"
            local output_dir="../../../"
            local archive_name="${binary}-${platform}.tar.gz"
      
            pushd "engine/target/$platform/release"
            tar -czvf "$output_dir$archive_name" "$binary"
            popd
      
            local hash_value=$(shasum -a 256 "$output_dir$archive_name" | cut -d ' ' -f 1)
            echo "${platform}_hash=$hash_value" >> $GITHUB_OUTPUT
          }
      
          # Package binaries for Unix-like platforms
          package_binary "x86_64-unknown-linux-gnu" "baml"
          package_binary "x86_64-apple-darwin" "baml"
          package_binary "aarch64-apple-darwin" "baml"
          
          windows_binary_path="engine/target/x86_64-pc-windows-msvc/release/baml.exe"
          windows_hash=$(shasum -a 256 "$windows_binary_path" | cut -d ' ' -f 1)
          echo "windows_hash=$windows_hash" >> $GITHUB_OUTPUT
      
          echo "version=$(echo $VERSION | cut -d '-' -f 1)" >> $GITHUB_OUTPUT
          echo "full_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "unstable/cli/v${{ steps.hash.outputs.version }}"
          files: |
            baml-linux-x86_64.tar.gz
            baml-apple-intel.tar.gz
            baml-apple-arm.tar.gz
            engine/target/x86_64-pc-windows-msvc/release/baml.exe
          prerelease: true # Must manually upgrade to release once homebrew is updated.
          body: |
            ## Hashes
            Full Version: `${{ steps.hash.outputs.full_version }}`
            Linux: `${{ steps.hash.outputs.linux_hash }}`
            Mac: Intel: `${{ steps.hash.outputs.darwin_intel_hash }}`
            Mac: Apple Silicon: `${{ steps.hash.outputs.darwin_arm_hash }}`
            Windows: `${{ steps.hash.outputs.windows_hash }}`
  release:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/release/')
    environment: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get artifact [Darwin-Intel]
        uses: actions/download-artifact@v3
        with:
          name: baml-Darwin-x86_64
          path: engine/target/x86_64-apple-darwin/release/
      - name: Get artifact [Darwin-Silicon]
        uses: actions/download-artifact@v3
        with:
          name: baml-Darwin-apple-silicon
          path: engine/target/aarch64-apple-darwin/release/
      - name: Get artifact [Linux]
        uses: actions/download-artifact@v3
        with:
          name: baml-linux-x86_64
          path: engine/target/x86_64-unknown-linux-gnu/release/
      - name: Get artifact [Windows]
        uses: actions/download-artifact@v3
        with:
          name: baml-Windows-x86_64
          path: engine/target/x86_64-pc-windows-msvc/release/
      - id: hash
        run: |
          VERSION=$(cat engine/.bumpversion.cfg | grep current_version | cut -d '=' -f 2 | sed 's/[", ]//g')
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version ($VERSION) is not a release build"
            exit 1
          fi
          tar -czvf baml-linux-x86_64.tar.gz engine/target/x86_64-unknown-linux-gnu/release/baml
          tar -czvf baml-apple-intel.tar.gz engine/target/x86_64-apple-darwin/release/baml
          tar -czvf baml-apple-arm.tar.gz engine/target/aarch64-apple-darwin/release/baml
          echo "linux_hash=$(shasum -a 256 baml-linux-x86_64.tar.gz | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
          echo "darwin_intel_hash=$(shasum -a 256 baml-apple-intel.tar.gz | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
          echo "darwin_arm_hash=$(shasum -a 256 baml-apple-arm.tar.gz | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
          echo "windows_hash=$(shasum -a 256 engine/target/x86_64-pc-windows-msvc/release/baml.exe | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Cli: ${{ steps.hash.outputs.version }}"
          tag_name: "releases/baml-cli/v${{ steps.hash.outputs.version }}"
          files: |
            baml-linux-x86_64.tar.gz
            baml-apple-intel.tar.gz
            baml-apple-arm.tar.gz
            engine/target/x86_64-pc-windows-msvc/release/baml.exe
          prerelease: true # Must manually upgrade to release once homebrew is updated.
          body: |
            ## Hashes
            Linux: `${{ steps.hash.outputs.linux_hash }}`
            Mac: Intel: `${{ steps.hash.outputs.darwin_intel_hash }}`
            Mac: Apple Silicon: `${{ steps.hash.outputs.darwin_arm_hash }}`
            Windows: `${{ steps.hash.outputs.windows_hash }}`

      # TODO: Create a pull request on GlooHQ/homebrew-baml to update the version by running
      # release/patch-homebrew.sh
