name: Gloo CLI

permissions: 
  contents: write

on:
  pull_request:
    paths:
      - 'cli/**'
    branches:
      - canary
  push:
    paths:
      - 'cli/**'
    branches:
      - canary
  workflow_dispatch:
    inputs:
      release:
        description: 'Should this be a release? (y/n)'
        required: true
        default: 'n'

jobs:
  build:
    name: Build ${{ matrix.platform.name }}

    strategy:
      fail-fast: false # Don't stop all builds if one fails
      matrix:
        platform:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bin: gloo
            name: gloo-linux-x86_64
            command: build

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: gloo.exe
            name: gloo-Windows-x86_64
            command: both

          - os: macOS-latest
            target: x86_64-apple-darwin
            bin: gloo
            name: gloo-Darwin-x86_64
            command: both
          - os: macOS-latest
            target: aarch64-apple-darwin
            bin: gloo
            name: gloo-Darwin-apple-silicon
            command: build # Can't test on macOS-latest because it's Intel

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4   
      
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: ${{ matrix.platform.command }}
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
          working-directory: cli
      - name: Add artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform.name }}
          path: cli/target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
      

  release:
    runs-on: ubuntu-latest
    needs: build

    # if: github.event.inputs.release == 'y'

    steps:
      - name: List
        run: ls -la

      - name: Checkout code
        uses: actions/checkout@v4   
      
      - name: List
        run: ls -la

      - name: Get artifact [Darwin-Intel]
        uses: actions/download-artifact@v3
        with:
          name: gloo-Darwin-x86_64
          path: cli/target/x86_64-apple-darwin/release/
      - name: Get artifact [Darwin-Silicon]
        uses: actions/download-artifact@v3
        with:
          name: gloo-Darwin-apple-silicon
          path: cli/target/aarch64-apple-darwin/release/
      - name: Get artifact [Linux]
        uses: actions/download-artifact@v3
        with:
          name: gloo-linux-x86_64
          path: cli/target/x86_64-unknown-linux-gnu/release/
      - name: Get artifact [Windows]
        uses: actions/download-artifact@v3
        with:
          name: gloo-Windows-x86_64
          path: cli/target/x86_64-pc-windows-msvc/release/
      - name: Generate Hashes
        id: hash
        run: |
          tar -czvf gloo-linux-x86_64.tar.gz cli/target/x86_64-unknown-linux-gnu/release/gloo
          tar -czvf gloo-apple-intel.tar.gz cli/target/x86_64-apple-darwin/release/gloo
          tar -czvf gloo-apple-arm.tar.gz cli/target/aarch64-apple-darwin/release/gloo
          echo "linux_hash=$(shasum -a 256 gloo-linux-x86_64.tar.gz | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
          echo "darwin_intel_hash=$(shasum -a 256 gloo-apple-intel.tar.gz | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
          echo "darwin_arm_hash=$(shasum -a 256 gloo-apple-arm.tar.gz | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
          echo "windows_hash=$(shasum -a 256 cli/target/x86_64-pc-windows-msvc/release/gloo.exe | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
          echo "version=$(cat cli/Cargo.toml | grep version | cut -d ' ' -f 3 | sed 's/"//g')" >> $GITHUB_OUTPUT
      
      
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "cli-${{ steps.hash.outputs.version }}"
          files: |
            gloo-linux-x86_64.tar.gz
            gloo-apple-intel.tar.gz
            gloo-apple-arm.tar.gz
            cli/target/x86_64-pc-windows-msvc/release/gloo.exe
          draft: true
          prerelease: true
          body: |
            ## Hashes
            Linux: `${{ steps.hash.outputs.linux_hash }}`
            Mac: Intel: `${{ steps.hash.outputs.darwin_intel_hash }}`
            Mac: Apple Silicon: `${{ steps.hash.outputs.darwin_arm_hash }}`
            Windows: `${{ steps.hash.outputs.windows_hash }}`
          