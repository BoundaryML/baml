// This file is auto-generated. Do not edit this file manually.
//
// Disable formatting for this file to avoid linting errors.
// tslint:disable
// @ts-nocheck

enum DocumentTopic {
  TECHNOLOGY = "TECHNOLOGY",
  HEALTH_MEDICINE = "HEALTH_MEDICINE",
  BUSINESS_FINANCE = "BUSINESS_FINANCE",
  SCIENCE_ENVIRONMENT = "SCIENCE_ENVIRONMENT",
  ARTS_CULTURE = "ARTS_CULTURE",
  TRAVEL_LEISURE = "TRAVEL_LEISURE",
  EDUCATION_CAREER = "EDUCATION_CAREER",
  POLITICS_GOVERNMENT = "POLITICS_GOVERNMENT",
  SPORTS_FITNESS = "SPORTS_FITNESS",
  FOOD_NUTRITION = "FOOD_NUTRITION",
  FASHION_BEAUTY = "FASHION_BEAUTY",
  ENTERTAINMENT = "ENTERTAINMENT",
  REAL_ESTATE_ARCHITECTURE = "REAL_ESTATE_ARCHITECTURE",
  PERSONAL_DEVELOPMENT = "PERSONAL_DEVELOPMENT",
  HISTORY_ARCHAEOLOGY = "HISTORY_ARCHAEOLOGY",
  SOCIAL_CULTURAL_ISSUES = "SOCIAL_CULTURAL_ISSUES",
  PHILOSOPHY_SPIRITUALITY = "PHILOSOPHY_SPIRITUALITY",
  AUTOMOTIVE_TRANSPORTATION = "AUTOMOTIVE_TRANSPORTATION",
  DIY_HOME_IMPROVEMENT = "DIY_HOME_IMPROVEMENT",
  GAMING_DIGITAL_ENTERTAINMENT = "GAMING_DIGITAL_ENTERTAINMENT",
}

enum Intent {
  BookMeeting = "BookMeeting",
  AvailabilityQuery = "AvailabilityQuery",
  SetReminder = "SetReminder",
}

enum Sentiment {
  POSITIVE = "POSITIVE",
  NEUTRAL = "NEUTRAL",
  NEGATIVE = "NEGATIVE",
}

enum ShippingPort {
  BOS = "BOS",
  JFK = "JFK",
  LAX = "LAX",
  MIA = "MIA",
  ORD = "ORD",
}

enum Tool {
  CodeInterpreter = "CodeInterpreter",
  DrawImage = "DrawImage",
  GenerateText = "GenerateText",
}

enum UserType {
  AI = "AI",
  User = "User",
}

interface Attendee {
  name: string;
  email: string;
}

interface Container {
  number: string;
  isoCode: string | null;
  status: string;
  events: Event[];
}

interface Conversation {
  messages: Message[];
}

interface Coordinate {
  lat: number | null;
  lng: number | null;
  updatedAt: string | null;
}

interface DataStruct {
  port: ShippingPort | string;
  booking_number: number;
}

interface Event {
  location: Location;
  facility: Facility;
  description: string;
  eventType: string;
  eventCode: string;
  status: string;
  date: string;
  isActual: boolean;
  isAdditionalEvent: boolean;
  routeType: string;
  transportType: string;
  vessel: Vessel;
  voyage: string;
}

interface Facility {
  name: string;
  countryCode: string;
  locode: string;
  bicCode: string | null;
  smdgCode: string | null;
  coordinates: Coordinate;
}

interface Invoice {
  name: string;
  amount: number;
}

interface Location {
  name: string;
  state: string;
  country: string;
  countryCode: string;
  locode: string;
  coordinates: Coordinate;
  timezone: string;
}

interface MeetingRequest {
  time: string;
  attendees: Attendee[];
  topic: string;
}

interface MeetingRequestPartial {
  time: string | null;
  duration: string | null;
  attendees: string[];
  topic: string | null;
}

interface MeetingRequestPartial2 {
  time: string | null;
  duration: string | null;
  attendees: string[];
  topic: string | null;
}

interface Message {
  user: UserType;
  content: string;
}

interface MyObject {
  foo: string | string[];
  bar: string[];
}

interface Route {
  prepol: RoutePoint;
  pol: RoutePoint;
  pod: RoutePoint;
  postpod: RoutePoint;
}

interface RoutePoint {
  location: Location | null;
  date: string | null;
  actual: boolean | null;
  predictiveEta: string | null;
}

interface Shipment {
  metadata: ShipmentMetadata;
  locations: Location[];
  route: Route;
  vessels: Vessel[];
  facilities: Facility[];
  containers: Container[];
}

interface ShipmentMetadata {
  shipmentType: string;
  shipmentNumber: string;
  sealine: string;
  sealineName: string;
  shippingStatus: string;
  updatedAt: string;
}

interface Validation {
  requirements_complete: boolean;
  follow_up_question: string | null;
}

interface Vessel {
  name: string;
  imo: number;
  callSign: string;
  mmsi: number;
  flag: string;
}


export { DocumentTopic, Intent, Sentiment, ShippingPort, Tool, UserType, Attendee, Container, Conversation, Coordinate, DataStruct, Event, Facility, Invoice, Location, MeetingRequest, MeetingRequestPartial, MeetingRequestPartial2, Message, MyObject, Route, RoutePoint, Shipment, ShipmentMetadata, Validation, Vessel }