# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..clients.client_azure_gpt4 import AZURE_GPT4
from ..functions.fx_analyzeproductreview import BAMLAnalyzeProductReview
from ..types.classes.cls_reviewanalysis import ReviewAnalysis
from ..types.enums.enm_reviewhelpfulness import ReviewHelpfulness
from ..types.enums.enm_reviewsentiment import ReviewSentiment
from ..types.partial.classes.cls_reviewanalysis import PartialReviewAnalysis
from baml_core.jinja.render_prompt import RenderData
from baml_core.provider_manager.llm_response import LLMResponse
from baml_core.stream import AsyncStream
from baml_lib._impl.deserializer import Deserializer


import typing
# Impl: default_config
# Client: AZURE_GPT4
# An implementation of AnalyzeProductReview.

__prompt_template = """\
{{ _.chat("system")}}

You are a customer feedback analysis assistant.
Your job is classify the sentiment of and determine how helpful product reviews are.

{{ _.chat("user")}}

Analyze the sentiment and helpfulness of the following product review:

> {{ product_review }}

{{ ctx.output_format }}

JSON:\
"""

# We ignore the type here because baml does some type magic to make this work
# for inline SpecialForms like Optional, Union, List.
__deserializer = Deserializer[ReviewAnalysis](ReviewAnalysis)  # type: ignore

# Add a deserializer that handles stream responses, which are all Partial types
__partial_deserializer = Deserializer[PartialReviewAnalysis](PartialReviewAnalysis)  # type: ignore

__output_format = """
Use this output format:
{
  "sentiment": "sentiment as string",
  "helpfulness": "helpful as string"
}

Use these enums for the output:
helpful
---
very helpful
somewhat helpful
not helpful
---

sentiment
---
Happy
Neutral
Sad
---
""".strip()

__template_macros = [
]


async def default_config(*, product_review: str) -> ReviewAnalysis:
    response = await AZURE_GPT4.run_jinja_template(
        jinja_template=__prompt_template,
        output_format=__output_format, template_macros=__template_macros,
        args=dict(product_review=product_review)
    )
    deserialized = __deserializer.from_string(response.generated)
    return deserialized


def default_config_stream(*, product_review: str
) -> AsyncStream[ReviewAnalysis, PartialReviewAnalysis]:
    def run_prompt() -> typing.AsyncIterator[LLMResponse]:
        raw_stream = AZURE_GPT4.run_jinja_template_stream(
            jinja_template=__prompt_template,
            output_format=__output_format, template_macros=__template_macros,
            args=dict(product_review=product_review)
        )
        return raw_stream
    stream = AsyncStream(stream_cb=run_prompt, partial_deserializer=__partial_deserializer, final_deserializer=__deserializer)
    return stream

BAMLAnalyzeProductReview.register_impl("default_config")(default_config, default_config_stream)