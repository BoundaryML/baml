# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..clients.client_azure_gpt4 import AZURE_GPT4
from ..functions.fx_classifytool import BAMLClassifyTool
from ..types.classes.cls_classifyresponse import ClassifyResponse
from ..types.enums.enm_tool import Tool
from ..types.partial.classes.cls_classifyresponse import PartialClassifyResponse
from baml_core.provider_manager.llm_provider_base import LLMChatMessage
from baml_core.provider_manager.llm_response import LLMResponse
from baml_core.stream import AsyncStream
from baml_lib._impl.deserializer import Deserializer
from typing import List


import typing
# Impl: v1
# Client: AZURE_GPT4
# An implementation of ClassifyTool.

__prompt_template: List[LLMChatMessage] = [
{
    "role": "system",
    "content": """\
{query}

UserContext:
{context}

tool
---
k1: Use this tool if the user is asking to compute something
k2: Use this tool if the user is asking to draw something
k3: Use this tool if the user is asking to generate text\
"""
}
,
{
    "role": "user",
    "content": """\
Use this output format:
{
  // Any number of tools the user may want to use
  "tool": "tool as string"[],
  // This is the assistance reponse
  "foo": string
}

JSON:\
"""
}

]

__input_replacers = {
    "{context}",
    "{query}"
}


# We ignore the type here because baml does some type magic to make this work
# for inline SpecialForms like Optional, Union, List.
__deserializer = Deserializer[ClassifyResponse](ClassifyResponse)  # type: ignore
__deserializer.overload("ClassifyResponse", {"foo": "assistant_response"})

# Add a deserializer that handles stream responses, which are all Partial types
__partial_deserializer = Deserializer[PartialClassifyResponse](PartialClassifyResponse)  # type: ignore
__partial_deserializer.overload("ClassifyResponse", {"foo": "assistant_response"})







async def v1(*, context: str, query: str) -> ClassifyResponse:
    response = await AZURE_GPT4.run_chat_template(__prompt_template, replacers=__input_replacers, params=dict(context=context, query=query))
    deserialized = __deserializer.from_string(response.generated)
    return deserialized


def v1_stream(*, context: str, query: str
) -> AsyncStream[ClassifyResponse, PartialClassifyResponse]:
    def run_prompt() -> typing.AsyncIterator[LLMResponse]:
        raw_stream = AZURE_GPT4.run_chat_template_stream(__prompt_template, replacers=__input_replacers, params=dict(context=context, query=query))
        return raw_stream
    stream = AsyncStream(stream_cb=run_prompt, partial_deserializer=__partial_deserializer, final_deserializer=__deserializer)
    return stream

BAMLClassifyTool.register_impl("v1")(v1, v1_stream)