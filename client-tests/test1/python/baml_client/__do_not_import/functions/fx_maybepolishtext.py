# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..types.classes.cls_conversation import Conversation
from ..types.classes.cls_improvedresponse import ImprovedResponse, PartialImprovedResponse
from ..types.classes.cls_message import Message
from ..types.classes.cls_proposedmessage import ProposedMessage
from ..types.enums.enm_messagesender import MessageSender
from ..types.enums.enm_sentiment import Sentiment
from baml_lib._impl.functions import BaseBAMLFunction
from typing import Protocol, runtime_checkable
import typing
from baml_core.stream import BAMLStreamResponse

IMaybePolishTextOutput = ImprovedResponse

@runtime_checkable
class IMaybePolishText(Protocol):
    """
    This is the interface for a function.

    Args:
        arg: ProposedMessage

    Returns:
        ImprovedResponse
    """

    async def __call__(self, arg: ProposedMessage, thing: str, /) -> ImprovedResponse:
        ...

    
    async def stream(self, arg: ProposedMessage, /) ->  typing.AsyncIterator[BAMLStreamResponse[ImprovedResponse, PartialImprovedResponse]]:
        ...

class IBAMLMaybePolishText(BaseBAMLFunction[ImprovedResponse, PartialImprovedResponse]):
    def __init__(self) -> None:
        super().__init__(
            "MaybePolishText",
            IMaybePolishText,
            ["v1", "v2"],
        )

    async def __call__(self, *args, **kwargs) -> ImprovedResponse:
        return await self.get_impl("v1").run(*args, **kwargs)
    
    async def stream(self, *args, **kwargs) -> typing.AsyncIterator[BAMLStreamResponse[ImprovedResponse, PartialImprovedResponse]]:
        res = self.get_impl("v1").stream(*args, **kwargs)
        async for r in res:
            yield r

BAMLMaybePolishText = IBAMLMaybePolishText()

__all__ = [ "BAMLMaybePolishText" ]
